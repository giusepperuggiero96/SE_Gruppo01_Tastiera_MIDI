
USBmidi.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001c0 l    d  .text	00000000 .text
0800b7b0 l    d  .rodata	00000000 .rodata
0800bd00 l    d  .ARM	00000000 .ARM
0800bd08 l    d  .init_array	00000000 .init_array
0800bd10 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
10000000 l    d  .ccmram	00000000 .ccmram
20000ac8 l    d  .bss	00000000 .bss
200014dc l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .comment	00000000 .comment
00000000 l    df *ABS*	00000000 /tmp/ccQVbqbi.o
080019b4 l       .text	00000000 LoopCopyDataInit
080019ae l       .text	00000000 CopyDataInit
080019c6 l       .text	00000000 LoopFillZerobss
080019c2 l       .text	00000000 FillZerobss
080019f0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
0800b798 l     O .text	00000000 __EH_FRAME_BEGIN__
080001c0 l     F .text	00000000 __do_global_dtors_aux
20000ac8 l       .bss	00000001 completed.1
0800bd10 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
080001e4 l     F .text	00000000 frame_dummy
20000acc l       .bss	00000018 object.0
0800bd0c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 __call_atexit.c
080011dc l     F .text	00000014 register_fini
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 syscalls.c
20000af4 l     O .bss	00000004 heap_end.0
20000af8 l     O .bss	000000a0 openfiles
20000438 l     O .data	00000004 supports_ext_exit_extended
2000043c l     O .data	00000004 supports_ext_stdout_stderr
00000000 l    df *ABS*	00000000 _exit.c
00000000 l    df *ABS*	00000000 _kill.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_adc.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_adc_ex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim.c
00000000 l    df *ABS*	00000000 stm32f4xx_hal_tim_ex.c
00000000 l    df *ABS*	00000000 stm32f4xx_ll_usb.c
080034b0 l     F .text	00000030 USB_CoreReset
00000000 l    df *ABS*	00000000 stm32f4_discovery.c
00000000 l    df *ABS*	00000000 usbd_midi.c
08003f60 l     F .text	00000004 USBD_MIDI_Setup
08003f64 l     F .text	0000000c USBD_MIDI_GetCfgDesc
08003f70 l     F .text	0000000c USBD_MIDI_GetDeviceQualifierDesc
08003f7c l     F .text	00000078 USBD_MIDI_SOF
08003ff4 l     F .text	00000048 USBD_MIDI_DataIn
0800403c l     F .text	00000034 USBD_MIDI_DataOut
08004070 l     F .text	0000002a USBD_MIDI_DeInit
0800409c l     F .text	00000064 USBD_MIDI_Init
08004100 l     F .text	0000000c USBD_MIDI_GetOtherSpeedCfgDesc
20000490 l     O .data	00000065 USBD_MIDI_CfgDesc
00000000 l    df *ABS*	00000000 usbd_midi_if.c
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
08004492 l     F .text	00000016 USBD_CtlError.constprop.0
20000b9c l     O .bss	00000001 cfgidx.0
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 main.c
08004950 l     F .text	0000000a Error_Handler
20000504 l     O .data	00000002 converted_old
0800b7d7 l     O .rodata	00000010 indexes
0800b7e7 l     O .rodata	00000007 keyboard
0800b7ee l     O .rodata	00000084 song
00000000 l    df *ABS*	00000000 stm32f4xx_hal_msp.c
00000000 l    df *ABS*	00000000 stm32f4xx_it.c
00000000 l    df *ABS*	00000000 system_stm32f4xx.c
00000000 l    df *ABS*	00000000 usbd_conf.c
00000000 l    df *ABS*	00000000 usbd_desc.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800776c l     F .text	00000080 __sbprintf
0800b948 l     O .rodata	00000010 blanks.1
0800b958 l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
08007910 l     F .text	00000126 quorem
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mprec.c
0800bb80 l     O .rodata	0000000c p05.0
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 s_frexp.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 vfprintf.c
080097f8 l     F .text	00000076 __sprint_r.part.0
0800a67c l     F .text	00000080 __sbprintf
0800bb8c l     O .rodata	00000010 blanks.1
0800bb9c l     O .rodata	00000010 zeroes.0
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 /home/giosef/Documents/SE_workdir/gcc-arm-none-eabi-10-2020-q4-major/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/giosef/Documents/SE_workdir/gcc-arm-none-eabi-10-2020-q4-major/bin/../lib/gcc/arm-none-eabi/10.2.1/thumb/v7e-m+fp/hard/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000008 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0800bd14 l       .fini_array	00000000 __fini_array_end
0800bd10 l       .fini_array	00000000 __fini_array_start
0800bd10 l       .init_array	00000000 __init_array_end
0800bd08 l       .init_array	00000000 __preinit_array_end
0800bd08 l       .init_array	00000000 __init_array_start
0800bd08 l       .init_array	00000000 __preinit_array_start
080019f0  w    F .text	00000002 RTC_Alarm_IRQHandler
080019f0  w    F .text	00000002 HASH_RNG_IRQHandler
080019f0  w    F .text	00000002 EXTI2_IRQHandler
08004f3c g     F .text	00000060 HAL_ADC_MspInit
080010c4 g     F .text	0000002c .hidden __aeabi_dcmpun
080019f0  w    F .text	00000002 TIM8_CC_IRQHandler
08005344 g     F .text	0000001c USBD_HID_ManufacturerStrDescriptor
0800abf0 g     F .text	00000024 _isatty_r
08001088 g     F .text	00000012 .hidden __aeabi_dcmple
08001590  w    F .text	00000004 _getpid
08000fc4 g     F .text	0000007a .hidden __cmpdf2
08002afe g     F .text	0000006c HAL_PCD_EP_ClrStall
08008e84 g     F .text	0000002c _lseek_r
08004fa8 g     F .text	00000002 DebugMon_Handler
0800b2c0 g     F .text	00000090 log
080051d6 g     F .text	00000020 HAL_PCD_ResetCallback
080030b8 g     F .text	0000006c HAL_TIM_Base_Start
20000c74 g     O .bss	000002d0 hUSBDDevice
08003124 g     F .text	00000028 HAL_TIM_Base_Stop
08000fc4 g     F .text	0000007a .hidden __eqdf2
08003e06 g     F .text	00000020 USB_ActivateSetup
08002998 g     F .text	0000005e HAL_PCD_EP_Close
0800051c g     F .text	0000005a .hidden __floatdidf
0800b290 g     F .text	0000002c _kill_r
08005afc g     F .text	00000028 printf
20000ae4 g     O .bss	00000001 __lock___atexit_recursive_mutex
0800521e g     F .text	00000008 HAL_PCD_DisconnectCallback
08004206 g     F .text	0000000e USBD_SetClassConfig
0800b1cc g     F .text	0000003c _wcrtomb_r
08001fa0 g     F .text	00000064 HAL_NVIC_SetPriority
080019f0  w    F .text	00000002 TIM1_CC_IRQHandler
080051be g     F .text	00000010 HAL_PCD_DataInStageCallback
08005bac g     F .text	00000020 __sseek
080053f8 g     F .text	0000010c __sinit
080019f0  w    F .text	00000002 DMA2_Stream5_IRQHandler
0800b11c g     F .text	000000b0 __swbuf_r
080053c4 g     F .text	0000001c USBD_HID_InterfaceStrDescriptor
08004f9e g     F .text	00000002 HardFault_Handler
080019f0  w    F .text	00000002 DMA1_Stream5_IRQHandler
08001890 g     F .text	00000048 _has_ext_exit_extended
08005af0 g     F .text	0000000c __malloc_unlock
00000400 g       *ABS*	00000000 _Min_Stack_Size
08004fac g     F .text	0000000e SysTick_Handler
08002238 g     F .text	0000000a HAL_GPIO_WritePin
080019f0  w    F .text	00000002 PVD_IRQHandler
080019f0  w    F .text	00000002 SDIO_IRQHandler
080051ce g     F .text	00000008 HAL_PCD_SOFCallback
0800ac4c g     F .text	000000f8 memmove
080031c8 g     F .text	00000144 HAL_TIM_IRQHandler
080019f0  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800bd14 g       *ABS*	00000000 _sidata
080030a8 g     F .text	0000000c HAL_RCC_GetHCLKFreq
08004faa g     F .text	00000002 PendSV_Handler
080034ac  w    F .text	00000002 HAL_TIMEx_CommutCallback
08004f9c g     F .text	00000002 NMI_Handler
08002004 g     F .text	0000001c HAL_NVIC_EnableIRQ
08008f90 g     F .text	0000004c _Balloc
0800bd08 g       .ARM	00000000 __exidx_end
080019f0  w    F .text	00000002 CAN2_RX1_IRQHandler
080019f0  w    F .text	00000002 EXTI3_IRQHandler
080043e6 g     F .text	00000014 USBD_LL_Suspend
08002f14  w    F .text	0000005c HAL_RCC_GetSysClockFreq
08003f44 g     F .text	0000001c BSP_LED_Off
08000fb4 g     F .text	0000008a .hidden __gtdf2
20000430 g     O .data	00000004 __atexit_recursive_mutex
080053e0 g     F .text	0000000c __errno
080044a8 g     F .text	00000288 USBD_StdDevReq
080019f0  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
08002244 g     F .text	00000018 HAL_GPIO_EXTI_IRQHandler
08003862 g     F .text	0000007c USB_ActivateEndpoint
08004de8 g     F .text	00000154 HAL_MspInit
080052d4 g     F .text	00000026 USBD_LL_IsStallEP
08005288 g     F .text	0000000e USBD_LL_Start
08004b80 g     F .text	00000002 HAL_SYSTICK_Callback
080019f0  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08004202 g     F .text	00000004 USBD_Start
0800a8d4 g     F .text	0000002c _fstat_r
200014d8 g     O .bss	00000004 errno
08003aa8 g     F .text	000001dc USB_EPStartXfer
0800b7b0 g       .text	00000000 _etext
20000ac8 g       .bss	00000000 _sbss
08001050 g     F .text	00000010 .hidden __aeabi_cdcmple
20000f94 g     O .bss	00000002 midi_pitch
08003ca0 g     F .text	00000056 USB_EPSetStall
08001ab4 g     F .text	0000000c HAL_GetREVID
080019f0  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
080019f0  w    F .text	00000002 I2C3_ER_IRQHandler
080036cc g     F .text	0000000e USB_SetDevSpeed
20000458 g     O .data	00000038 USBD_MIDI
08003640 g     F .text	0000000c USB_EnableGlobalInt
20000434 g     O .data	00000004 __heap_limit
080041d6 g     F .text	0000002c USBD_RegisterClass
08002078 g     F .text	000001b4 HAL_GPIO_Init
080043e0 g     F .text	00000006 USBD_LL_SetSpeed
08001c0c g     F .text	00000114 HAL_ADC_Start_IT
080036ac g     F .text	00000020 USB_FlushRxFifo
080051fe g     F .text	00000008 HAL_PCD_ResumeCallback
08000e80 g     F .text	00000134 memcpy
08001040 g     F .text	00000020 .hidden __aeabi_cdrcmple
0800477c g     F .text	00000120 USBD_StdEPReq
080053ec g     F .text	0000000c _cleanup_r
080004a4 g     F .text	00000022 .hidden __floatsidf
08000fbc g     F .text	00000082 .hidden __ltdf2
08004fba g     F .text	00000012 EXTI0_IRQHandler
080019f0  w    F .text	00000002 I2C2_EV_IRQHandler
08004454 g     F .text	00000022 USBD_LL_IsoOUTIncomplete
080009ec g     F .text	00000000 .hidden __aeabi_uldivmod
080019f0  w    F .text	00000002 DMA1_Stream2_IRQHandler
080019f0  w    F .text	00000002 CAN1_RX0_IRQHandler
08004924 g     F .text	00000016 USBD_CtlSendStatus
08001a8c  w    F .text	00000028 HAL_Delay
080019f0  w    F .text	00000002 FPU_IRQHandler
08004730 g     F .text	0000004c USBD_StdItfReq
20000510 g     O .data	00000004 SystemCoreClock
08002a4e g     F .text	00000040 HAL_PCD_EP_Transmit
0800489c g     F .text	00000016 USBD_ParseSetupRequest
080019f0  w    F .text	00000002 OTG_HS_WKUP_IRQHandler
08005564 g     F .text	00000010 malloc
20000440 g     O .data	00000001 uwTickFreq
0800165c  w    F .text	0000001c _fstat
0800a6fc g     F .text	00000040 __assert_func
0800bab8 g     O .rodata	000000c8 __mprec_tens
08004fa4 g     F .text	00000002 UsageFault_Handler
080019f0  w    F .text	00000002 CAN2_SCE_IRQHandler
200014d4 g     O .bss	00000004 __malloc_top_pad
080019f0  w    F .text	00000002 DMA2_Stream2_IRQHandler
080015dc g     F .text	00000080 _swistat
0800b2bc g     F .text	00000004 _getpid_r
20000ac8 g       .bss	00000000 __bss_start__
0800222c g     F .text	0000000c HAL_GPIO_ReadPin
08000484 g     F .text	0000001e .hidden __aeabi_ui2d
08008e7c g     F .text	00000008 _localeconv_r
08005338 g     F .text	0000000c USBD_HID_LangIDStrDescriptor
0800a900 g     F .text	000002f0 __sfvwrite_r
08009138 g     F .text	0000005c __i2b
08004410 g     F .text	00000022 USBD_LL_SOF
0800b7ca g     O .rodata	00000008 GPIO_PIN
20000000 g       .data	00000000 _sdata
080019f0  w    F .text	00000002 SPI1_IRQHandler
08000a1c g     F .text	000002d0 .hidden __udivmoddi4
08000200 g     F .text	00000000 .hidden __aeabi_drsub
08005b24 g     F .text	00000024 _sbrk_r
08001e54 g     F .text	00000124 HAL_ADC_ConfigChannel
080031c0  w    F .text	00000002 HAL_TIM_OC_DelayElapsedCallback
080050fc g     F .text	000000a4 HAL_PCD_MspInit
080019f0  w    F .text	00000002 TIM6_DAC_IRQHandler
080036dc g     F .text	00000170 USB_DevInit
08002a8e g     F .text	00000070 HAL_PCD_EP_SetStall
080096fc g     F .text	0000002c _read_r
080019f0  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
080041b0 g     F .text	00000026 USBD_Init
20000f9c g     O .bss	00000408 hpcd
080019f0  w    F .text	00000002 DCMI_IRQHandler
08001074 g     F .text	00000012 .hidden __aeabi_dcmplt
08004c04 g     F .text	000000a0 SystemClock_Config
20000b98 g     O .bss	00000004 uwTick
08008978 g     F .text	000000cc _fclose_r
080019f0  w    F .text	00000002 CAN2_RX0_IRQHandler
200014cc g     O .bss	00000004 __malloc_max_sbrked_mem
08002048 g     F .text	00000028 HAL_SYSTICK_Config
080004c8 g     F .text	00000042 .hidden __extendsfdf2
08003560 g     F .text	000000e0 USB_SetTurnaroundTime
080007cc g     F .text	000001d0 .hidden __aeabi_ddiv
0800020c g     F .text	00000276 .hidden __adddf3
08001ac0 g     F .text	0000014c HAL_ADC_Init
0800413e g     F .text	00000032 USBD_MIDI_SendPitch
0800bd00 g       .ARM	00000000 __exidx_start
08000578 g     F .text	00000254 .hidden __aeabi_dmul
080019f0  w    F .text	00000002 DMA2_Stream3_IRQHandler
080018d8 g     F .text	00000068 _isatty
20000ac4 g     O .data	00000001 __fdlib_version
20000af0 g     O .bss	00000001 __lock___sinit_recursive_mutex
0800b7b0 g     O .rodata	00000004 _global_impure_ptr
0800ad44 g     F .text	000003d8 _realloc_r
080010f0 g     F .text	00000048 __libc_init_array
08004914 g     F .text	00000010 USBD_CtlContinueRx
08002928 g     F .text	00000070 HAL_PCD_EP_Open
080023a4 g     F .text	0000055c HAL_PCD_IRQHandler
0800a86c g     F .text	00000066 _fputwc_r
0800ba90 g     O .rodata	00000028 __mprec_bigtens
0800b224 g     F .text	0000000e abort
08000484 g     F .text	0000001e .hidden __floatunsidf
08001594  w    F .text	00000048 _sbrk
0800949c g     F .text	00000042 __mcmp
20000c70 g     O .bss	00000002 button
080053a8 g     F .text	0000001c USBD_HID_ConfigStrDescriptor
080019f0  w    F .text	00000002 USART6_IRQHandler
0800b798 g     F .text	00000000 _init
08001780 g     F .text	00000110 _get_semihosting_exts
08005216 g     F .text	00000008 HAL_PCD_ConnectCallback
08001954 g     F .text	00000030 _kill_shared
080052b8 g     F .text	0000000e USBD_LL_StallEP
080019f0  w    F .text	00000002 USART3_IRQHandler
080011fc g     F .text	0000002c __libc_fini_array
20000c30 g     O .bss	00000040 active
200014dc g       .bss	00000000 _ebss
08003c84 g     F .text	0000001c USB_ReadPacket
080019a0  w    F .text	00000038 Reset_Handler
08003d68 g     F .text	0000001c USB_DevConnect
08005206 g     F .text	00000008 HAL_PCD_ISOOUTIncompleteCallback
0800330c g     F .text	000000cc TIM_Base_SetConfig
08009098 g     F .text	00000040 __hi0bits
080019f0  w    F .text	00000002 CAN1_RX1_IRQHandler
0800099c g     F .text	0000004e .hidden __fixdfsi
08003da0 g     F .text	00000008 USB_ReadInterrupts
0800520e g     F .text	00000008 HAL_PCD_ISOINIncompleteCallback
080019f0  w    F .text	00000002 UART5_IRQHandler
0800314c g     F .text	00000074 HAL_TIM_Base_Start_IT
20000ae8 g     O .bss	00000001 __lock___malloc_recursive_mutex
08003cf6 g     F .text	00000052 USB_EPClearStall
08001d2a g     F .text	00000128 HAL_ADC_IRQHandler
080019f0  w    F .text	00000002 DMA2_Stream0_IRQHandler
20000444 g     O .data	00000004 uwTickPrio
08001a3c g     F .text	0000002c HAL_Init
20000f90 g     O .bss	00000004 midi_note
080019f0  w    F .text	00000002 TIM4_IRQHandler
0800020c g     F .text	00000276 .hidden __aeabi_dadd
08000fbc g     F .text	00000082 .hidden __ledf2
08001678  w    F .text	0000003a _stat
080092ec g     F .text	000000c0 __pow5mult
0800050c g     F .text	0000006a .hidden __aeabi_ul2d
08004b84 g     F .text	0000002c HAL_GPIO_EXTI_Callback
0800493a g     F .text	00000016 USBD_CtlReceiveStatus
200014e0 g       ._user_heap_stack	00000000 end
080019f0  w    F .text	00000002 I2C1_EV_IRQHandler
080019f0  w    F .text	00000002 DMA1_Stream6_IRQHandler
08001234 g     F .text	00000002 __retarget_lock_release_recursive
08005296 g     F .text	00000014 USBD_LL_OpenEP
08003dfe g     F .text	00000008 USB_GetMode
080042e4 g     F .text	000000a4 USBD_LL_DataInStage
08005228 g     F .text	00000060 USBD_LL_Init
08003f28 g     F .text	0000001c BSP_LED_On
080010b0 g     F .text	00000012 .hidden __aeabi_dcmpgt
080019f0  w    F .text	00000002 DMA1_Stream1_IRQHandler
08003dc8 g     F .text	00000012 USB_ReadDevOutEPInterrupt
20000be8 g     O .bss	00000048 TimHandle_5
08004214 g     F .text	00000010 USBD_ClrClassConfig
080019f0  w    F .text	00000002 UART4_IRQHandler
08005504 g     F .text	0000000c __sfp_lock_acquire
08000de0 g     F .text	00000000 memchr
200014dc g       .bss	00000000 __bss_end__
08008c70 g     F .text	0000020c _free_r
20000448 g     O .data	00000010 GPIO_PORT
080019f0  w    F .text	00000002 TIM3_IRQHandler
080019f0  w    F .text	00000002 RCC_IRQHandler
0800ac14 g     F .text	0000000c __locale_mb_cur_max
0800109c g     F .text	00000012 .hidden __aeabi_dcmpge
080019f0  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
08002b6a g     F .text	00000040 HAL_PCDEx_SetTxFiFo
00000200 g       *ABS*	00000000 _Min_Heap_Size
08000208 g     F .text	0000027a .hidden __aeabi_dsub
080051ac g     F .text	00000012 HAL_PCD_DataOutStageCallback
080019f0 g       .text	00000002 Default_Handler
20000950 g     O .data	00000004 __malloc_sbrk_base
0800b872 g     O .rodata	00000010 AHBPrescTable
08002a3e g     F .text	00000010 HAL_PCD_EP_GetRxCount
0800050c g     F .text	0000006a .hidden __floatundidf
08004432 g     F .text	00000022 USBD_LL_IsoINIncomplete
08001438 g     F .text	00000004 _lseek
200004f8 g     O .data	0000000a USBD_MIDI_DeviceQualifierDesc
080093ac g     F .text	000000f0 __lshift
08002bb2  w    F .text	00000002 HAL_PCDEx_LPM_Callback
080052c6 g     F .text	0000000e USBD_LL_ClearStallEP
08004ff4 g     F .text	00000042 EXTI15_10_IRQHandler
08001238 g     F .text	0000008c __register_exitproc
08002900 g     F .text	00000028 HAL_PCD_SetAddress
08005080 g     F .text	0000000c ADC_IRQHandler
08009194 g     F .text	00000158 __multiply
08002f70 g     F .text	00000138 HAL_RCC_ClockConfig
08001f7c g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
08009794 g     F .text	00000064 strncpy
200014a4 g     O .bss	00000028 __malloc_current_mallinfo
0800962c g     F .text	000000d0 __d2b
080019f0  w    F .text	00000002 DMA1_Stream7_IRQHandler
08002020 g     F .text	00000028 HAL_NVIC_DisableIRQ
080019f0  w    F .text	00000002 TIM7_IRQHandler
080051f6 g     F .text	00000008 HAL_PCD_SuspendCallback
080078ec g     F .text	00000024 _close_r
080019f0  w    F .text	00000002 CAN2_TX_IRQHandler
080004a4 g     F .text	00000022 .hidden __aeabi_i2d
0800508c g     F .text	00000024 TIM5_IRQHandler
080019f0  w    F .text	00000002 DMA2_Stream7_IRQHandler
080033d8 g     F .text	00000058 HAL_TIM_Base_Init
2000050c g     O .data	00000001 velocity
08004960 g     F .text	00000200 HAL_TIM_PeriodElapsedCallback
0800122c g     F .text	00000002 __retarget_lock_close_recursive
080019f0  w    F .text	00000002 I2C3_EV_IRQHandler
08007818 g     F .text	000000d4 __swsetup_r
08000cec  w    F .text	00000002 .hidden __aeabi_ldiv0
08004fcc g     F .text	00000028 EXTI9_5_IRQHandler
08004476 g     F .text	00000004 USBD_LL_DevConnected
080007cc g     F .text	000001d0 .hidden __divdf3
20000502 g     O .data	00000001 channel
080019f0  w    F .text	00000002 RTC_WKUP_IRQHandler
20000548 g     O .data	00000408 __malloc_av_
0800384c g     F .text	00000016 USB_GetDevSpeed
08000578 g     F .text	00000254 .hidden __muldf3
08005b48 g     F .text	00000022 __sread
080019f0  w    F .text	00000002 ETH_WKUP_IRQHandler
08001a80  w    F .text	0000000c HAL_GetTick
08005ae4 g     F .text	0000000c __malloc_lock
08002baa g     F .text	00000008 HAL_PCDEx_SetRxFiFo
08001d28  w    F .text	00000002 HAL_ADC_ErrorCallback
08008b74 g     F .text	0000005a _fflush_r
0800a73c g     F .text	0000005e _calloc_r
080019f0  w    F .text	00000002 SPI2_IRQHandler
20000f8c g     O .bss	00000004 index
20000534 g     O .data	00000012 hUSBDDeviceDesc
08001230 g     F .text	00000002 __retarget_lock_acquire_recursive
080019f0  w    F .text	00000002 OTG_HS_EP1_IN_IRQHandler
08001138 g     F .text	000000a4 memset
08004fa0 g     F .text	00000002 MemManage_Handler
08004ca4 g     F .text	00000144 main
200014d0 g     O .bss	00000004 __malloc_max_total_mem
080019f0  w    F .text	00000002 DMA1_Stream0_IRQHandler
08001228 g     F .text	00000002 __retarget_lock_init_recursive
0800c7dc g       *ABS*	00000000 _siccmram
080019f0  w    F .text	00000002 CAN1_TX_IRQHandler
08004fa6 g     F .text	00000002 SVC_Handler
08005bcc g     F .text	00000008 __sclose
08007a38 g     F .text	00000f40 _dtoa_r
08005584 g     F .text	00000560 _malloc_r
0800b208 g     F .text	0000001a __ascii_wctomb
0800051c g     F .text	0000005a .hidden __aeabi_l2d
080031c2  w    F .text	00000002 HAL_TIM_IC_CaptureCallback
08004388 g     F .text	00000058 USBD_LL_Reset
08005324 g     F .text	00000008 USBD_LL_GetRxDataSize
20000530 g     O .data	00000004 USBD_LangIDDesc
080019f0  w    F .text	00000002 EXTI4_IRQHandler
08004284 g     F .text	00000060 USBD_LL_DataOutStage
08008bd0 g     F .text	000000a0 _malloc_trim_r
080034e0 g     F .text	00000080 USB_CoreInit
080050b0 g     F .text	0000004c SystemInit
0800364c g     F .text	0000000c USB_DisableGlobalInt
08000fc4 g     F .text	0000007a .hidden __nedf2
0800b7a4 g     F .text	00000000 _fini
08002366 g     F .text	0000003e HAL_PCD_Start
08003658 g     F .text	0000002e USB_SetCurrentMode
080031c4  w    F .text	00000002 HAL_TIM_PWM_PulseFinishedCallback
08001d26  w    F .text	00000002 HAL_ADC_LevelOutOfWindowCallback
0800398c g     F .text	000000f4 USB_EP0StartXfer
08001354 g     F .text	000000e4 _swilseek
20000ba0 g     O .bss	00000048 AdcHandle
080011f0 g     F .text	0000000c atexit
080077ec g     F .text	0000002c _write_r
10000000 g       .ccmram	00000000 _eccmram
08004b60 g     F .text	00000020 MIDI_DataRx
080019f4  w    F .text	00000048 HAL_InitTick
080019f0  w    F .text	00000002 FSMC_IRQHandler
080052fa g     F .text	0000000e USBD_LL_SetUSBAddress
080019f0  w    F .text	00000002 ETH_IRQHandler
20000000 g     O .data	00000004 _impure_ptr
08008a44 g     F .text	00000130 __sflush_r
08001a68  w    F .text	00000018 HAL_IncTick
080019f0  w    F .text	00000002 OTG_HS_EP1_OUT_IRQHandler
080052aa g     F .text	0000000e USBD_LL_CloseEP
0800532c g     F .text	0000000c USBD_HID_DeviceDescriptor
0800b350 g     F .text	00000438 __ieee754_log
08004904 g     F .text	00000010 USBD_CtlContinueSendData
080043fa g     F .text	00000016 USBD_LL_Resume
080019f0  w    F .text	00000002 WWDG_IRQHandler
0800ac20 g     F .text	0000002a __ascii_mbtowc
20000514 g     O .data	0000001c HID_Desc
080016b4 g     F .text	000000cc _swiopen
080031c6  w    F .text	00000002 HAL_TIM_TriggerCallback
08005308 g     F .text	0000000e USBD_LL_Transmit
080019f0  w    F .text	00000002 TIM2_IRQHandler
0800225c g     F .text	0000010a HAL_PCD_Init
08003430 g     F .text	0000007c HAL_TIMEx_MasterConfigSynchronization
0800b788 g     F .text	00000010 nan
08005044 g     F .text	0000003c OTG_FS_WKUP_IRQHandler
080019f0  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
080019f0  w    F .text	00000002 OTG_HS_IRQHandler
080048b2 g     F .text	00000038 USBD_GetString
080051a0 g     F .text	0000000c HAL_PCD_SetupStageCallback
20020000 g       *ABS*	00000000 _estack
08005360 g     F .text	00000024 USBD_HID_ProductStrDescriptor
080019f0  w    F .text	00000002 EXTI1_IRQHandler
20000508 g     O .data	00000004 uwTimerPeriod
08001060 g     F .text	00000012 .hidden __aeabi_dcmpeq
0800143c  w    F .text	000000bc _write
20000ac8 g       .data	00000000 _edata
10000000 g       .ccmram	00000000 _sccmram
0800a7c4 g     F .text	000000a6 __fputwc
08003dda g     F .text	00000024 USB_ReadDevInEPInterrupt
080030b4  w    F .text	00000002 HAL_TIM_Base_MspInit
20000f44 g     O .bss	00000048 htim
08003db8 g     F .text	00000010 USB_ReadDevAllInEpInterrupt
080019f0  w    F .text	00000002 USART2_IRQHandler
08005b6c g     F .text	0000003e __swrite
08002bb4  w    F .text	00000360 HAL_RCC_OscConfig
20000954 g     O .data	00000004 __malloc_trim_threshold
0800a79c g     F .text	00000028 fiprintf
08009888 g     F .text	00000df4 _vfiprintf_r
08000000 g     O .isr_vector	00000000 g_pfnVectors
080048ea g     F .text	0000001a USBD_CtlSendData
0800551c g     F .text	00000048 _fwalk_reent
080094e0 g     F .text	0000014c __mdiff
0800099c g     F .text	0000004e .hidden __aeabi_d2iz
08001984 g     F .text	0000001c _kill
080019f0  w    F .text	00000002 I2C2_ER_IRQHandler
08005510 g     F .text	0000000c __sfp_lock_release
08005384 g     F .text	00000024 USBD_HID_SerialStrDescriptor
08003e74 g     F .text	000000b4 BSP_LED_Init
080019f0  w    F .text	00000002 DMA2_Stream1_IRQHandler
080038e0 g     F .text	000000ac USB_DeactivateEndpoint
20000506 g     O .data	00000002 uhADCxConvertedValue
08003a80 g     F .text	00000026 USB_WritePacket
0800bbfc g     O .rodata	00000101 _ctype_
08004170 g     F .text	00000040 USBD_MIDI_SendNote
080012c4  w    F .text	00000090 _read
08000cec  w    F .text	00000002 .hidden __aeabi_idiv0
080010c4 g     F .text	0000002c .hidden __unorddf2
080019f0  w    F .text	00000002 CAN1_SCE_IRQHandler
0800410c g     F .text	00000032 USBD_MIDI_SendMsg
080019f0  w    F .text	00000002 FLASH_IRQHandler
08001940 g     F .text	00000014 _exit
08003da8 g     F .text	00000010 USB_ReadDevAllOutEpInterrupt
200013a4 g     O .bss	00000100 USBD_StrDesc
080019f0  w    F .text	00000002 DMA2_Stream4_IRQHandler
08004fa2 g     F .text	00000002 BusFault_Handler
080019f0  w    F .text	00000002 USART1_IRQHandler
08008eb0 g     F .text	000000e0 __smakebuf_r
0800447a g     F .text	00000018 USBD_LL_DevDisconnected
08002070 g     F .text	00000008 HAL_SYSTICK_IRQHandler
08000d00 g     F .text	000000dc strlen
08005038 g     F .text	0000000c OTG_FS_IRQHandler
080019f0  w    F .text	00000002 SPI3_IRQHandler
08001050 g     F .text	00000010 .hidden __aeabi_cdcmpeq
08000fb4 g     F .text	0000008a .hidden __gedf2
08003d84 g     F .text	0000001c USB_DevDisconnect
080019f0  w    F .text	00000002 DMA1_Stream4_IRQHandler
080019f0  w    F .text	00000002 I2C1_ER_IRQHandler
20000f98 g     O .bss	00000004 timestart
08009870 g     F .text	00000018 __sprint_r
080004c8 g     F .text	00000042 .hidden __aeabi_f2d
08005316 g     F .text	0000000e USBD_LL_PrepareReceive
080034ae  w    F .text	00000002 HAL_TIMEx_BreakCallback
08000208 g     F .text	0000027a .hidden __subdf3
08005bd8 g     F .text	00001b94 _vfprintf_r
08003688 g     F .text	00000024 USB_FlushTxFifo
08003d48 g     F .text	00000020 USB_SetDevAddress
080090d8 g     F .text	0000005e __lo0bits
080029f6 g     F .text	00000048 HAL_PCD_EP_Receive
08001f78  w    F .text	00000002 HAL_ADCEx_InjectedConvCpltCallback
080019f0  w    F .text	00000002 DMA2_Stream6_IRQHandler
08009728 g     F .text	0000006c frexp
20000958 g     O .data	0000016c __global_locale
08003e28 g     F .text	0000004c USB_EP0_OutStart
080019f0  w    F .text	00000002 DMA1_Stream3_IRQHandler
20000aec g     O .bss	00000001 __lock___sfp_recursive_mutex
0800b234 g     F .text	0000005c raise
080014f8 g     F .text	00000098 _close
08005574 g     F .text	00000010 free
08004bb0 g     F .text	00000054 HAL_ADC_ConvCpltCallback
08008ff0 g     F .text	000000a8 __multadd
08004224 g     F .text	00000060 USBD_LL_SetupStage
08008fdc g     F .text	00000012 _Bfree
08001d20 g     F .text	00000006 HAL_ADC_GetValue



Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000ac8 	.word	0x20000ac8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b798 	.word	0x0800b798

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000acc 	.word	0x20000acc
 80001fc:	0800b798 	.word	0x0800b798

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_uldivmod>:
 80009ec:	b953      	cbnz	r3, 8000a04 <__aeabi_uldivmod+0x18>
 80009ee:	b94a      	cbnz	r2, 8000a04 <__aeabi_uldivmod+0x18>
 80009f0:	2900      	cmp	r1, #0
 80009f2:	bf08      	it	eq
 80009f4:	2800      	cmpeq	r0, #0
 80009f6:	bf1c      	itt	ne
 80009f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80009fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a00:	f000 b974 	b.w	8000cec <__aeabi_idiv0>
 8000a04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a0c:	f000 f806 	bl	8000a1c <__udivmoddi4>
 8000a10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a18:	b004      	add	sp, #16
 8000a1a:	4770      	bx	lr

08000a1c <__udivmoddi4>:
 8000a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a20:	9d08      	ldr	r5, [sp, #32]
 8000a22:	4604      	mov	r4, r0
 8000a24:	468e      	mov	lr, r1
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d14d      	bne.n	8000ac6 <__udivmoddi4+0xaa>
 8000a2a:	428a      	cmp	r2, r1
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	d969      	bls.n	8000b04 <__udivmoddi4+0xe8>
 8000a30:	fab2 f282 	clz	r2, r2
 8000a34:	b152      	cbz	r2, 8000a4c <__udivmoddi4+0x30>
 8000a36:	fa01 f302 	lsl.w	r3, r1, r2
 8000a3a:	f1c2 0120 	rsb	r1, r2, #32
 8000a3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a46:	ea41 0e03 	orr.w	lr, r1, r3
 8000a4a:	4094      	lsls	r4, r2
 8000a4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a50:	0c21      	lsrs	r1, r4, #16
 8000a52:	fbbe f6f8 	udiv	r6, lr, r8
 8000a56:	fa1f f78c 	uxth.w	r7, ip
 8000a5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a62:	fb06 f107 	mul.w	r1, r6, r7
 8000a66:	4299      	cmp	r1, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x64>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000a72:	f080 811f 	bcs.w	8000cb4 <__udivmoddi4+0x298>
 8000a76:	4299      	cmp	r1, r3
 8000a78:	f240 811c 	bls.w	8000cb4 <__udivmoddi4+0x298>
 8000a7c:	3e02      	subs	r6, #2
 8000a7e:	4463      	add	r3, ip
 8000a80:	1a5b      	subs	r3, r3, r1
 8000a82:	b2a4      	uxth	r4, r4
 8000a84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a88:	fb08 3310 	mls	r3, r8, r0, r3
 8000a8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a90:	fb00 f707 	mul.w	r7, r0, r7
 8000a94:	42a7      	cmp	r7, r4
 8000a96:	d90a      	bls.n	8000aae <__udivmoddi4+0x92>
 8000a98:	eb1c 0404 	adds.w	r4, ip, r4
 8000a9c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000aa0:	f080 810a 	bcs.w	8000cb8 <__udivmoddi4+0x29c>
 8000aa4:	42a7      	cmp	r7, r4
 8000aa6:	f240 8107 	bls.w	8000cb8 <__udivmoddi4+0x29c>
 8000aaa:	4464      	add	r4, ip
 8000aac:	3802      	subs	r0, #2
 8000aae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab2:	1be4      	subs	r4, r4, r7
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	b11d      	cbz	r5, 8000ac0 <__udivmoddi4+0xa4>
 8000ab8:	40d4      	lsrs	r4, r2
 8000aba:	2300      	movs	r3, #0
 8000abc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	428b      	cmp	r3, r1
 8000ac8:	d909      	bls.n	8000ade <__udivmoddi4+0xc2>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	f000 80ef 	beq.w	8000cae <__udivmoddi4+0x292>
 8000ad0:	2600      	movs	r6, #0
 8000ad2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ad6:	4630      	mov	r0, r6
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	fab3 f683 	clz	r6, r3
 8000ae2:	2e00      	cmp	r6, #0
 8000ae4:	d14a      	bne.n	8000b7c <__udivmoddi4+0x160>
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d302      	bcc.n	8000af0 <__udivmoddi4+0xd4>
 8000aea:	4282      	cmp	r2, r0
 8000aec:	f200 80f9 	bhi.w	8000ce2 <__udivmoddi4+0x2c6>
 8000af0:	1a84      	subs	r4, r0, r2
 8000af2:	eb61 0303 	sbc.w	r3, r1, r3
 8000af6:	2001      	movs	r0, #1
 8000af8:	469e      	mov	lr, r3
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d0e0      	beq.n	8000ac0 <__udivmoddi4+0xa4>
 8000afe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b02:	e7dd      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000b04:	b902      	cbnz	r2, 8000b08 <__udivmoddi4+0xec>
 8000b06:	deff      	udf	#255	; 0xff
 8000b08:	fab2 f282 	clz	r2, r2
 8000b0c:	2a00      	cmp	r2, #0
 8000b0e:	f040 8092 	bne.w	8000c36 <__udivmoddi4+0x21a>
 8000b12:	eba1 010c 	sub.w	r1, r1, ip
 8000b16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	2601      	movs	r6, #1
 8000b20:	0c20      	lsrs	r0, r4, #16
 8000b22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b26:	fb07 1113 	mls	r1, r7, r3, r1
 8000b2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b2e:	fb0e f003 	mul.w	r0, lr, r3
 8000b32:	4288      	cmp	r0, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x12c>
 8000b36:	eb1c 0101 	adds.w	r1, ip, r1
 8000b3a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000b3e:	d202      	bcs.n	8000b46 <__udivmoddi4+0x12a>
 8000b40:	4288      	cmp	r0, r1
 8000b42:	f200 80cb 	bhi.w	8000cdc <__udivmoddi4+0x2c0>
 8000b46:	4643      	mov	r3, r8
 8000b48:	1a09      	subs	r1, r1, r0
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b50:	fb07 1110 	mls	r1, r7, r0, r1
 8000b54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b58:	fb0e fe00 	mul.w	lr, lr, r0
 8000b5c:	45a6      	cmp	lr, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x156>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b68:	d202      	bcs.n	8000b70 <__udivmoddi4+0x154>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f200 80bb 	bhi.w	8000ce6 <__udivmoddi4+0x2ca>
 8000b70:	4608      	mov	r0, r1
 8000b72:	eba4 040e 	sub.w	r4, r4, lr
 8000b76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b7a:	e79c      	b.n	8000ab6 <__udivmoddi4+0x9a>
 8000b7c:	f1c6 0720 	rsb	r7, r6, #32
 8000b80:	40b3      	lsls	r3, r6
 8000b82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000b8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000b92:	431c      	orrs	r4, r3
 8000b94:	40f9      	lsrs	r1, r7
 8000b96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000b9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ba2:	0c20      	lsrs	r0, r4, #16
 8000ba4:	fa1f fe8c 	uxth.w	lr, ip
 8000ba8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb4:	4288      	cmp	r0, r1
 8000bb6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bba:	d90b      	bls.n	8000bd4 <__udivmoddi4+0x1b8>
 8000bbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000bc4:	f080 8088 	bcs.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bc8:	4288      	cmp	r0, r1
 8000bca:	f240 8085 	bls.w	8000cd8 <__udivmoddi4+0x2bc>
 8000bce:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd2:	4461      	add	r1, ip
 8000bd4:	1a09      	subs	r1, r1, r0
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bdc:	fb09 1110 	mls	r1, r9, r0, r1
 8000be0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	458e      	cmp	lr, r1
 8000bea:	d908      	bls.n	8000bfe <__udivmoddi4+0x1e2>
 8000bec:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000bf4:	d26c      	bcs.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bf6:	458e      	cmp	lr, r1
 8000bf8:	d96a      	bls.n	8000cd0 <__udivmoddi4+0x2b4>
 8000bfa:	3802      	subs	r0, #2
 8000bfc:	4461      	add	r1, ip
 8000bfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c02:	fba0 9402 	umull	r9, r4, r0, r2
 8000c06:	eba1 010e 	sub.w	r1, r1, lr
 8000c0a:	42a1      	cmp	r1, r4
 8000c0c:	46c8      	mov	r8, r9
 8000c0e:	46a6      	mov	lr, r4
 8000c10:	d356      	bcc.n	8000cc0 <__udivmoddi4+0x2a4>
 8000c12:	d053      	beq.n	8000cbc <__udivmoddi4+0x2a0>
 8000c14:	b15d      	cbz	r5, 8000c2e <__udivmoddi4+0x212>
 8000c16:	ebb3 0208 	subs.w	r2, r3, r8
 8000c1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c22:	fa22 f306 	lsr.w	r3, r2, r6
 8000c26:	40f1      	lsrs	r1, r6
 8000c28:	431f      	orrs	r7, r3
 8000c2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c2e:	2600      	movs	r6, #0
 8000c30:	4631      	mov	r1, r6
 8000c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c36:	f1c2 0320 	rsb	r3, r2, #32
 8000c3a:	40d8      	lsrs	r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	fa21 f303 	lsr.w	r3, r1, r3
 8000c44:	4091      	lsls	r1, r2
 8000c46:	4301      	orrs	r1, r0
 8000c48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c54:	fb07 3610 	mls	r6, r7, r0, r3
 8000c58:	0c0b      	lsrs	r3, r1, #16
 8000c5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c62:	429e      	cmp	r6, r3
 8000c64:	fa04 f402 	lsl.w	r4, r4, r2
 8000c68:	d908      	bls.n	8000c7c <__udivmoddi4+0x260>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000c72:	d22f      	bcs.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c74:	429e      	cmp	r6, r3
 8000c76:	d92d      	bls.n	8000cd4 <__udivmoddi4+0x2b8>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	b289      	uxth	r1, r1
 8000c80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c84:	fb07 3316 	mls	r3, r7, r6, r3
 8000c88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000c90:	428b      	cmp	r3, r1
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x28a>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000c9c:	d216      	bcs.n	8000ccc <__udivmoddi4+0x2b0>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d914      	bls.n	8000ccc <__udivmoddi4+0x2b0>
 8000ca2:	3e02      	subs	r6, #2
 8000ca4:	4461      	add	r1, ip
 8000ca6:	1ac9      	subs	r1, r1, r3
 8000ca8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cac:	e738      	b.n	8000b20 <__udivmoddi4+0x104>
 8000cae:	462e      	mov	r6, r5
 8000cb0:	4628      	mov	r0, r5
 8000cb2:	e705      	b.n	8000ac0 <__udivmoddi4+0xa4>
 8000cb4:	4606      	mov	r6, r0
 8000cb6:	e6e3      	b.n	8000a80 <__udivmoddi4+0x64>
 8000cb8:	4618      	mov	r0, r3
 8000cba:	e6f8      	b.n	8000aae <__udivmoddi4+0x92>
 8000cbc:	454b      	cmp	r3, r9
 8000cbe:	d2a9      	bcs.n	8000c14 <__udivmoddi4+0x1f8>
 8000cc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc8:	3801      	subs	r0, #1
 8000cca:	e7a3      	b.n	8000c14 <__udivmoddi4+0x1f8>
 8000ccc:	4646      	mov	r6, r8
 8000cce:	e7ea      	b.n	8000ca6 <__udivmoddi4+0x28a>
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	e794      	b.n	8000bfe <__udivmoddi4+0x1e2>
 8000cd4:	4640      	mov	r0, r8
 8000cd6:	e7d1      	b.n	8000c7c <__udivmoddi4+0x260>
 8000cd8:	46d0      	mov	r8, sl
 8000cda:	e77b      	b.n	8000bd4 <__udivmoddi4+0x1b8>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	4461      	add	r1, ip
 8000ce0:	e732      	b.n	8000b48 <__udivmoddi4+0x12c>
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	e709      	b.n	8000afa <__udivmoddi4+0xde>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	e742      	b.n	8000b72 <__udivmoddi4+0x156>

08000cec <__aeabi_idiv0>:
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
	...

08000d00 <strlen>:
 8000d00:	f890 f000 	pld	[r0]
 8000d04:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000d08:	f020 0107 	bic.w	r1, r0, #7
 8000d0c:	f06f 0c00 	mvn.w	ip, #0
 8000d10:	f010 0407 	ands.w	r4, r0, #7
 8000d14:	f891 f020 	pld	[r1, #32]
 8000d18:	f040 8049 	bne.w	8000dae <strlen+0xae>
 8000d1c:	f04f 0400 	mov.w	r4, #0
 8000d20:	f06f 0007 	mvn.w	r0, #7
 8000d24:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000d28:	f891 f040 	pld	[r1, #64]	; 0x40
 8000d2c:	f100 0008 	add.w	r0, r0, #8
 8000d30:	fa82 f24c 	uadd8	r2, r2, ip
 8000d34:	faa4 f28c 	sel	r2, r4, ip
 8000d38:	fa83 f34c 	uadd8	r3, r3, ip
 8000d3c:	faa2 f38c 	sel	r3, r2, ip
 8000d40:	bb4b      	cbnz	r3, 8000d96 <strlen+0x96>
 8000d42:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000d46:	fa82 f24c 	uadd8	r2, r2, ip
 8000d4a:	f100 0008 	add.w	r0, r0, #8
 8000d4e:	faa4 f28c 	sel	r2, r4, ip
 8000d52:	fa83 f34c 	uadd8	r3, r3, ip
 8000d56:	faa2 f38c 	sel	r3, r2, ip
 8000d5a:	b9e3      	cbnz	r3, 8000d96 <strlen+0x96>
 8000d5c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8000d60:	fa82 f24c 	uadd8	r2, r2, ip
 8000d64:	f100 0008 	add.w	r0, r0, #8
 8000d68:	faa4 f28c 	sel	r2, r4, ip
 8000d6c:	fa83 f34c 	uadd8	r3, r3, ip
 8000d70:	faa2 f38c 	sel	r3, r2, ip
 8000d74:	b97b      	cbnz	r3, 8000d96 <strlen+0x96>
 8000d76:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8000d7a:	f101 0120 	add.w	r1, r1, #32
 8000d7e:	fa82 f24c 	uadd8	r2, r2, ip
 8000d82:	f100 0008 	add.w	r0, r0, #8
 8000d86:	faa4 f28c 	sel	r2, r4, ip
 8000d8a:	fa83 f34c 	uadd8	r3, r3, ip
 8000d8e:	faa2 f38c 	sel	r3, r2, ip
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0c6      	beq.n	8000d24 <strlen+0x24>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	bf04      	itt	eq
 8000d9a:	3004      	addeq	r0, #4
 8000d9c:	461a      	moveq	r2, r3
 8000d9e:	ba12      	rev	r2, r2
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8000da8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8000dac:	4770      	bx	lr
 8000dae:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000db2:	f004 0503 	and.w	r5, r4, #3
 8000db6:	f1c4 0000 	rsb	r0, r4, #0
 8000dba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8000dbe:	f014 0f04 	tst.w	r4, #4
 8000dc2:	f891 f040 	pld	[r1, #64]	; 0x40
 8000dc6:	fa0c f505 	lsl.w	r5, ip, r5
 8000dca:	ea62 0205 	orn	r2, r2, r5
 8000dce:	bf1c      	itt	ne
 8000dd0:	ea63 0305 	ornne	r3, r3, r5
 8000dd4:	4662      	movne	r2, ip
 8000dd6:	f04f 0400 	mov.w	r4, #0
 8000dda:	e7a9      	b.n	8000d30 <strlen+0x30>
 8000ddc:	0000      	movs	r0, r0
	...

08000de0 <memchr>:
 8000de0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000de4:	2a10      	cmp	r2, #16
 8000de6:	db2b      	blt.n	8000e40 <memchr+0x60>
 8000de8:	f010 0f07 	tst.w	r0, #7
 8000dec:	d008      	beq.n	8000e00 <memchr+0x20>
 8000dee:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000df2:	3a01      	subs	r2, #1
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d02d      	beq.n	8000e54 <memchr+0x74>
 8000df8:	f010 0f07 	tst.w	r0, #7
 8000dfc:	b342      	cbz	r2, 8000e50 <memchr+0x70>
 8000dfe:	d1f6      	bne.n	8000dee <memchr+0xe>
 8000e00:	b4f0      	push	{r4, r5, r6, r7}
 8000e02:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000e06:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000e0a:	f022 0407 	bic.w	r4, r2, #7
 8000e0e:	f07f 0700 	mvns.w	r7, #0
 8000e12:	2300      	movs	r3, #0
 8000e14:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000e18:	3c08      	subs	r4, #8
 8000e1a:	ea85 0501 	eor.w	r5, r5, r1
 8000e1e:	ea86 0601 	eor.w	r6, r6, r1
 8000e22:	fa85 f547 	uadd8	r5, r5, r7
 8000e26:	faa3 f587 	sel	r5, r3, r7
 8000e2a:	fa86 f647 	uadd8	r6, r6, r7
 8000e2e:	faa5 f687 	sel	r6, r5, r7
 8000e32:	b98e      	cbnz	r6, 8000e58 <memchr+0x78>
 8000e34:	d1ee      	bne.n	8000e14 <memchr+0x34>
 8000e36:	bcf0      	pop	{r4, r5, r6, r7}
 8000e38:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e3c:	f002 0207 	and.w	r2, r2, #7
 8000e40:	b132      	cbz	r2, 8000e50 <memchr+0x70>
 8000e42:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000e46:	3a01      	subs	r2, #1
 8000e48:	ea83 0301 	eor.w	r3, r3, r1
 8000e4c:	b113      	cbz	r3, 8000e54 <memchr+0x74>
 8000e4e:	d1f8      	bne.n	8000e42 <memchr+0x62>
 8000e50:	2000      	movs	r0, #0
 8000e52:	4770      	bx	lr
 8000e54:	3801      	subs	r0, #1
 8000e56:	4770      	bx	lr
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	bf06      	itte	eq
 8000e5c:	4635      	moveq	r5, r6
 8000e5e:	3803      	subeq	r0, #3
 8000e60:	3807      	subne	r0, #7
 8000e62:	f015 0f01 	tst.w	r5, #1
 8000e66:	d107      	bne.n	8000e78 <memchr+0x98>
 8000e68:	3001      	adds	r0, #1
 8000e6a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000e6e:	bf02      	ittt	eq
 8000e70:	3001      	addeq	r0, #1
 8000e72:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000e76:	3001      	addeq	r0, #1
 8000e78:	bcf0      	pop	{r4, r5, r6, r7}
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <memcpy>:
 8000e80:	4684      	mov	ip, r0
 8000e82:	ea41 0300 	orr.w	r3, r1, r0
 8000e86:	f013 0303 	ands.w	r3, r3, #3
 8000e8a:	d16d      	bne.n	8000f68 <memcpy+0xe8>
 8000e8c:	3a40      	subs	r2, #64	; 0x40
 8000e8e:	d341      	bcc.n	8000f14 <memcpy+0x94>
 8000e90:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e94:	f840 3b04 	str.w	r3, [r0], #4
 8000e98:	f851 3b04 	ldr.w	r3, [r1], #4
 8000e9c:	f840 3b04 	str.w	r3, [r0], #4
 8000ea0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ea4:	f840 3b04 	str.w	r3, [r0], #4
 8000ea8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000eac:	f840 3b04 	str.w	r3, [r0], #4
 8000eb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000eb4:	f840 3b04 	str.w	r3, [r0], #4
 8000eb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ebc:	f840 3b04 	str.w	r3, [r0], #4
 8000ec0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ec4:	f840 3b04 	str.w	r3, [r0], #4
 8000ec8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ecc:	f840 3b04 	str.w	r3, [r0], #4
 8000ed0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ed4:	f840 3b04 	str.w	r3, [r0], #4
 8000ed8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000edc:	f840 3b04 	str.w	r3, [r0], #4
 8000ee0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ee4:	f840 3b04 	str.w	r3, [r0], #4
 8000ee8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000eec:	f840 3b04 	str.w	r3, [r0], #4
 8000ef0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ef4:	f840 3b04 	str.w	r3, [r0], #4
 8000ef8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000efc:	f840 3b04 	str.w	r3, [r0], #4
 8000f00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f04:	f840 3b04 	str.w	r3, [r0], #4
 8000f08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f0c:	f840 3b04 	str.w	r3, [r0], #4
 8000f10:	3a40      	subs	r2, #64	; 0x40
 8000f12:	d2bd      	bcs.n	8000e90 <memcpy+0x10>
 8000f14:	3230      	adds	r2, #48	; 0x30
 8000f16:	d311      	bcc.n	8000f3c <memcpy+0xbc>
 8000f18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f1c:	f840 3b04 	str.w	r3, [r0], #4
 8000f20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f24:	f840 3b04 	str.w	r3, [r0], #4
 8000f28:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f2c:	f840 3b04 	str.w	r3, [r0], #4
 8000f30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f34:	f840 3b04 	str.w	r3, [r0], #4
 8000f38:	3a10      	subs	r2, #16
 8000f3a:	d2ed      	bcs.n	8000f18 <memcpy+0x98>
 8000f3c:	320c      	adds	r2, #12
 8000f3e:	d305      	bcc.n	8000f4c <memcpy+0xcc>
 8000f40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000f44:	f840 3b04 	str.w	r3, [r0], #4
 8000f48:	3a04      	subs	r2, #4
 8000f4a:	d2f9      	bcs.n	8000f40 <memcpy+0xc0>
 8000f4c:	3204      	adds	r2, #4
 8000f4e:	d008      	beq.n	8000f62 <memcpy+0xe2>
 8000f50:	07d2      	lsls	r2, r2, #31
 8000f52:	bf1c      	itt	ne
 8000f54:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000f58:	f800 3b01 	strbne.w	r3, [r0], #1
 8000f5c:	d301      	bcc.n	8000f62 <memcpy+0xe2>
 8000f5e:	880b      	ldrh	r3, [r1, #0]
 8000f60:	8003      	strh	r3, [r0, #0]
 8000f62:	4660      	mov	r0, ip
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	2a08      	cmp	r2, #8
 8000f6a:	d313      	bcc.n	8000f94 <memcpy+0x114>
 8000f6c:	078b      	lsls	r3, r1, #30
 8000f6e:	d08d      	beq.n	8000e8c <memcpy+0xc>
 8000f70:	f010 0303 	ands.w	r3, r0, #3
 8000f74:	d08a      	beq.n	8000e8c <memcpy+0xc>
 8000f76:	f1c3 0304 	rsb	r3, r3, #4
 8000f7a:	1ad2      	subs	r2, r2, r3
 8000f7c:	07db      	lsls	r3, r3, #31
 8000f7e:	bf1c      	itt	ne
 8000f80:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000f84:	f800 3b01 	strbne.w	r3, [r0], #1
 8000f88:	d380      	bcc.n	8000e8c <memcpy+0xc>
 8000f8a:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000f8e:	f820 3b02 	strh.w	r3, [r0], #2
 8000f92:	e77b      	b.n	8000e8c <memcpy+0xc>
 8000f94:	3a04      	subs	r2, #4
 8000f96:	d3d9      	bcc.n	8000f4c <memcpy+0xcc>
 8000f98:	3a01      	subs	r2, #1
 8000f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f9e:	f800 3b01 	strb.w	r3, [r0], #1
 8000fa2:	d2f9      	bcs.n	8000f98 <memcpy+0x118>
 8000fa4:	780b      	ldrb	r3, [r1, #0]
 8000fa6:	7003      	strb	r3, [r0, #0]
 8000fa8:	784b      	ldrb	r3, [r1, #1]
 8000faa:	7043      	strb	r3, [r0, #1]
 8000fac:	788b      	ldrb	r3, [r1, #2]
 8000fae:	7083      	strb	r3, [r0, #2]
 8000fb0:	4660      	mov	r0, ip
 8000fb2:	4770      	bx	lr

08000fb4 <__gedf2>:
 8000fb4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fb8:	e006      	b.n	8000fc8 <__cmpdf2+0x4>
 8000fba:	bf00      	nop

08000fbc <__ledf2>:
 8000fbc:	f04f 0c01 	mov.w	ip, #1
 8000fc0:	e002      	b.n	8000fc8 <__cmpdf2+0x4>
 8000fc2:	bf00      	nop

08000fc4 <__cmpdf2>:
 8000fc4:	f04f 0c01 	mov.w	ip, #1
 8000fc8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000fd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000fd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000fd8:	bf18      	it	ne
 8000fda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000fde:	d01b      	beq.n	8001018 <__cmpdf2+0x54>
 8000fe0:	b001      	add	sp, #4
 8000fe2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000fe6:	bf0c      	ite	eq
 8000fe8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000fec:	ea91 0f03 	teqne	r1, r3
 8000ff0:	bf02      	ittt	eq
 8000ff2:	ea90 0f02 	teqeq	r0, r2
 8000ff6:	2000      	moveq	r0, #0
 8000ff8:	4770      	bxeq	lr
 8000ffa:	f110 0f00 	cmn.w	r0, #0
 8000ffe:	ea91 0f03 	teq	r1, r3
 8001002:	bf58      	it	pl
 8001004:	4299      	cmppl	r1, r3
 8001006:	bf08      	it	eq
 8001008:	4290      	cmpeq	r0, r2
 800100a:	bf2c      	ite	cs
 800100c:	17d8      	asrcs	r0, r3, #31
 800100e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8001012:	f040 0001 	orr.w	r0, r0, #1
 8001016:	4770      	bx	lr
 8001018:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800101c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001020:	d102      	bne.n	8001028 <__cmpdf2+0x64>
 8001022:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8001026:	d107      	bne.n	8001038 <__cmpdf2+0x74>
 8001028:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800102c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8001030:	d1d6      	bne.n	8000fe0 <__cmpdf2+0x1c>
 8001032:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8001036:	d0d3      	beq.n	8000fe0 <__cmpdf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cdrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4610      	mov	r0, r2
 8001044:	4662      	mov	r2, ip
 8001046:	468c      	mov	ip, r1
 8001048:	4619      	mov	r1, r3
 800104a:	4663      	mov	r3, ip
 800104c:	e000      	b.n	8001050 <__aeabi_cdcmpeq>
 800104e:	bf00      	nop

08001050 <__aeabi_cdcmpeq>:
 8001050:	b501      	push	{r0, lr}
 8001052:	f7ff ffb7 	bl	8000fc4 <__cmpdf2>
 8001056:	2800      	cmp	r0, #0
 8001058:	bf48      	it	mi
 800105a:	f110 0f00 	cmnmi.w	r0, #0
 800105e:	bd01      	pop	{r0, pc}

08001060 <__aeabi_dcmpeq>:
 8001060:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001064:	f7ff fff4 	bl	8001050 <__aeabi_cdcmpeq>
 8001068:	bf0c      	ite	eq
 800106a:	2001      	moveq	r0, #1
 800106c:	2000      	movne	r0, #0
 800106e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001072:	bf00      	nop

08001074 <__aeabi_dcmplt>:
 8001074:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001078:	f7ff ffea 	bl	8001050 <__aeabi_cdcmpeq>
 800107c:	bf34      	ite	cc
 800107e:	2001      	movcc	r0, #1
 8001080:	2000      	movcs	r0, #0
 8001082:	f85d fb08 	ldr.w	pc, [sp], #8
 8001086:	bf00      	nop

08001088 <__aeabi_dcmple>:
 8001088:	f84d ed08 	str.w	lr, [sp, #-8]!
 800108c:	f7ff ffe0 	bl	8001050 <__aeabi_cdcmpeq>
 8001090:	bf94      	ite	ls
 8001092:	2001      	movls	r0, #1
 8001094:	2000      	movhi	r0, #0
 8001096:	f85d fb08 	ldr.w	pc, [sp], #8
 800109a:	bf00      	nop

0800109c <__aeabi_dcmpge>:
 800109c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a0:	f7ff ffce 	bl	8001040 <__aeabi_cdrcmple>
 80010a4:	bf94      	ite	ls
 80010a6:	2001      	movls	r0, #1
 80010a8:	2000      	movhi	r0, #0
 80010aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ae:	bf00      	nop

080010b0 <__aeabi_dcmpgt>:
 80010b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b4:	f7ff ffc4 	bl	8001040 <__aeabi_cdrcmple>
 80010b8:	bf34      	ite	cc
 80010ba:	2001      	movcc	r0, #1
 80010bc:	2000      	movcs	r0, #0
 80010be:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c2:	bf00      	nop

080010c4 <__aeabi_dcmpun>:
 80010c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80010c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010cc:	d102      	bne.n	80010d4 <__aeabi_dcmpun+0x10>
 80010ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80010d2:	d10a      	bne.n	80010ea <__aeabi_dcmpun+0x26>
 80010d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80010d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80010dc:	d102      	bne.n	80010e4 <__aeabi_dcmpun+0x20>
 80010de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80010e2:	d102      	bne.n	80010ea <__aeabi_dcmpun+0x26>
 80010e4:	f04f 0000 	mov.w	r0, #0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0001 	mov.w	r0, #1
 80010ee:	4770      	bx	lr

080010f0 <__libc_init_array>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	4e0d      	ldr	r6, [pc, #52]	; (8001128 <__libc_init_array+0x38>)
 80010f4:	4d0d      	ldr	r5, [pc, #52]	; (800112c <__libc_init_array+0x3c>)
 80010f6:	1b76      	subs	r6, r6, r5
 80010f8:	10b6      	asrs	r6, r6, #2
 80010fa:	d006      	beq.n	800110a <__libc_init_array+0x1a>
 80010fc:	2400      	movs	r4, #0
 80010fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001102:	3401      	adds	r4, #1
 8001104:	4798      	blx	r3
 8001106:	42a6      	cmp	r6, r4
 8001108:	d1f9      	bne.n	80010fe <__libc_init_array+0xe>
 800110a:	4e09      	ldr	r6, [pc, #36]	; (8001130 <__libc_init_array+0x40>)
 800110c:	4d09      	ldr	r5, [pc, #36]	; (8001134 <__libc_init_array+0x44>)
 800110e:	1b76      	subs	r6, r6, r5
 8001110:	f00a fb42 	bl	800b798 <_init>
 8001114:	10b6      	asrs	r6, r6, #2
 8001116:	d006      	beq.n	8001126 <__libc_init_array+0x36>
 8001118:	2400      	movs	r4, #0
 800111a:	f855 3b04 	ldr.w	r3, [r5], #4
 800111e:	3401      	adds	r4, #1
 8001120:	4798      	blx	r3
 8001122:	42a6      	cmp	r6, r4
 8001124:	d1f9      	bne.n	800111a <__libc_init_array+0x2a>
 8001126:	bd70      	pop	{r4, r5, r6, pc}
 8001128:	0800bd08 	.word	0x0800bd08
 800112c:	0800bd08 	.word	0x0800bd08
 8001130:	0800bd10 	.word	0x0800bd10
 8001134:	0800bd08 	.word	0x0800bd08

08001138 <memset>:
 8001138:	0783      	lsls	r3, r0, #30
 800113a:	b530      	push	{r4, r5, lr}
 800113c:	d048      	beq.n	80011d0 <memset+0x98>
 800113e:	1e54      	subs	r4, r2, #1
 8001140:	2a00      	cmp	r2, #0
 8001142:	d03f      	beq.n	80011c4 <memset+0x8c>
 8001144:	b2ca      	uxtb	r2, r1
 8001146:	4603      	mov	r3, r0
 8001148:	e001      	b.n	800114e <memset+0x16>
 800114a:	3c01      	subs	r4, #1
 800114c:	d33a      	bcc.n	80011c4 <memset+0x8c>
 800114e:	f803 2b01 	strb.w	r2, [r3], #1
 8001152:	079d      	lsls	r5, r3, #30
 8001154:	d1f9      	bne.n	800114a <memset+0x12>
 8001156:	2c03      	cmp	r4, #3
 8001158:	d92d      	bls.n	80011b6 <memset+0x7e>
 800115a:	b2cd      	uxtb	r5, r1
 800115c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001160:	2c0f      	cmp	r4, #15
 8001162:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8001166:	d936      	bls.n	80011d6 <memset+0x9e>
 8001168:	f1a4 0210 	sub.w	r2, r4, #16
 800116c:	f022 0c0f 	bic.w	ip, r2, #15
 8001170:	f103 0e20 	add.w	lr, r3, #32
 8001174:	44e6      	add	lr, ip
 8001176:	ea4f 1c12 	mov.w	ip, r2, lsr #4
 800117a:	f103 0210 	add.w	r2, r3, #16
 800117e:	e942 5504 	strd	r5, r5, [r2, #-16]
 8001182:	e942 5502 	strd	r5, r5, [r2, #-8]
 8001186:	3210      	adds	r2, #16
 8001188:	4572      	cmp	r2, lr
 800118a:	d1f8      	bne.n	800117e <memset+0x46>
 800118c:	f10c 0201 	add.w	r2, ip, #1
 8001190:	f014 0f0c 	tst.w	r4, #12
 8001194:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8001198:	f004 0c0f 	and.w	ip, r4, #15
 800119c:	d013      	beq.n	80011c6 <memset+0x8e>
 800119e:	f1ac 0304 	sub.w	r3, ip, #4
 80011a2:	f023 0303 	bic.w	r3, r3, #3
 80011a6:	3304      	adds	r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	f842 5b04 	str.w	r5, [r2], #4
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d1fb      	bne.n	80011aa <memset+0x72>
 80011b2:	f00c 0403 	and.w	r4, ip, #3
 80011b6:	b12c      	cbz	r4, 80011c4 <memset+0x8c>
 80011b8:	b2ca      	uxtb	r2, r1
 80011ba:	441c      	add	r4, r3
 80011bc:	f803 2b01 	strb.w	r2, [r3], #1
 80011c0:	429c      	cmp	r4, r3
 80011c2:	d1fb      	bne.n	80011bc <memset+0x84>
 80011c4:	bd30      	pop	{r4, r5, pc}
 80011c6:	4664      	mov	r4, ip
 80011c8:	4613      	mov	r3, r2
 80011ca:	2c00      	cmp	r4, #0
 80011cc:	d1f4      	bne.n	80011b8 <memset+0x80>
 80011ce:	e7f9      	b.n	80011c4 <memset+0x8c>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4614      	mov	r4, r2
 80011d4:	e7bf      	b.n	8001156 <memset+0x1e>
 80011d6:	461a      	mov	r2, r3
 80011d8:	46a4      	mov	ip, r4
 80011da:	e7e0      	b.n	800119e <memset+0x66>

080011dc <register_fini>:
 80011dc:	4b02      	ldr	r3, [pc, #8]	; (80011e8 <register_fini+0xc>)
 80011de:	b113      	cbz	r3, 80011e6 <register_fini+0xa>
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <register_fini+0x10>)
 80011e2:	f000 b805 	b.w	80011f0 <atexit>
 80011e6:	4770      	bx	lr
 80011e8:	00000000 	.word	0x00000000
 80011ec:	080011fd 	.word	0x080011fd

080011f0 <atexit>:
 80011f0:	2300      	movs	r3, #0
 80011f2:	4601      	mov	r1, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 b81e 	b.w	8001238 <__register_exitproc>

080011fc <__libc_fini_array>:
 80011fc:	b538      	push	{r3, r4, r5, lr}
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <__libc_fini_array+0x24>)
 8001200:	4d08      	ldr	r5, [pc, #32]	; (8001224 <__libc_fini_array+0x28>)
 8001202:	1b5b      	subs	r3, r3, r5
 8001204:	109c      	asrs	r4, r3, #2
 8001206:	d007      	beq.n	8001218 <__libc_fini_array+0x1c>
 8001208:	3b04      	subs	r3, #4
 800120a:	441d      	add	r5, r3
 800120c:	3c01      	subs	r4, #1
 800120e:	f855 3904 	ldr.w	r3, [r5], #-4
 8001212:	4798      	blx	r3
 8001214:	2c00      	cmp	r4, #0
 8001216:	d1f9      	bne.n	800120c <__libc_fini_array+0x10>
 8001218:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800121c:	f00a bac2 	b.w	800b7a4 <_fini>
 8001220:	0800bd14 	.word	0x0800bd14
 8001224:	0800bd10 	.word	0x0800bd10

08001228 <__retarget_lock_init_recursive>:
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <__retarget_lock_close_recursive>:
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop

08001230 <__retarget_lock_acquire_recursive>:
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <__retarget_lock_release_recursive>:
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop

08001238 <__register_exitproc>:
 8001238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800123c:	f8df a080 	ldr.w	sl, [pc, #128]	; 80012c0 <__register_exitproc+0x88>
 8001240:	4606      	mov	r6, r0
 8001242:	f8da 0000 	ldr.w	r0, [sl]
 8001246:	4698      	mov	r8, r3
 8001248:	460f      	mov	r7, r1
 800124a:	4691      	mov	r9, r2
 800124c:	f7ff fff0 	bl	8001230 <__retarget_lock_acquire_recursive>
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <__register_exitproc+0x84>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8001258:	b324      	cbz	r4, 80012a4 <__register_exitproc+0x6c>
 800125a:	6865      	ldr	r5, [r4, #4]
 800125c:	2d1f      	cmp	r5, #31
 800125e:	dc26      	bgt.n	80012ae <__register_exitproc+0x76>
 8001260:	b95e      	cbnz	r6, 800127a <__register_exitproc+0x42>
 8001262:	1c6b      	adds	r3, r5, #1
 8001264:	3502      	adds	r5, #2
 8001266:	f8da 0000 	ldr.w	r0, [sl]
 800126a:	6063      	str	r3, [r4, #4]
 800126c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8001270:	f7ff ffe0 	bl	8001234 <__retarget_lock_release_recursive>
 8001274:	2000      	movs	r0, #0
 8001276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800127a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800127e:	2301      	movs	r3, #1
 8001280:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8001284:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8001288:	40ab      	lsls	r3, r5
 800128a:	431a      	orrs	r2, r3
 800128c:	2e02      	cmp	r6, #2
 800128e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8001292:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8001296:	d1e4      	bne.n	8001262 <__register_exitproc+0x2a>
 8001298:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 800129c:	4313      	orrs	r3, r2
 800129e:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 80012a2:	e7de      	b.n	8001262 <__register_exitproc+0x2a>
 80012a4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80012a8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80012ac:	e7d5      	b.n	800125a <__register_exitproc+0x22>
 80012ae:	f8da 0000 	ldr.w	r0, [sl]
 80012b2:	f7ff ffbf 	bl	8001234 <__retarget_lock_release_recursive>
 80012b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012ba:	e7dc      	b.n	8001276 <__register_exitproc+0x3e>
 80012bc:	0800b7b0 	.word	0x0800b7b0
 80012c0:	20000430 	.word	0x20000430

080012c4 <_read>:
 80012c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <_read+0x88>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	b084      	sub	sp, #16
 80012ce:	4606      	mov	r6, r0
 80012d0:	460c      	mov	r4, r1
 80012d2:	4615      	mov	r5, r2
 80012d4:	b10b      	cbz	r3, 80012da <_read+0x16>
 80012d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012d8:	b1ea      	cbz	r2, 8001316 <_read+0x52>
 80012da:	2e13      	cmp	r6, #19
 80012dc:	d820      	bhi.n	8001320 <_read+0x5c>
 80012de:	4f1c      	ldr	r7, [pc, #112]	; (8001350 <_read+0x8c>)
 80012e0:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	d01b      	beq.n	8001320 <_read+0x5c>
 80012e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80012ec:	9503      	str	r5, [sp, #12]
 80012ee:	2406      	movs	r4, #6
 80012f0:	f10d 0804 	add.w	r8, sp, #4
 80012f4:	4620      	mov	r0, r4
 80012f6:	4641      	mov	r1, r8
 80012f8:	beab      	bkpt	0x00ab
 80012fa:	4604      	mov	r4, r0
 80012fc:	1c63      	adds	r3, r4, #1
 80012fe:	d016      	beq.n	800132e <_read+0x6a>
 8001300:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 8001304:	1b2a      	subs	r2, r5, r4
 8001306:	6843      	ldr	r3, [r0, #4]
 8001308:	4614      	mov	r4, r2
 800130a:	441a      	add	r2, r3
 800130c:	6042      	str	r2, [r0, #4]
 800130e:	4620      	mov	r0, r4
 8001310:	b004      	add	sp, #16
 8001312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001316:	4618      	mov	r0, r3
 8001318:	f004 f86e 	bl	80053f8 <__sinit>
 800131c:	2e13      	cmp	r6, #19
 800131e:	d9de      	bls.n	80012de <_read+0x1a>
 8001320:	f004 f85e 	bl	80053e0 <__errno>
 8001324:	2309      	movs	r3, #9
 8001326:	6003      	str	r3, [r0, #0]
 8001328:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800132c:	e7ef      	b.n	800130e <_read+0x4a>
 800132e:	f004 f857 	bl	80053e0 <__errno>
 8001332:	2613      	movs	r6, #19
 8001334:	4605      	mov	r5, r0
 8001336:	2700      	movs	r7, #0
 8001338:	4630      	mov	r0, r6
 800133a:	4639      	mov	r1, r7
 800133c:	beab      	bkpt	0x00ab
 800133e:	4606      	mov	r6, r0
 8001340:	4620      	mov	r0, r4
 8001342:	602e      	str	r6, [r5, #0]
 8001344:	b004      	add	sp, #16
 8001346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800134a:	bf00      	nop
 800134c:	20000000 	.word	0x20000000
 8001350:	20000af8 	.word	0x20000af8

08001354 <_swilseek>:
 8001354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001358:	4b35      	ldr	r3, [pc, #212]	; (8001430 <_swilseek+0xdc>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	b083      	sub	sp, #12
 800135e:	4605      	mov	r5, r0
 8001360:	4688      	mov	r8, r1
 8001362:	4614      	mov	r4, r2
 8001364:	b10b      	cbz	r3, 800136a <_swilseek+0x16>
 8001366:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001368:	b312      	cbz	r2, 80013b0 <_swilseek+0x5c>
 800136a:	2d13      	cmp	r5, #19
 800136c:	d825      	bhi.n	80013ba <_swilseek+0x66>
 800136e:	4e31      	ldr	r6, [pc, #196]	; (8001434 <_swilseek+0xe0>)
 8001370:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
 8001374:	1c59      	adds	r1, r3, #1
 8001376:	d020      	beq.n	80013ba <_swilseek+0x66>
 8001378:	2c02      	cmp	r4, #2
 800137a:	d838      	bhi.n	80013ee <_swilseek+0x9a>
 800137c:	2c01      	cmp	r4, #1
 800137e:	d030      	beq.n	80013e2 <_swilseek+0x8e>
 8001380:	2c02      	cmp	r4, #2
 8001382:	d021      	beq.n	80013c8 <_swilseek+0x74>
 8001384:	4644      	mov	r4, r8
 8001386:	46e9      	mov	r9, sp
 8001388:	e9cd 3400 	strd	r3, r4, [sp]
 800138c:	270a      	movs	r7, #10
 800138e:	4638      	mov	r0, r7
 8001390:	4649      	mov	r1, r9
 8001392:	beab      	bkpt	0x00ab
 8001394:	4607      	mov	r7, r0
 8001396:	1c7b      	adds	r3, r7, #1
 8001398:	d030      	beq.n	80013fc <_swilseek+0xa8>
 800139a:	2f00      	cmp	r7, #0
 800139c:	bfaa      	itet	ge
 800139e:	eb06 05c5 	addge.w	r5, r6, r5, lsl #3
 80013a2:	f04f 34ff 	movlt.w	r4, #4294967295	; 0xffffffff
 80013a6:	606c      	strge	r4, [r5, #4]
 80013a8:	4620      	mov	r0, r4
 80013aa:	b003      	add	sp, #12
 80013ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013b0:	4618      	mov	r0, r3
 80013b2:	f004 f821 	bl	80053f8 <__sinit>
 80013b6:	2d13      	cmp	r5, #19
 80013b8:	d9d9      	bls.n	800136e <_swilseek+0x1a>
 80013ba:	f004 f811 	bl	80053e0 <__errno>
 80013be:	2309      	movs	r3, #9
 80013c0:	6003      	str	r3, [r0, #0]
 80013c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80013c6:	e7ef      	b.n	80013a8 <_swilseek+0x54>
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	240c      	movs	r4, #12
 80013cc:	46e9      	mov	r9, sp
 80013ce:	4620      	mov	r0, r4
 80013d0:	4649      	mov	r1, r9
 80013d2:	beab      	bkpt	0x00ab
 80013d4:	4604      	mov	r4, r0
 80013d6:	1c62      	adds	r2, r4, #1
 80013d8:	d01f      	beq.n	800141a <_swilseek+0xc6>
 80013da:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
 80013de:	4444      	add	r4, r8
 80013e0:	e7d2      	b.n	8001388 <_swilseek+0x34>
 80013e2:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 80013e6:	6854      	ldr	r4, [r2, #4]
 80013e8:	eb18 0404 	adds.w	r4, r8, r4
 80013ec:	d5cb      	bpl.n	8001386 <_swilseek+0x32>
 80013ee:	f003 fff7 	bl	80053e0 <__errno>
 80013f2:	2316      	movs	r3, #22
 80013f4:	6003      	str	r3, [r0, #0]
 80013f6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80013fa:	e7d5      	b.n	80013a8 <_swilseek+0x54>
 80013fc:	f003 fff0 	bl	80053e0 <__errno>
 8001400:	2513      	movs	r5, #19
 8001402:	4604      	mov	r4, r0
 8001404:	2600      	movs	r6, #0
 8001406:	4628      	mov	r0, r5
 8001408:	4631      	mov	r1, r6
 800140a:	beab      	bkpt	0x00ab
 800140c:	4605      	mov	r5, r0
 800140e:	6025      	str	r5, [r4, #0]
 8001410:	463c      	mov	r4, r7
 8001412:	4620      	mov	r0, r4
 8001414:	b003      	add	sp, #12
 8001416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800141a:	f003 ffe1 	bl	80053e0 <__errno>
 800141e:	2613      	movs	r6, #19
 8001420:	4605      	mov	r5, r0
 8001422:	2700      	movs	r7, #0
 8001424:	4630      	mov	r0, r6
 8001426:	4639      	mov	r1, r7
 8001428:	beab      	bkpt	0x00ab
 800142a:	4606      	mov	r6, r0
 800142c:	602e      	str	r6, [r5, #0]
 800142e:	e7bb      	b.n	80013a8 <_swilseek+0x54>
 8001430:	20000000 	.word	0x20000000
 8001434:	20000af8 	.word	0x20000af8

08001438 <_lseek>:
 8001438:	f7ff bf8c 	b.w	8001354 <_swilseek>

0800143c <_write>:
 800143c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <_write+0xb4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	b084      	sub	sp, #16
 8001446:	4606      	mov	r6, r0
 8001448:	460c      	mov	r4, r1
 800144a:	4615      	mov	r5, r2
 800144c:	b10b      	cbz	r3, 8001452 <_write+0x16>
 800144e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001450:	b312      	cbz	r2, 8001498 <_write+0x5c>
 8001452:	2e13      	cmp	r6, #19
 8001454:	d825      	bhi.n	80014a2 <_write+0x66>
 8001456:	4f27      	ldr	r7, [pc, #156]	; (80014f4 <_write+0xb8>)
 8001458:	f857 3036 	ldr.w	r3, [r7, r6, lsl #3]
 800145c:	1c5a      	adds	r2, r3, #1
 800145e:	d020      	beq.n	80014a2 <_write+0x66>
 8001460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001464:	9503      	str	r5, [sp, #12]
 8001466:	2405      	movs	r4, #5
 8001468:	f10d 0804 	add.w	r8, sp, #4
 800146c:	4620      	mov	r0, r4
 800146e:	4641      	mov	r1, r8
 8001470:	beab      	bkpt	0x00ab
 8001472:	4604      	mov	r4, r0
 8001474:	1c63      	adds	r3, r4, #1
 8001476:	d01b      	beq.n	80014b0 <_write+0x74>
 8001478:	2c00      	cmp	r4, #0
 800147a:	db35      	blt.n	80014e8 <_write+0xac>
 800147c:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
 8001480:	1b2a      	subs	r2, r5, r4
 8001482:	6843      	ldr	r3, [r0, #4]
 8001484:	42ac      	cmp	r4, r5
 8001486:	4413      	add	r3, r2
 8001488:	6043      	str	r3, [r0, #4]
 800148a:	bf18      	it	ne
 800148c:	4614      	movne	r4, r2
 800148e:	d01d      	beq.n	80014cc <_write+0x90>
 8001490:	4620      	mov	r0, r4
 8001492:	b004      	add	sp, #16
 8001494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001498:	4618      	mov	r0, r3
 800149a:	f003 ffad 	bl	80053f8 <__sinit>
 800149e:	2e13      	cmp	r6, #19
 80014a0:	d9d9      	bls.n	8001456 <_write+0x1a>
 80014a2:	f003 ff9d 	bl	80053e0 <__errno>
 80014a6:	2309      	movs	r3, #9
 80014a8:	6003      	str	r3, [r0, #0]
 80014aa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80014ae:	e7ef      	b.n	8001490 <_write+0x54>
 80014b0:	f003 ff96 	bl	80053e0 <__errno>
 80014b4:	2613      	movs	r6, #19
 80014b6:	4605      	mov	r5, r0
 80014b8:	2700      	movs	r7, #0
 80014ba:	4630      	mov	r0, r6
 80014bc:	4639      	mov	r1, r7
 80014be:	beab      	bkpt	0x00ab
 80014c0:	4606      	mov	r6, r0
 80014c2:	4620      	mov	r0, r4
 80014c4:	602e      	str	r6, [r5, #0]
 80014c6:	b004      	add	sp, #16
 80014c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014cc:	f003 ff88 	bl	80053e0 <__errno>
 80014d0:	2613      	movs	r6, #19
 80014d2:	4605      	mov	r5, r0
 80014d4:	2400      	movs	r4, #0
 80014d6:	4630      	mov	r0, r6
 80014d8:	4621      	mov	r1, r4
 80014da:	beab      	bkpt	0x00ab
 80014dc:	4606      	mov	r6, r0
 80014de:	4620      	mov	r0, r4
 80014e0:	602e      	str	r6, [r5, #0]
 80014e2:	b004      	add	sp, #16
 80014e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80014ec:	e7d0      	b.n	8001490 <_write+0x54>
 80014ee:	bf00      	nop
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000af8 	.word	0x20000af8

080014f8 <_close>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <_close+0x90>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	b083      	sub	sp, #12
 8001500:	4605      	mov	r5, r0
 8001502:	b10b      	cbz	r3, 8001508 <_close+0x10>
 8001504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001506:	b1f2      	cbz	r2, 8001546 <_close+0x4e>
 8001508:	2d13      	cmp	r5, #19
 800150a:	d821      	bhi.n	8001550 <_close+0x58>
 800150c:	4e1f      	ldr	r6, [pc, #124]	; (800158c <_close+0x94>)
 800150e:	f856 3035 	ldr.w	r3, [r6, r5, lsl #3]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	d01c      	beq.n	8001550 <_close+0x58>
 8001516:	1e6a      	subs	r2, r5, #1
 8001518:	2a01      	cmp	r2, #1
 800151a:	d803      	bhi.n	8001524 <_close+0x2c>
 800151c:	68b1      	ldr	r1, [r6, #8]
 800151e:	6932      	ldr	r2, [r6, #16]
 8001520:	4291      	cmp	r1, r2
 8001522:	d01c      	beq.n	800155e <_close+0x66>
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	2402      	movs	r4, #2
 8001528:	af01      	add	r7, sp, #4
 800152a:	4620      	mov	r0, r4
 800152c:	4639      	mov	r1, r7
 800152e:	beab      	bkpt	0x00ab
 8001530:	4604      	mov	r4, r0
 8001532:	1c63      	adds	r3, r4, #1
 8001534:	d01b      	beq.n	800156e <_close+0x76>
 8001536:	b91c      	cbnz	r4, 8001540 <_close+0x48>
 8001538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800153c:	f846 3035 	str.w	r3, [r6, r5, lsl #3]
 8001540:	4620      	mov	r0, r4
 8001542:	b003      	add	sp, #12
 8001544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001546:	4618      	mov	r0, r3
 8001548:	f003 ff56 	bl	80053f8 <__sinit>
 800154c:	2d13      	cmp	r5, #19
 800154e:	d9dd      	bls.n	800150c <_close+0x14>
 8001550:	f003 ff46 	bl	80053e0 <__errno>
 8001554:	2309      	movs	r3, #9
 8001556:	6003      	str	r3, [r0, #0]
 8001558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800155c:	e7f0      	b.n	8001540 <_close+0x48>
 800155e:	2400      	movs	r4, #0
 8001560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001564:	4620      	mov	r0, r4
 8001566:	f846 3035 	str.w	r3, [r6, r5, lsl #3]
 800156a:	b003      	add	sp, #12
 800156c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800156e:	f003 ff37 	bl	80053e0 <__errno>
 8001572:	2613      	movs	r6, #19
 8001574:	4605      	mov	r5, r0
 8001576:	2700      	movs	r7, #0
 8001578:	4630      	mov	r0, r6
 800157a:	4639      	mov	r1, r7
 800157c:	beab      	bkpt	0x00ab
 800157e:	4606      	mov	r6, r0
 8001580:	4620      	mov	r0, r4
 8001582:	602e      	str	r6, [r5, #0]
 8001584:	b003      	add	sp, #12
 8001586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001588:	20000000 	.word	0x20000000
 800158c:	20000af8 	.word	0x20000af8

08001590 <_getpid>:
 8001590:	2001      	movs	r0, #1
 8001592:	4770      	bx	lr

08001594 <_sbrk>:
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <_sbrk+0x38>)
 8001596:	4603      	mov	r3, r0
 8001598:	6810      	ldr	r0, [r2, #0]
 800159a:	b510      	push	{r4, lr}
 800159c:	b198      	cbz	r0, 80015c6 <_sbrk+0x32>
 800159e:	4403      	add	r3, r0
 80015a0:	4669      	mov	r1, sp
 80015a2:	428b      	cmp	r3, r1
 80015a4:	d808      	bhi.n	80015b8 <_sbrk+0x24>
 80015a6:	490a      	ldr	r1, [pc, #40]	; (80015d0 <_sbrk+0x3c>)
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <_sbrk+0x40>)
 80015aa:	6809      	ldr	r1, [r1, #0]
 80015ac:	42a1      	cmp	r1, r4
 80015ae:	d001      	beq.n	80015b4 <_sbrk+0x20>
 80015b0:	428b      	cmp	r3, r1
 80015b2:	d801      	bhi.n	80015b8 <_sbrk+0x24>
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	bd10      	pop	{r4, pc}
 80015b8:	f003 ff12 	bl	80053e0 <__errno>
 80015bc:	230c      	movs	r3, #12
 80015be:	6003      	str	r3, [r0, #0]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c4:	bd10      	pop	{r4, pc}
 80015c6:	4804      	ldr	r0, [pc, #16]	; (80015d8 <_sbrk+0x44>)
 80015c8:	6010      	str	r0, [r2, #0]
 80015ca:	e7e8      	b.n	800159e <_sbrk+0xa>
 80015cc:	20000af4 	.word	0x20000af4
 80015d0:	20000434 	.word	0x20000434
 80015d4:	cafedead 	.word	0xcafedead
 80015d8:	200014e0 	.word	0x200014e0

080015dc <_swistat>:
 80015dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015de:	4b1d      	ldr	r3, [pc, #116]	; (8001654 <_swistat+0x78>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4604      	mov	r4, r0
 80015e4:	460e      	mov	r6, r1
 80015e6:	b10b      	cbz	r3, 80015ec <_swistat+0x10>
 80015e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80015ea:	b1d2      	cbz	r2, 8001622 <_swistat+0x46>
 80015ec:	2c13      	cmp	r4, #19
 80015ee:	d81d      	bhi.n	800162c <_swistat+0x50>
 80015f0:	4819      	ldr	r0, [pc, #100]	; (8001658 <_swistat+0x7c>)
 80015f2:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 80015f6:	3301      	adds	r3, #1
 80015f8:	d018      	beq.n	800162c <_swistat+0x50>
 80015fa:	6873      	ldr	r3, [r6, #4]
 80015fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001604:	6073      	str	r3, [r6, #4]
 8001606:	64b2      	str	r2, [r6, #72]	; 0x48
 8001608:	250c      	movs	r5, #12
 800160a:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 800160e:	4628      	mov	r0, r5
 8001610:	4621      	mov	r1, r4
 8001612:	beab      	bkpt	0x00ab
 8001614:	4604      	mov	r4, r0
 8001616:	1c63      	adds	r3, r4, #1
 8001618:	d00f      	beq.n	800163a <_swistat+0x5e>
 800161a:	6134      	str	r4, [r6, #16]
 800161c:	2400      	movs	r4, #0
 800161e:	4620      	mov	r0, r4
 8001620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001622:	4618      	mov	r0, r3
 8001624:	f003 fee8 	bl	80053f8 <__sinit>
 8001628:	2c13      	cmp	r4, #19
 800162a:	d9e1      	bls.n	80015f0 <_swistat+0x14>
 800162c:	f003 fed8 	bl	80053e0 <__errno>
 8001630:	2309      	movs	r3, #9
 8001632:	6003      	str	r3, [r0, #0]
 8001634:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001638:	e7f1      	b.n	800161e <_swistat+0x42>
 800163a:	f003 fed1 	bl	80053e0 <__errno>
 800163e:	2613      	movs	r6, #19
 8001640:	4605      	mov	r5, r0
 8001642:	2700      	movs	r7, #0
 8001644:	4630      	mov	r0, r6
 8001646:	4639      	mov	r1, r7
 8001648:	beab      	bkpt	0x00ab
 800164a:	4606      	mov	r6, r0
 800164c:	602e      	str	r6, [r5, #0]
 800164e:	4620      	mov	r0, r4
 8001650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001652:	bf00      	nop
 8001654:	20000000 	.word	0x20000000
 8001658:	20000af8 	.word	0x20000af8

0800165c <_fstat>:
 800165c:	460b      	mov	r3, r1
 800165e:	b510      	push	{r4, lr}
 8001660:	2100      	movs	r1, #0
 8001662:	4604      	mov	r4, r0
 8001664:	2258      	movs	r2, #88	; 0x58
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fd66 	bl	8001138 <memset>
 800166c:	4601      	mov	r1, r0
 800166e:	4620      	mov	r0, r4
 8001670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001674:	f7ff bfb2 	b.w	80015dc <_swistat>

08001678 <_stat>:
 8001678:	b538      	push	{r3, r4, r5, lr}
 800167a:	460c      	mov	r4, r1
 800167c:	4605      	mov	r5, r0
 800167e:	2258      	movs	r2, #88	; 0x58
 8001680:	2100      	movs	r1, #0
 8001682:	4620      	mov	r0, r4
 8001684:	f7ff fd58 	bl	8001138 <memset>
 8001688:	4628      	mov	r0, r5
 800168a:	2100      	movs	r1, #0
 800168c:	f000 f812 	bl	80016b4 <_swiopen>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	4605      	mov	r5, r0
 8001694:	d00b      	beq.n	80016ae <_stat+0x36>
 8001696:	6863      	ldr	r3, [r4, #4]
 8001698:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800169c:	6063      	str	r3, [r4, #4]
 800169e:	4621      	mov	r1, r4
 80016a0:	f7ff ff9c 	bl	80015dc <_swistat>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4628      	mov	r0, r5
 80016a8:	461d      	mov	r5, r3
 80016aa:	f7ff ff25 	bl	80014f8 <_close>
 80016ae:	4628      	mov	r0, r5
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
 80016b2:	bf00      	nop

080016b4 <_swiopen>:
 80016b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016b8:	4603      	mov	r3, r0
 80016ba:	4e30      	ldr	r6, [pc, #192]	; (800177c <_swiopen+0xc8>)
 80016bc:	b098      	sub	sp, #96	; 0x60
 80016be:	460f      	mov	r7, r1
 80016c0:	2400      	movs	r4, #0
 80016c2:	e002      	b.n	80016ca <_swiopen+0x16>
 80016c4:	3401      	adds	r4, #1
 80016c6:	2c14      	cmp	r4, #20
 80016c8:	d051      	beq.n	800176e <_swiopen+0xba>
 80016ca:	f856 5034 	ldr.w	r5, [r6, r4, lsl #3]
 80016ce:	1c68      	adds	r0, r5, #1
 80016d0:	d1f8      	bne.n	80016c4 <_swiopen+0x10>
 80016d2:	f407 6220 	and.w	r2, r7, #2560	; 0xa00
 80016d6:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 80016da:	f10d 0808 	add.w	r8, sp, #8
 80016de:	d038      	beq.n	8001752 <_swiopen+0x9e>
 80016e0:	f3c7 4500 	ubfx	r5, r7, #16, #1
 80016e4:	f240 6201 	movw	r2, #1537	; 0x601
 80016e8:	07b9      	lsls	r1, r7, #30
 80016ea:	bf48      	it	mi
 80016ec:	f045 0502 	orrmi.w	r5, r5, #2
 80016f0:	4217      	tst	r7, r2
 80016f2:	bf18      	it	ne
 80016f4:	f045 0504 	orrne.w	r5, r5, #4
 80016f8:	073a      	lsls	r2, r7, #28
 80016fa:	bf48      	it	mi
 80016fc:	f025 0504 	bicmi.w	r5, r5, #4
 8001700:	4618      	mov	r0, r3
 8001702:	bf48      	it	mi
 8001704:	f045 0508 	orrmi.w	r5, r5, #8
 8001708:	9302      	str	r3, [sp, #8]
 800170a:	f7ff faf9 	bl	8000d00 <strlen>
 800170e:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8001712:	2501      	movs	r5, #1
 8001714:	4628      	mov	r0, r5
 8001716:	4641      	mov	r1, r8
 8001718:	beab      	bkpt	0x00ab
 800171a:	4605      	mov	r5, r0
 800171c:	2d00      	cmp	r5, #0
 800171e:	db09      	blt.n	8001734 <_swiopen+0x80>
 8001720:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 8001724:	2200      	movs	r2, #0
 8001726:	f846 5034 	str.w	r5, [r6, r4, lsl #3]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	4620      	mov	r0, r4
 800172e:	b018      	add	sp, #96	; 0x60
 8001730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001734:	f003 fe54 	bl	80053e0 <__errno>
 8001738:	2613      	movs	r6, #19
 800173a:	4604      	mov	r4, r0
 800173c:	2700      	movs	r7, #0
 800173e:	4630      	mov	r0, r6
 8001740:	4639      	mov	r1, r7
 8001742:	beab      	bkpt	0x00ab
 8001744:	4606      	mov	r6, r0
 8001746:	6026      	str	r6, [r4, #0]
 8001748:	462c      	mov	r4, r5
 800174a:	4620      	mov	r0, r4
 800174c:	b018      	add	sp, #96	; 0x60
 800174e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001752:	4618      	mov	r0, r3
 8001754:	4641      	mov	r1, r8
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	f7ff ff8e 	bl	8001678 <_stat>
 800175c:	3001      	adds	r0, #1
 800175e:	9b01      	ldr	r3, [sp, #4]
 8001760:	d0be      	beq.n	80016e0 <_swiopen+0x2c>
 8001762:	f003 fe3d 	bl	80053e0 <__errno>
 8001766:	2311      	movs	r3, #17
 8001768:	6003      	str	r3, [r0, #0]
 800176a:	462c      	mov	r4, r5
 800176c:	e7de      	b.n	800172c <_swiopen+0x78>
 800176e:	f003 fe37 	bl	80053e0 <__errno>
 8001772:	2318      	movs	r3, #24
 8001774:	6003      	str	r3, [r0, #0]
 8001776:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800177a:	e7d7      	b.n	800172c <_swiopen+0x78>
 800177c:	20000af8 	.word	0x20000af8

08001780 <_get_semihosting_exts>:
 8001780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001784:	4607      	mov	r7, r0
 8001786:	b083      	sub	sp, #12
 8001788:	483e      	ldr	r0, [pc, #248]	; (8001884 <_get_semihosting_exts+0x104>)
 800178a:	4688      	mov	r8, r1
 800178c:	2100      	movs	r1, #0
 800178e:	4616      	mov	r6, r2
 8001790:	f7ff ff90 	bl	80016b4 <_swiopen>
 8001794:	2100      	movs	r1, #0
 8001796:	4604      	mov	r4, r0
 8001798:	4632      	mov	r2, r6
 800179a:	4638      	mov	r0, r7
 800179c:	f7ff fccc 	bl	8001138 <memset>
 80017a0:	1c61      	adds	r1, r4, #1
 80017a2:	d06d      	beq.n	8001880 <_get_semihosting_exts+0x100>
 80017a4:	4b38      	ldr	r3, [pc, #224]	; (8001888 <_get_semihosting_exts+0x108>)
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	b110      	cbz	r0, 80017b0 <_get_semihosting_exts+0x30>
 80017aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d042      	beq.n	8001836 <_get_semihosting_exts+0xb6>
 80017b0:	2c13      	cmp	r4, #19
 80017b2:	d844      	bhi.n	800183e <_get_semihosting_exts+0xbe>
 80017b4:	4d35      	ldr	r5, [pc, #212]	; (800188c <_get_semihosting_exts+0x10c>)
 80017b6:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 80017ba:	3301      	adds	r3, #1
 80017bc:	d03f      	beq.n	800183e <_get_semihosting_exts+0xbe>
 80017be:	eb05 09c4 	add.w	r9, r5, r4, lsl #3
 80017c2:	250c      	movs	r5, #12
 80017c4:	4628      	mov	r0, r5
 80017c6:	4649      	mov	r1, r9
 80017c8:	beab      	bkpt	0x00ab
 80017ca:	4605      	mov	r5, r0
 80017cc:	1c6a      	adds	r2, r5, #1
 80017ce:	d039      	beq.n	8001844 <_get_semihosting_exts+0xc4>
 80017d0:	2d03      	cmp	r5, #3
 80017d2:	dd41      	ble.n	8001858 <_get_semihosting_exts+0xd8>
 80017d4:	3d03      	subs	r5, #3
 80017d6:	42b5      	cmp	r5, r6
 80017d8:	dd3e      	ble.n	8001858 <_get_semihosting_exts+0xd8>
 80017da:	2204      	movs	r2, #4
 80017dc:	eb0d 0102 	add.w	r1, sp, r2
 80017e0:	4620      	mov	r0, r4
 80017e2:	f7ff fd6f 	bl	80012c4 <_read>
 80017e6:	2803      	cmp	r0, #3
 80017e8:	dd36      	ble.n	8001858 <_get_semihosting_exts+0xd8>
 80017ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80017ee:	2b53      	cmp	r3, #83	; 0x53
 80017f0:	d132      	bne.n	8001858 <_get_semihosting_exts+0xd8>
 80017f2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80017f6:	2b48      	cmp	r3, #72	; 0x48
 80017f8:	d12e      	bne.n	8001858 <_get_semihosting_exts+0xd8>
 80017fa:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80017fe:	2b46      	cmp	r3, #70	; 0x46
 8001800:	d12a      	bne.n	8001858 <_get_semihosting_exts+0xd8>
 8001802:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001806:	2b42      	cmp	r3, #66	; 0x42
 8001808:	d126      	bne.n	8001858 <_get_semihosting_exts+0xd8>
 800180a:	2201      	movs	r2, #1
 800180c:	4641      	mov	r1, r8
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff fda0 	bl	8001354 <_swilseek>
 8001814:	2800      	cmp	r0, #0
 8001816:	db1f      	blt.n	8001858 <_get_semihosting_exts+0xd8>
 8001818:	4632      	mov	r2, r6
 800181a:	4639      	mov	r1, r7
 800181c:	4620      	mov	r0, r4
 800181e:	f7ff fd51 	bl	80012c4 <_read>
 8001822:	4605      	mov	r5, r0
 8001824:	4620      	mov	r0, r4
 8001826:	f7ff fe67 	bl	80014f8 <_close>
 800182a:	1c6b      	adds	r3, r5, #1
 800182c:	d01d      	beq.n	800186a <_get_semihosting_exts+0xea>
 800182e:	4628      	mov	r0, r5
 8001830:	b003      	add	sp, #12
 8001832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001836:	f003 fddf 	bl	80053f8 <__sinit>
 800183a:	2c13      	cmp	r4, #19
 800183c:	d9ba      	bls.n	80017b4 <_get_semihosting_exts+0x34>
 800183e:	f04f 0900 	mov.w	r9, #0
 8001842:	e7be      	b.n	80017c2 <_get_semihosting_exts+0x42>
 8001844:	f003 fdcc 	bl	80053e0 <__errno>
 8001848:	2613      	movs	r6, #19
 800184a:	4605      	mov	r5, r0
 800184c:	2700      	movs	r7, #0
 800184e:	4630      	mov	r0, r6
 8001850:	4639      	mov	r1, r7
 8001852:	beab      	bkpt	0x00ab
 8001854:	4606      	mov	r6, r0
 8001856:	602e      	str	r6, [r5, #0]
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff fe4d 	bl	80014f8 <_close>
 800185e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001862:	4628      	mov	r0, r5
 8001864:	b003      	add	sp, #12
 8001866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800186a:	f003 fdb9 	bl	80053e0 <__errno>
 800186e:	2613      	movs	r6, #19
 8001870:	4604      	mov	r4, r0
 8001872:	2700      	movs	r7, #0
 8001874:	4630      	mov	r0, r6
 8001876:	4639      	mov	r1, r7
 8001878:	beab      	bkpt	0x00ab
 800187a:	4606      	mov	r6, r0
 800187c:	6026      	str	r6, [r4, #0]
 800187e:	e7d6      	b.n	800182e <_get_semihosting_exts+0xae>
 8001880:	4625      	mov	r5, r4
 8001882:	e7d4      	b.n	800182e <_get_semihosting_exts+0xae>
 8001884:	0800b7b4 	.word	0x0800b7b4
 8001888:	20000000 	.word	0x20000000
 800188c:	20000af8 	.word	0x20000af8

08001890 <_has_ext_exit_extended>:
 8001890:	b530      	push	{r4, r5, lr}
 8001892:	4c0f      	ldr	r4, [pc, #60]	; (80018d0 <_has_ext_exit_extended+0x40>)
 8001894:	6820      	ldr	r0, [r4, #0]
 8001896:	2800      	cmp	r0, #0
 8001898:	b083      	sub	sp, #12
 800189a:	db01      	blt.n	80018a0 <_has_ext_exit_extended+0x10>
 800189c:	b003      	add	sp, #12
 800189e:	bd30      	pop	{r4, r5, pc}
 80018a0:	4d0c      	ldr	r5, [pc, #48]	; (80018d4 <_has_ext_exit_extended+0x44>)
 80018a2:	2100      	movs	r1, #0
 80018a4:	2201      	movs	r2, #1
 80018a6:	a801      	add	r0, sp, #4
 80018a8:	6021      	str	r1, [r4, #0]
 80018aa:	602a      	str	r2, [r5, #0]
 80018ac:	f7ff ff68 	bl	8001780 <_get_semihosting_exts>
 80018b0:	2800      	cmp	r0, #0
 80018b2:	dd09      	ble.n	80018c8 <_has_ext_exit_extended+0x38>
 80018b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80018b8:	f003 0001 	and.w	r0, r3, #1
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	6020      	str	r0, [r4, #0]
 80018c2:	602b      	str	r3, [r5, #0]
 80018c4:	b003      	add	sp, #12
 80018c6:	bd30      	pop	{r4, r5, pc}
 80018c8:	6820      	ldr	r0, [r4, #0]
 80018ca:	b003      	add	sp, #12
 80018cc:	bd30      	pop	{r4, r5, pc}
 80018ce:	bf00      	nop
 80018d0:	20000438 	.word	0x20000438
 80018d4:	2000043c 	.word	0x2000043c

080018d8 <_isatty>:
 80018d8:	4b17      	ldr	r3, [pc, #92]	; (8001938 <_isatty+0x60>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	4605      	mov	r5, r0
 80018e0:	b10b      	cbz	r3, 80018e6 <_isatty+0xe>
 80018e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018e4:	b1e2      	cbz	r2, 8001920 <_isatty+0x48>
 80018e6:	2d13      	cmp	r5, #19
 80018e8:	d81f      	bhi.n	800192a <_isatty+0x52>
 80018ea:	4814      	ldr	r0, [pc, #80]	; (800193c <_isatty+0x64>)
 80018ec:	f850 3035 	ldr.w	r3, [r0, r5, lsl #3]
 80018f0:	3301      	adds	r3, #1
 80018f2:	d01a      	beq.n	800192a <_isatty+0x52>
 80018f4:	2409      	movs	r4, #9
 80018f6:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 80018fa:	4620      	mov	r0, r4
 80018fc:	4629      	mov	r1, r5
 80018fe:	beab      	bkpt	0x00ab
 8001900:	4604      	mov	r4, r0
 8001902:	2c01      	cmp	r4, #1
 8001904:	4620      	mov	r0, r4
 8001906:	d00a      	beq.n	800191e <_isatty+0x46>
 8001908:	f003 fd6a 	bl	80053e0 <__errno>
 800190c:	2613      	movs	r6, #19
 800190e:	4605      	mov	r5, r0
 8001910:	2400      	movs	r4, #0
 8001912:	4630      	mov	r0, r6
 8001914:	4621      	mov	r1, r4
 8001916:	beab      	bkpt	0x00ab
 8001918:	4606      	mov	r6, r0
 800191a:	602e      	str	r6, [r5, #0]
 800191c:	4620      	mov	r0, r4
 800191e:	bd70      	pop	{r4, r5, r6, pc}
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fd69 	bl	80053f8 <__sinit>
 8001926:	2d13      	cmp	r5, #19
 8001928:	d9df      	bls.n	80018ea <_isatty+0x12>
 800192a:	f003 fd59 	bl	80053e0 <__errno>
 800192e:	2309      	movs	r3, #9
 8001930:	6003      	str	r3, [r0, #0]
 8001932:	2000      	movs	r0, #0
 8001934:	bd70      	pop	{r4, r5, r6, pc}
 8001936:	bf00      	nop
 8001938:	20000000 	.word	0x20000000
 800193c:	20000af8 	.word	0x20000af8

08001940 <_exit>:
 8001940:	4601      	mov	r1, r0
 8001942:	b508      	push	{r3, lr}
 8001944:	4a02      	ldr	r2, [pc, #8]	; (8001950 <_exit+0x10>)
 8001946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800194a:	f000 f803 	bl	8001954 <_kill_shared>
 800194e:	bf00      	nop
 8001950:	00020026 	.word	0x00020026

08001954 <_kill_shared>:
 8001954:	b500      	push	{lr}
 8001956:	b083      	sub	sp, #12
 8001958:	e9cd 2100 	strd	r2, r1, [sp]
 800195c:	f7ff ff98 	bl	8001890 <_has_ext_exit_extended>
 8001960:	2800      	cmp	r0, #0
 8001962:	bf14      	ite	ne
 8001964:	2420      	movne	r4, #32
 8001966:	2418      	moveq	r4, #24
 8001968:	f7ff ff92 	bl	8001890 <_has_ext_exit_extended>
 800196c:	b120      	cbz	r0, 8001978 <_kill_shared+0x24>
 800196e:	466d      	mov	r5, sp
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	beab      	bkpt	0x00ab
 8001976:	4604      	mov	r4, r0
 8001978:	9b00      	ldr	r3, [sp, #0]
 800197a:	461d      	mov	r5, r3
 800197c:	4620      	mov	r0, r4
 800197e:	4629      	mov	r1, r5
 8001980:	beab      	bkpt	0x00ab
 8001982:	4604      	mov	r4, r0

08001984 <_kill>:
 8001984:	2906      	cmp	r1, #6
 8001986:	b508      	push	{r3, lr}
 8001988:	d002      	beq.n	8001990 <_kill+0xc>
 800198a:	4a03      	ldr	r2, [pc, #12]	; (8001998 <_kill+0x14>)
 800198c:	f7ff ffe2 	bl	8001954 <_kill_shared>
 8001990:	4a02      	ldr	r2, [pc, #8]	; (800199c <_kill+0x18>)
 8001992:	f7ff ffdf 	bl	8001954 <_kill_shared>
 8001996:	bf00      	nop
 8001998:	00020026 	.word	0x00020026
 800199c:	00020023 	.word	0x00020023

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80019a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019a4:	480d      	ldr	r0, [pc, #52]	; (80019dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019a6:	490e      	ldr	r1, [pc, #56]	; (80019e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019a8:	4a0e      	ldr	r2, [pc, #56]	; (80019e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019ac:	e002      	b.n	80019b4 <LoopCopyDataInit>

080019ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b2:	3304      	adds	r3, #4

080019b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b8:	d3f9      	bcc.n	80019ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ba:	4a0b      	ldr	r2, [pc, #44]	; (80019e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019bc:	4c0b      	ldr	r4, [pc, #44]	; (80019ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80019be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c0:	e001      	b.n	80019c6 <LoopFillZerobss>

080019c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c4:	3204      	adds	r2, #4

080019c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c8:	d3fb      	bcc.n	80019c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ca:	f003 fb71 	bl	80050b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ce:	f7ff fb8f 	bl	80010f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f003 f967 	bl	8004ca4 <main>
  bx  lr    
 80019d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000ac8 	.word	0x20000ac8
  ldr r2, =_sidata
 80019e4:	0800bd14 	.word	0x0800bd14
  ldr r2, =_sbss
 80019e8:	20000ac8 	.word	0x20000ac8
  ldr r4, =_ebss
 80019ec:	200014dc 	.word	0x200014dc

080019f0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <CAN1_RX0_IRQHandler>
	...

080019f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019f6:	4a0e      	ldr	r2, [pc, #56]	; (8001a30 <HAL_InitTick+0x3c>)
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_InitTick+0x40>)
{
 80019fa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019fc:	7818      	ldrb	r0, [r3, #0]
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a06:	6810      	ldr	r0, [r2, #0]
 8001a08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a0c:	f000 fb1c 	bl	8002048 <HAL_SYSTICK_Config>
 8001a10:	4604      	mov	r4, r0
 8001a12:	b958      	cbnz	r0, 8001a2c <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a14:	2d0f      	cmp	r5, #15
 8001a16:	d809      	bhi.n	8001a2c <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a18:	4602      	mov	r2, r0
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a20:	f000 fabe 	bl	8001fa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <HAL_InitTick+0x44>)
 8001a26:	4620      	mov	r0, r4
 8001a28:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001a2a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	e7fc      	b.n	8001a2a <HAL_InitTick+0x36>
 8001a30:	20000510 	.word	0x20000510
 8001a34:	20000440 	.word	0x20000440
 8001a38:	20000444 	.word	0x20000444

08001a3c <HAL_Init>:
{
 8001a3c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a3e:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <HAL_Init+0x28>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a46:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a4e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a50:	2003      	movs	r0, #3
 8001a52:	f000 fa93 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a56:	200f      	movs	r0, #15
 8001a58:	f7ff ffcc 	bl	80019f4 <HAL_InitTick>
  HAL_MspInit();
 8001a5c:	f003 f9c4 	bl	8004de8 <HAL_MspInit>
}
 8001a60:	2000      	movs	r0, #0
 8001a62:	bd08      	pop	{r3, pc}
 8001a64:	40023c00 	.word	0x40023c00

08001a68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a68:	4a03      	ldr	r2, [pc, #12]	; (8001a78 <HAL_IncTick+0x10>)
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <HAL_IncTick+0x14>)
 8001a6c:	6811      	ldr	r1, [r2, #0]
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	440b      	add	r3, r1
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000b98 	.word	0x20000b98
 8001a7c:	20000440 	.word	0x20000440

08001a80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a80:	4b01      	ldr	r3, [pc, #4]	; (8001a88 <HAL_GetTick+0x8>)
 8001a82:	6818      	ldr	r0, [r3, #0]
}
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	20000b98 	.word	0x20000b98

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b538      	push	{r3, r4, r5, lr}
 8001a8e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff fff6 	bl	8001a80 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a94:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001a96:	bf1c      	itt	ne
 8001a98:	4b05      	ldrne	r3, [pc, #20]	; (8001ab0 <HAL_Delay+0x24>)
 8001a9a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001a9c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001a9e:	bf18      	it	ne
 8001aa0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001aa2:	f7ff ffed 	bl	8001a80 <HAL_GetTick>
 8001aa6:	1b43      	subs	r3, r0, r5
 8001aa8:	42a3      	cmp	r3, r4
 8001aaa:	d3fa      	bcc.n	8001aa2 <HAL_Delay+0x16>
  {
  }
}
 8001aac:	bd38      	pop	{r3, r4, r5, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000440 	.word	0x20000440

08001ab4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
  return((DBGMCU->IDCODE) >> 16U);
 8001ab4:	4b01      	ldr	r3, [pc, #4]	; (8001abc <HAL_GetREVID+0x8>)
 8001ab6:	6818      	ldr	r0, [r3, #0]
}
 8001ab8:	0c00      	lsrs	r0, r0, #16
 8001aba:	4770      	bx	lr
 8001abc:	e0042000 	.word	0xe0042000

08001ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ac2:	4604      	mov	r4, r0
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	f000 809b 	beq.w	8001c00 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001aca:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001acc:	b925      	cbnz	r5, 8001ad8 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ace:	f003 fa35 	bl	8004f3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ad2:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ad4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ada:	06db      	lsls	r3, r3, #27
 8001adc:	f100 808e 	bmi.w	8001bfc <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ae2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ae6:	f023 0302 	bic.w	r3, r3, #2
 8001aea:	f043 0302 	orr.w	r3, r3, #2
 8001aee:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001af0:	4b44      	ldr	r3, [pc, #272]	; (8001c04 <HAL_ADC_Init+0x144>)
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001af8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	6861      	ldr	r1, [r4, #4]
 8001afe:	430a      	orrs	r2, r1
 8001b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b02:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b04:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001b14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b16:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b18:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b1a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b1e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	430a      	orrs	r2, r1
 8001b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b26:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b28:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b30:	689a      	ldr	r2, [r3, #8]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b36:	4934      	ldr	r1, [pc, #208]	; (8001c08 <HAL_ADC_Init+0x148>)
 8001b38:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b3a:	428a      	cmp	r2, r1
 8001b3c:	d052      	beq.n	8001be4 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b3e:	6899      	ldr	r1, [r3, #8]
 8001b40:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001b44:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b46:	6899      	ldr	r1, [r3, #8]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b4c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b4e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b5a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	f022 0202 	bic.w	r2, r2, #2
 8001b62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	7e21      	ldrb	r1, [r4, #24]
 8001b68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001b6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b6e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001b72:	2a00      	cmp	r2, #0
 8001b74:	d03e      	beq.n	8001bf4 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b76:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b78:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b7e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	3901      	subs	r1, #1
 8001b8c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b90:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b94:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b9e:	3901      	subs	r1, #1
 8001ba0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001bb4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001bb8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bba:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bbc:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bc4:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001bc6:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001bc8:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001bcc:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001bce:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001bd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bd2:	f023 0303 	bic.w	r3, r3, #3
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001be2:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bf2:	e7b2      	b.n	8001b5a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bfa:	e7c9      	b.n	8001b90 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	e7ed      	b.n	8001bdc <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
 8001c02:	e7ee      	b.n	8001be2 <HAL_ADC_Init+0x122>
 8001c04:	40012300 	.word	0x40012300
 8001c08:	0f000001 	.word	0x0f000001

08001c0c <HAL_ADC_Start_IT>:
{
 8001c0c:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t counter = 0U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001c12:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d072      	beq.n	8001d00 <HAL_ADC_Start_IT+0xf4>
 8001c1a:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c1c:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(hadc);
 8001c1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c22:	6893      	ldr	r3, [r2, #8]
 8001c24:	07d9      	lsls	r1, r3, #31
 8001c26:	d50c      	bpl.n	8001c42 <HAL_ADC_Start_IT+0x36>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c28:	6893      	ldr	r3, [r2, #8]
 8001c2a:	f013 0301 	ands.w	r3, r3, #1
 8001c2e:	d11a      	bne.n	8001c66 <HAL_ADC_Start_IT+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c30:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001c32:	f042 0210 	orr.w	r2, r2, #16
 8001c36:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	6442      	str	r2, [r0, #68]	; 0x44
 8001c40:	e05c      	b.n	8001cfc <HAL_ADC_Start_IT+0xf0>
    __HAL_ADC_ENABLE(hadc);
 8001c42:	6893      	ldr	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c44:	4930      	ldr	r1, [pc, #192]	; (8001d08 <HAL_ADC_Start_IT+0xfc>)
    __HAL_ADC_ENABLE(hadc);
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6093      	str	r3, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_ADC_Start_IT+0x100>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c54:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      counter--;
 8001c58:	9301      	str	r3, [sp, #4]
    while(counter != 0U)
 8001c5a:	9b01      	ldr	r3, [sp, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0e3      	beq.n	8001c28 <HAL_ADC_Start_IT+0x1c>
      counter--;
 8001c60:	9b01      	ldr	r3, [sp, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	e7f8      	b.n	8001c58 <HAL_ADC_Start_IT+0x4c>
    ADC_STATE_CLR_SET(hadc->State,
 8001c66:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c68:	4c29      	ldr	r4, [pc, #164]	; (8001d10 <HAL_ADC_Start_IT+0x104>)
 8001c6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6403      	str	r3, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c78:	6853      	ldr	r3, [r2, #4]
 8001c7a:	055b      	lsls	r3, r3, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c7c:	bf41      	itttt	mi
 8001c7e:	6c03      	ldrmi	r3, [r0, #64]	; 0x40
 8001c80:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001c84:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 8001c88:	6403      	strmi	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001c8c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c90:	bf1c      	itt	ne
 8001c92:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 8001c94:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001c98:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c9a:	f06f 0122 	mvn.w	r1, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ca4:	6011      	str	r1, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001ca6:	6851      	ldr	r1, [r2, #4]
 8001ca8:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001cac:	f041 0120 	orr.w	r1, r1, #32
 8001cb0:	6051      	str	r1, [r2, #4]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001cb2:	4918      	ldr	r1, [pc, #96]	; (8001d14 <HAL_ADC_Start_IT+0x108>)
 8001cb4:	6848      	ldr	r0, [r1, #4]
 8001cb6:	f010 001f 	ands.w	r0, r0, #31
 8001cba:	d119      	bne.n	8001cf0 <HAL_ADC_Start_IT+0xe4>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001cbc:	42a2      	cmp	r2, r4
 8001cbe:	d006      	beq.n	8001cce <HAL_ADC_Start_IT+0xc2>
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_ADC_Start_IT+0x10c>)
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_ADC_Start_IT+0xd6>
 8001cc6:	684b      	ldr	r3, [r1, #4]
 8001cc8:	f013 0f1f 	tst.w	r3, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ccc:	d107      	bne.n	8001cde <HAL_ADC_Start_IT+0xd2>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cce:	6890      	ldr	r0, [r2, #8]
 8001cd0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001cd4:	d116      	bne.n	8001d04 <HAL_ADC_Start_IT+0xf8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cd6:	6893      	ldr	r3, [r2, #8]
 8001cd8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cdc:	6093      	str	r3, [r2, #8]
}
 8001cde:	b002      	add	sp, #8
 8001ce0:	bd10      	pop	{r4, pc}
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <HAL_ADC_Start_IT+0x110>)
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1fa      	bne.n	8001cde <HAL_ADC_Start_IT+0xd2>
 8001ce8:	684b      	ldr	r3, [r1, #4]
 8001cea:	f013 0f10 	tst.w	r3, #16
 8001cee:	e7ed      	b.n	8001ccc <HAL_ADC_Start_IT+0xc0>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cf0:	42a2      	cmp	r2, r4
 8001cf2:	d107      	bne.n	8001d04 <HAL_ADC_Start_IT+0xf8>
 8001cf4:	6890      	ldr	r0, [r2, #8]
 8001cf6:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001cfa:	d0ec      	beq.n	8001cd6 <HAL_ADC_Start_IT+0xca>
  return HAL_OK;
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	e7ee      	b.n	8001cde <HAL_ADC_Start_IT+0xd2>
  __HAL_LOCK(hadc);
 8001d00:	2002      	movs	r0, #2
 8001d02:	e7ec      	b.n	8001cde <HAL_ADC_Start_IT+0xd2>
  return HAL_OK;
 8001d04:	2000      	movs	r0, #0
 8001d06:	e7ea      	b.n	8001cde <HAL_ADC_Start_IT+0xd2>
 8001d08:	000f4240 	.word	0x000f4240
 8001d0c:	20000510 	.word	0x20000510
 8001d10:	40012000 	.word	0x40012000
 8001d14:	40012300 	.word	0x40012300
 8001d18:	40012100 	.word	0x40012100
 8001d1c:	40012200 	.word	0x40012200

08001d20 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8001d20:	6803      	ldr	r3, [r0, #0]
 8001d22:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8001d24:	4770      	bx	lr

08001d26 <HAL_ADC_LevelOutOfWindowCallback>:
 8001d26:	4770      	bx	lr

08001d28 <HAL_ADC_ErrorCallback>:
 8001d28:	4770      	bx	lr

08001d2a <HAL_ADC_IRQHandler>:
{
 8001d2a:	b538      	push	{r3, r4, r5, lr}
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001d2c:	6803      	ldr	r3, [r0, #0]
 8001d2e:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001d30:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001d32:	078d      	lsls	r5, r1, #30
{
 8001d34:	4604      	mov	r4, r0
  if(tmp1 && tmp2)
 8001d36:	d52b      	bpl.n	8001d90 <HAL_ADC_IRQHandler+0x66>
 8001d38:	0690      	lsls	r0, r2, #26
 8001d3a:	d529      	bpl.n	8001d90 <HAL_ADC_IRQHandler+0x66>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001d3e:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d40:	bf5e      	ittt	pl
 8001d42:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001d44:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001d48:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001d50:	d117      	bne.n	8001d82 <HAL_ADC_IRQHandler+0x58>
 8001d52:	7e22      	ldrb	r2, [r4, #24]
 8001d54:	b9aa      	cbnz	r2, 8001d82 <HAL_ADC_IRQHandler+0x58>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d58:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8001d5c:	d002      	beq.n	8001d64 <HAL_ADC_IRQHandler+0x3a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d5e:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001d60:	0552      	lsls	r2, r2, #21
 8001d62:	d40e      	bmi.n	8001d82 <HAL_ADC_IRQHandler+0x58>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	f022 0220 	bic.w	r2, r2, #32
 8001d6a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d72:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d76:	04db      	lsls	r3, r3, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d78:	bf5e      	ittt	pl
 8001d7a:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001d7c:	f043 0301 	orrpl.w	r3, r3, #1
 8001d80:	6423      	strpl	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001d82:	4620      	mov	r0, r4
 8001d84:	f002 ff14 	bl	8004bb0 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	f06f 0212 	mvn.w	r2, #18
 8001d8e:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001d94:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001d96:	074d      	lsls	r5, r1, #29
 8001d98:	d532      	bpl.n	8001e00 <HAL_ADC_IRQHandler+0xd6>
 8001d9a:	0610      	lsls	r0, r2, #24
 8001d9c:	d530      	bpl.n	8001e00 <HAL_ADC_IRQHandler+0xd6>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d9e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001da0:	06d1      	lsls	r1, r2, #27
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001da2:	bf5e      	ittt	pl
 8001da4:	6c22      	ldrpl	r2, [r4, #64]	; 0x40
 8001da6:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8001daa:	6422      	strpl	r2, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001db2:	d11e      	bne.n	8001df2 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001db6:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8001dba:	d002      	beq.n	8001dc2 <HAL_ADC_IRQHandler+0x98>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001dbc:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001dbe:	0552      	lsls	r2, r2, #21
 8001dc0:	d417      	bmi.n	8001df2 <HAL_ADC_IRQHandler+0xc8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dc2:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001dc4:	0555      	lsls	r5, r2, #21
 8001dc6:	d414      	bmi.n	8001df2 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dc8:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001dca:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001dce:	d110      	bne.n	8001df2 <HAL_ADC_IRQHandler+0xc8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001dd0:	7e22      	ldrb	r2, [r4, #24]
 8001dd2:	b972      	cbnz	r2, 8001df2 <HAL_ADC_IRQHandler+0xc8>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001dda:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ddc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001de2:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001de4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001de6:	05d8      	lsls	r0, r3, #23
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de8:	bf5e      	ittt	pl
 8001dea:	6c23      	ldrpl	r3, [r4, #64]	; 0x40
 8001dec:	f043 0301 	orrpl.w	r3, r3, #1
 8001df0:	6423      	strpl	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001df2:	4620      	mov	r0, r4
 8001df4:	f000 f8c0 	bl	8001f78 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	f06f 020c 	mvn.w	r2, #12
 8001dfe:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001e04:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001e06:	07c9      	lsls	r1, r1, #31
 8001e08:	d50f      	bpl.n	8001e2a <HAL_ADC_IRQHandler+0x100>
 8001e0a:	0655      	lsls	r5, r2, #25
 8001e0c:	d50d      	bpl.n	8001e2a <HAL_ADC_IRQHandler+0x100>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	07d8      	lsls	r0, r3, #31
 8001e12:	d50a      	bpl.n	8001e2a <HAL_ADC_IRQHandler+0x100>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1a:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f7ff ff82 	bl	8001d26 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001e22:	6823      	ldr	r3, [r4, #0]
 8001e24:	f06f 0201 	mvn.w	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001e2a:	6823      	ldr	r3, [r4, #0]
 8001e2c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001e2e:	685a      	ldr	r2, [r3, #4]
  if(tmp1 && tmp2)
 8001e30:	0689      	lsls	r1, r1, #26
 8001e32:	d50d      	bpl.n	8001e50 <HAL_ADC_IRQHandler+0x126>
 8001e34:	0152      	lsls	r2, r2, #5
 8001e36:	d50b      	bpl.n	8001e50 <HAL_ADC_IRQHandler+0x126>
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e38:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e3a:	f06f 0520 	mvn.w	r5, #32
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e3e:	f042 0202 	orr.w	r2, r2, #2
 8001e42:	6462      	str	r2, [r4, #68]	; 0x44
      HAL_ADC_ErrorCallback(hadc);
 8001e44:	4620      	mov	r0, r4
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e46:	601d      	str	r5, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 8001e48:	f7ff ff6e 	bl	8001d28 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e4c:	6823      	ldr	r3, [r4, #0]
 8001e4e:	601d      	str	r5, [r3, #0]
}
 8001e50:	bd38      	pop	{r3, r4, r5, pc}
	...

08001e54 <HAL_ADC_ConfigChannel>:
{
 8001e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001e5a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d066      	beq.n	8001f30 <HAL_ADC_ConfigChannel+0xdc>
 8001e62:	2301      	movs	r3, #1
 8001e64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e68:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e6a:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e6c:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e6e:	2d09      	cmp	r5, #9
 8001e70:	b2ac      	uxth	r4, r5
 8001e72:	d931      	bls.n	8001ed8 <HAL_ADC_ConfigChannel+0x84>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e74:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001e78:	68df      	ldr	r7, [r3, #12]
 8001e7a:	3a1e      	subs	r2, #30
 8001e7c:	f04f 0c07 	mov.w	ip, #7
 8001e80:	fa0c fc02 	lsl.w	ip, ip, r2
 8001e84:	ea27 070c 	bic.w	r7, r7, ip
 8001e88:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e8a:	68df      	ldr	r7, [r3, #12]
 8001e8c:	fa06 f202 	lsl.w	r2, r6, r2
 8001e90:	433a      	orrs	r2, r7
 8001e92:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001e94:	6849      	ldr	r1, [r1, #4]
 8001e96:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e98:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8001e9c:	d82c      	bhi.n	8001ef8 <HAL_ADC_ConfigChannel+0xa4>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea0:	3a05      	subs	r2, #5
 8001ea2:	261f      	movs	r6, #31
 8001ea4:	4096      	lsls	r6, r2
 8001ea6:	ea21 0106 	bic.w	r1, r1, r6
 8001eaa:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001eac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eae:	fa04 f202 	lsl.w	r2, r4, r2
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eb6:	4a2c      	ldr	r2, [pc, #176]	; (8001f68 <HAL_ADC_ConfigChannel+0x114>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d107      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x78>
 8001ebc:	2d12      	cmp	r5, #18
 8001ebe:	d139      	bne.n	8001f34 <HAL_ADC_ConfigChannel+0xe0>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ec0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8001ec4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ec8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  __HAL_UNLOCK(hadc);
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001ed2:	4618      	mov	r0, r3
}
 8001ed4:	b003      	add	sp, #12
 8001ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ed8:	691f      	ldr	r7, [r3, #16]
 8001eda:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001ede:	f04f 0c07 	mov.w	ip, #7
 8001ee2:	fa0c fc02 	lsl.w	ip, ip, r2
 8001ee6:	ea27 070c 	bic.w	r7, r7, ip
 8001eea:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001eec:	691f      	ldr	r7, [r3, #16]
 8001eee:	fa06 f202 	lsl.w	r2, r6, r2
 8001ef2:	433a      	orrs	r2, r7
 8001ef4:	611a      	str	r2, [r3, #16]
 8001ef6:	e7cd      	b.n	8001e94 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8001ef8:	290c      	cmp	r1, #12
 8001efa:	f04f 011f 	mov.w	r1, #31
 8001efe:	d80b      	bhi.n	8001f18 <HAL_ADC_ConfigChannel+0xc4>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f00:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8001f02:	3a23      	subs	r2, #35	; 0x23
 8001f04:	4091      	lsls	r1, r2
 8001f06:	ea26 0101 	bic.w	r1, r6, r1
 8001f0a:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f0c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f0e:	fa04 f202 	lsl.w	r2, r4, r2
 8001f12:	430a      	orrs	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
 8001f16:	e7ce      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f18:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001f1a:	3a41      	subs	r2, #65	; 0x41
 8001f1c:	4091      	lsls	r1, r2
 8001f1e:	ea26 0101 	bic.w	r1, r6, r1
 8001f22:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f26:	fa04 f202 	lsl.w	r2, r4, r2
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f2e:	e7c2      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001f30:	2002      	movs	r0, #2
 8001f32:	e7cf      	b.n	8001ed4 <HAL_ADC_ConfigChannel+0x80>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f34:	f1a5 0310 	sub.w	r3, r5, #16
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d8c7      	bhi.n	8001ecc <HAL_ADC_ConfigChannel+0x78>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <HAL_ADC_ConfigChannel+0x118>)
 8001f3e:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f40:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f42:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f46:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001f48:	d1c0      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x78>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_ADC_ConfigChannel+0x11c>)
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <HAL_ADC_ConfigChannel+0x120>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f54:	220a      	movs	r2, #10
 8001f56:	4353      	muls	r3, r2
        counter--;
 8001f58:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001f5a:	9b01      	ldr	r3, [sp, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0b5      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x78>
        counter--;
 8001f60:	9b01      	ldr	r3, [sp, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	e7f8      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x104>
 8001f66:	bf00      	nop
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	40012300 	.word	0x40012300
 8001f70:	20000510 	.word	0x20000510
 8001f74:	000f4240 	.word	0x000f4240

08001f78 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f7c:	4907      	ldr	r1, [pc, #28]	; (8001f9c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f7e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f84:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f8c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001f98:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fa2:	b530      	push	{r4, r5, lr}
 8001fa4:	68dc      	ldr	r4, [r3, #12]
 8001fa6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001faa:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fae:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	2d04      	cmp	r5, #4
 8001fb2:	bf28      	it	cs
 8001fb4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbc:	bf8c      	ite	hi
 8001fbe:	3c03      	subhi	r4, #3
 8001fc0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc2:	fa03 f505 	lsl.w	r5, r3, r5
 8001fc6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fca:	40a3      	lsls	r3, r4
 8001fcc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001fd2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd8:	bfac      	ite	ge
 8001fda:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fde:	4a08      	ldrlt	r2, [pc, #32]	; (8002000 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe0:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fe4:	bfb8      	it	lt
 8001fe6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	bfaa      	itet	ge
 8001fee:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff4:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ff8:	bd30      	pop	{r4, r5, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00
 8002000:	e000ed14 	.word	0xe000ed14

08002004 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002004:	2800      	cmp	r0, #0
 8002006:	db08      	blt.n	800201a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002008:	0942      	lsrs	r2, r0, #5
 800200a:	2301      	movs	r3, #1
 800200c:	f000 001f 	and.w	r0, r0, #31
 8002010:	fa03 f000 	lsl.w	r0, r3, r0
 8002014:	4b01      	ldr	r3, [pc, #4]	; (800201c <HAL_NVIC_EnableIRQ+0x18>)
 8002016:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800201a:	4770      	bx	lr
 800201c:	e000e100 	.word	0xe000e100

08002020 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002020:	2800      	cmp	r0, #0
 8002022:	db0d      	blt.n	8002040 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002024:	0943      	lsrs	r3, r0, #5
 8002026:	2201      	movs	r2, #1
 8002028:	f000 001f 	and.w	r0, r0, #31
 800202c:	fa02 f000 	lsl.w	r0, r2, r0
 8002030:	3320      	adds	r3, #32
 8002032:	4a04      	ldr	r2, [pc, #16]	; (8002044 <HAL_NVIC_DisableIRQ+0x24>)
 8002034:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002038:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800203c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	3801      	subs	r0, #1
 800204a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800204e:	d20b      	bcs.n	8002068 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002050:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002054:	4a05      	ldr	r2, [pc, #20]	; (800206c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	21f0      	movs	r1, #240	; 0xf0
 800205a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002060:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002062:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002064:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002066:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002068:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800206a:	4770      	bx	lr
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002070:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8002072:	f002 fd85 	bl	8004b80 <HAL_SYSTICK_Callback>
}
 8002076:	bd08      	pop	{r3, pc}

08002078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 8002228 <HAL_GPIO_Init+0x1b0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002080:	4a67      	ldr	r2, [pc, #412]	; (8002220 <HAL_GPIO_Init+0x1a8>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002084:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002086:	2401      	movs	r4, #1
 8002088:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800208a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800208e:	43ac      	bics	r4, r5
 8002090:	f040 80b0 	bne.w	80021f4 <HAL_GPIO_Init+0x17c>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002094:	684d      	ldr	r5, [r1, #4]
 8002096:	f005 0403 	and.w	r4, r5, #3
 800209a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800209e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a0:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a2:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020a6:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020a8:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020ac:	d834      	bhi.n	8002118 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80020ae:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020b0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020b4:	68cf      	ldr	r7, [r1, #12]
 80020b6:	fa07 f708 	lsl.w	r7, r7, r8
 80020ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80020be:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80020c0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c2:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020c6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80020ca:	409f      	lsls	r7, r3
 80020cc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80020d0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80020d2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020d4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	688f      	ldr	r7, [r1, #8]
 80020da:	fa07 f708 	lsl.w	r7, r7, r8
 80020de:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e2:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80020e4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e6:	d119      	bne.n	800211c <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80020e8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80020ec:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80020f4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80020fc:	f04f 0e0f 	mov.w	lr, #15
 8002100:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002104:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002108:	690f      	ldr	r7, [r1, #16]
 800210a:	fa07 f70b 	lsl.w	r7, r7, fp
 800210e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002112:	f8ca 7020 	str.w	r7, [sl, #32]
 8002116:	e001      	b.n	800211c <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002118:	2c03      	cmp	r4, #3
 800211a:	d1da      	bne.n	80020d2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 800211c:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800211e:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002122:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002124:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002126:	00ec      	lsls	r4, r5, #3
      GPIOx->MODER = temp;
 8002128:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212a:	d563      	bpl.n	80021f4 <HAL_GPIO_Init+0x17c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212c:	f04f 0a00 	mov.w	sl, #0
 8002130:	f8cd a004 	str.w	sl, [sp, #4]
 8002134:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002138:	4c3a      	ldr	r4, [pc, #232]	; (8002224 <HAL_GPIO_Init+0x1ac>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213a:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800213e:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002142:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002146:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800214a:	9601      	str	r6, [sp, #4]
 800214c:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800214e:	f023 0603 	bic.w	r6, r3, #3
 8002152:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002156:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800215a:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800215e:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002162:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002166:	270f      	movs	r7, #15
 8002168:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216c:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800216e:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002172:	d046      	beq.n	8002202 <HAL_GPIO_Init+0x18a>
 8002174:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002178:	42a0      	cmp	r0, r4
 800217a:	d044      	beq.n	8002206 <HAL_GPIO_Init+0x18e>
 800217c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002180:	42a0      	cmp	r0, r4
 8002182:	d042      	beq.n	800220a <HAL_GPIO_Init+0x192>
 8002184:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002188:	42a0      	cmp	r0, r4
 800218a:	d040      	beq.n	800220e <HAL_GPIO_Init+0x196>
 800218c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002190:	42a0      	cmp	r0, r4
 8002192:	d03e      	beq.n	8002212 <HAL_GPIO_Init+0x19a>
 8002194:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002198:	42a0      	cmp	r0, r4
 800219a:	d03c      	beq.n	8002216 <HAL_GPIO_Init+0x19e>
 800219c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021a0:	42a0      	cmp	r0, r4
 80021a2:	d03a      	beq.n	800221a <HAL_GPIO_Init+0x1a2>
 80021a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021a8:	42a0      	cmp	r0, r4
 80021aa:	bf0c      	ite	eq
 80021ac:	2407      	moveq	r4, #7
 80021ae:	2408      	movne	r4, #8
 80021b0:	fa04 f40e 	lsl.w	r4, r4, lr
 80021b4:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b6:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80021b8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80021ba:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021be:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80021c0:	bf54      	ite	pl
 80021c2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80021c4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80021c8:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 80021ca:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021cc:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80021ce:	bf54      	ite	pl
 80021d0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80021d2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80021d6:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d8:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021da:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80021dc:	bf54      	ite	pl
 80021de:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80021e0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80021e4:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80021e6:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e8:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80021ea:	bf54      	ite	pl
 80021ec:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80021ee:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80021f2:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f4:	3301      	adds	r3, #1
 80021f6:	2b10      	cmp	r3, #16
 80021f8:	f47f af44 	bne.w	8002084 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80021fc:	b003      	add	sp, #12
 80021fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002202:	4654      	mov	r4, sl
 8002204:	e7d4      	b.n	80021b0 <HAL_GPIO_Init+0x138>
 8002206:	2401      	movs	r4, #1
 8002208:	e7d2      	b.n	80021b0 <HAL_GPIO_Init+0x138>
 800220a:	2402      	movs	r4, #2
 800220c:	e7d0      	b.n	80021b0 <HAL_GPIO_Init+0x138>
 800220e:	2403      	movs	r4, #3
 8002210:	e7ce      	b.n	80021b0 <HAL_GPIO_Init+0x138>
 8002212:	2404      	movs	r4, #4
 8002214:	e7cc      	b.n	80021b0 <HAL_GPIO_Init+0x138>
 8002216:	2405      	movs	r4, #5
 8002218:	e7ca      	b.n	80021b0 <HAL_GPIO_Init+0x138>
 800221a:	2406      	movs	r4, #6
 800221c:	e7c8      	b.n	80021b0 <HAL_GPIO_Init+0x138>
 800221e:	bf00      	nop
 8002220:	40013c00 	.word	0x40013c00
 8002224:	40020000 	.word	0x40020000
 8002228:	40023800 	.word	0x40023800

0800222c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800222c:	6903      	ldr	r3, [r0, #16]
 800222e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002230:	bf14      	ite	ne
 8002232:	2001      	movne	r0, #1
 8002234:	2000      	moveq	r0, #0
 8002236:	4770      	bx	lr

08002238 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	b10a      	cbz	r2, 800223e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223a:	6181      	str	r1, [r0, #24]
  }
}
 800223c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800223e:	0409      	lsls	r1, r1, #16
 8002240:	e7fb      	b.n	800223a <HAL_GPIO_WritePin+0x2>
	...

08002244 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002244:	4a04      	ldr	r2, [pc, #16]	; (8002258 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002246:	6951      	ldr	r1, [r2, #20]
 8002248:	4201      	tst	r1, r0
{
 800224a:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800224c:	d002      	beq.n	8002254 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800224e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002250:	f002 fc98 	bl	8004b84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002254:	bd08      	pop	{r3, pc}
 8002256:	bf00      	nop
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800225c:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800225e:	4604      	mov	r4, r0
{
 8002260:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 8002262:	b360      	cbz	r0, 80022be <HAL_PCD_Init+0x62>
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002264:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8002268:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800226a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800226e:	b91b      	cbnz	r3, 8002278 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002270:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002274:	f002 ff42 	bl	80050fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002278:	2303      	movs	r3, #3
 800227a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800227e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  {
    hpcd->Init.dma_enable = 0U;
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002280:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002282:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8002286:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 800228a:	bf08      	it	eq
 800228c:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800228e:	f001 f9dd 	bl	800364c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002294:	466e      	mov	r6, sp
 8002296:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002298:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800229a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800229c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022a0:	e886 0003 	stmia.w	r6, {r0, r1}
 80022a4:	4625      	mov	r5, r4
 80022a6:	1d27      	adds	r7, r4, #4
 80022a8:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80022ac:	f855 0b10 	ldr.w	r0, [r5], #16
 80022b0:	f001 f916 	bl	80034e0 <USB_CoreInit>
 80022b4:	4606      	mov	r6, r0
 80022b6:	b120      	cbz	r0, 80022c2 <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022b8:	2302      	movs	r3, #2
 80022ba:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80022be:	2501      	movs	r5, #1
 80022c0:	e04e      	b.n	8002360 <HAL_PCD_Init+0x104>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80022c2:	4601      	mov	r1, r0
 80022c4:	6820      	ldr	r0, [r4, #0]
 80022c6:	f001 f9c7 	bl	8003658 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ca:	4630      	mov	r0, r6
 80022cc:	f8d4 c004 	ldr.w	ip, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022d0:	261c      	movs	r6, #28
 80022d2:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022d6:	4601      	mov	r1, r0
 80022d8:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022da:	4594      	cmp	ip, r2
 80022dc:	f100 0001 	add.w	r0, r0, #1
 80022e0:	d81c      	bhi.n	800231c <HAL_PCD_Init+0xc0>
 80022e2:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022e4:	261c      	movs	r6, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ea:	4584      	cmp	ip, r0
 80022ec:	f103 0301 	add.w	r3, r3, #1
 80022f0:	d822      	bhi.n	8002338 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022f4:	466e      	mov	r6, sp
 80022f6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80022f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022fa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80022fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002300:	e886 0003 	stmia.w	r6, {r0, r1}
 8002304:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8002308:	6820      	ldr	r0, [r4, #0]
 800230a:	f001 f9e7 	bl	80036dc <USB_DevInit>
 800230e:	2301      	movs	r3, #1
 8002310:	4605      	mov	r5, r0
 8002312:	b1f0      	cbz	r0, 8002352 <HAL_PCD_Init+0xf6>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002314:	2202      	movs	r2, #2
 8002316:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 800231a:	e7d0      	b.n	80022be <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 800231c:	fb06 4302 	mla	r3, r6, r2, r4
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002320:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].is_in = 1U;
 8002324:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800232c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002330:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 8002334:	6519      	str	r1, [r3, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002336:	e7cf      	b.n	80022d8 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8002338:	fb06 4200 	mla	r2, r6, r0, r4
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800233c:	e9c2 1181 	strd	r1, r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].is_in = 0U;
 8002340:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8002344:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002348:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800234c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002350:	e7ca      	b.n	80022e8 <HAL_PCD_Init+0x8c>
  }

  hpcd->USB_Address = 0U;
 8002352:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002356:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8002358:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800235c:	f001 fd12 	bl	8003d84 <USB_DevDisconnect>

  return HAL_OK;
}
 8002360:	4628      	mov	r0, r5
 8002362:	b00b      	add	sp, #44	; 0x2c
 8002364:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002366 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002366:	b510      	push	{r4, lr}
 8002368:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800236a:	6800      	ldr	r0, [r0, #0]

  __HAL_LOCK(hpcd);
 800236c:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002370:	2b01      	cmp	r3, #1
 8002372:	d015      	beq.n	80023a0 <HAL_PCD_Start+0x3a>
 8002374:	2301      	movs	r3, #1
 8002376:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800237a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_PCD_Start+0x28>
 8002380:	69a3      	ldr	r3, [r4, #24]
 8002382:	2b01      	cmp	r3, #1
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002384:	bf1e      	ittt	ne
 8002386:	6b83      	ldrne	r3, [r0, #56]	; 0x38
 8002388:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
 800238c:	6383      	strne	r3, [r0, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800238e:	f001 f957 	bl	8003640 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002392:	6820      	ldr	r0, [r4, #0]
 8002394:	f001 fce8 	bl	8003d68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002398:	2000      	movs	r0, #0
 800239a:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800239e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80023a0:	2002      	movs	r0, #2
 80023a2:	e7fc      	b.n	800239e <HAL_PCD_Start+0x38>

080023a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023a8:	6806      	ldr	r6, [r0, #0]
{
 80023aa:	b087      	sub	sp, #28
 80023ac:	4604      	mov	r4, r0
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023ae:	4630      	mov	r0, r6
 80023b0:	f001 fd25 	bl	8003dfe <USB_GetMode>
 80023b4:	9002      	str	r0, [sp, #8]
 80023b6:	2800      	cmp	r0, #0
 80023b8:	f040 8124 	bne.w	8002604 <HAL_PCD_IRQHandler+0x260>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80023bc:	6820      	ldr	r0, [r4, #0]
 80023be:	f001 fcef 	bl	8003da0 <USB_ReadInterrupts>
 80023c2:	2800      	cmp	r0, #0
 80023c4:	f000 811e 	beq.w	8002604 <HAL_PCD_IRQHandler+0x260>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023c8:	6820      	ldr	r0, [r4, #0]
 80023ca:	f001 fce9 	bl	8003da0 <USB_ReadInterrupts>
 80023ce:	0782      	lsls	r2, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023d0:	bf48      	it	mi
 80023d2:	6822      	ldrmi	r2, [r4, #0]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023d4:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023d6:	bf42      	ittt	mi
 80023d8:	6953      	ldrmi	r3, [r2, #20]
 80023da:	f003 0302 	andmi.w	r3, r3, #2
 80023de:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023e0:	f001 fcde 	bl	8003da0 <USB_ReadInterrupts>
 80023e4:	06c3      	lsls	r3, r0, #27
 80023e6:	d52a      	bpl.n	800243e <HAL_PCD_IRQHandler+0x9a>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023e8:	6822      	ldr	r2, [r4, #0]
 80023ea:	6993      	ldr	r3, [r2, #24]
 80023ec:	f023 0310 	bic.w	r3, r3, #16
 80023f0:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 80023f2:	6a37      	ldr	r7, [r6, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023f4:	f3c7 4343 	ubfx	r3, r7, #17, #4
 80023f8:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80023fa:	f007 050f 	and.w	r5, r7, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023fe:	f040 8104 	bne.w	800260a <HAL_PCD_IRQHandler+0x266>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002402:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002406:	421f      	tst	r7, r3
 8002408:	d014      	beq.n	8002434 <HAL_PCD_IRQHandler+0x90>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800240a:	231c      	movs	r3, #28
 800240c:	fb03 4505 	mla	r5, r3, r5, r4
 8002410:	f3c7 180a 	ubfx	r8, r7, #4, #11
 8002414:	4642      	mov	r2, r8
 8002416:	f8d5 1208 	ldr.w	r1, [r5, #520]	; 0x208
 800241a:	4630      	mov	r0, r6
 800241c:	f001 fc32 	bl	8003c84 <USB_ReadPacket>
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002420:	f8d5 2208 	ldr.w	r2, [r5, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002424:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002428:	4442      	add	r2, r8
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800242a:	4443      	add	r3, r8
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800242c:	f8c5 2208 	str.w	r2, [r5, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002430:	f8c5 3214 	str.w	r3, [r5, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002434:	6822      	ldr	r2, [r4, #0]
 8002436:	6993      	ldr	r3, [r2, #24]
 8002438:	f043 0310 	orr.w	r3, r3, #16
 800243c:	6193      	str	r3, [r2, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800243e:	6820      	ldr	r0, [r4, #0]
 8002440:	f001 fcae 	bl	8003da0 <USB_ReadInterrupts>
 8002444:	0307      	lsls	r7, r0, #12
 8002446:	f100 80f4 	bmi.w	8002632 <HAL_PCD_IRQHandler+0x28e>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800244a:	6820      	ldr	r0, [r4, #0]
 800244c:	f001 fca8 	bl	8003da0 <USB_ReadInterrupts>
 8002450:	0345      	lsls	r5, r0, #13
 8002452:	d50c      	bpl.n	800246e <HAL_PCD_IRQHandler+0xca>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002454:	6820      	ldr	r0, [r4, #0]
 8002456:	f001 fcaf 	bl	8003db8 <USB_ReadDevAllInEpInterrupt>
 800245a:	4625      	mov	r5, r4
 800245c:	9003      	str	r0, [sp, #12]

      epnum = 0U;

      while (ep_intr != 0U)
 800245e:	f506 6910 	add.w	r9, r6, #2304	; 0x900
      epnum = 0U;
 8002462:	f04f 0800 	mov.w	r8, #0
      while (ep_intr != 0U)
 8002466:	9b03      	ldr	r3, [sp, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 818a 	bne.w	8002782 <HAL_PCD_IRQHandler+0x3de>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800246e:	6820      	ldr	r0, [r4, #0]
 8002470:	f001 fc96 	bl	8003da0 <USB_ReadInterrupts>
 8002474:	2800      	cmp	r0, #0
 8002476:	da15      	bge.n	80024a4 <HAL_PCD_IRQHandler+0x100>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002478:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8002484:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8002488:	2b01      	cmp	r3, #1
 800248a:	f040 820a 	bne.w	80028a2 <HAL_PCD_IRQHandler+0x4fe>
      {
        hpcd->LPM_State = LPM_L0;
 800248e:	2100      	movs	r1, #0
 8002490:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002494:	4620      	mov	r0, r4
 8002496:	f000 fb8c 	bl	8002bb2 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800249a:	6822      	ldr	r2, [r4, #0]
 800249c:	6953      	ldr	r3, [r2, #20]
 800249e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024a2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80024a4:	6820      	ldr	r0, [r4, #0]
 80024a6:	f001 fc7b 	bl	8003da0 <USB_ReadInterrupts>
 80024aa:	0501      	lsls	r1, r0, #20
 80024ac:	d50b      	bpl.n	80024c6 <HAL_PCD_IRQHandler+0x122>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80024ae:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 80024b2:	07da      	lsls	r2, r3, #31
 80024b4:	d502      	bpl.n	80024bc <HAL_PCD_IRQHandler+0x118>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024b6:	4620      	mov	r0, r4
 80024b8:	f002 fe9d 	bl	80051f6 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80024bc:	6822      	ldr	r2, [r4, #0]
 80024be:	6953      	ldr	r3, [r2, #20]
 80024c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024c4:	6153      	str	r3, [r2, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024c6:	6820      	ldr	r0, [r4, #0]
 80024c8:	f001 fc6a 	bl	8003da0 <USB_ReadInterrupts>
 80024cc:	04c3      	lsls	r3, r0, #19
 80024ce:	d537      	bpl.n	8002540 <HAL_PCD_IRQHandler+0x19c>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d0:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024d4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024d6:	f023 0301 	bic.w	r3, r3, #1
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024da:	2110      	movs	r1, #16
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024dc:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024e0:	f001 f8d2 	bl	8003688 <USB_FlushTxFifo>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024e4:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 80024e8:	f506 6310 	add.w	r3, r6, #2304	; 0x900

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024ec:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024f0:	6862      	ldr	r2, [r4, #4]
 80024f2:	9802      	ldr	r0, [sp, #8]
 80024f4:	4282      	cmp	r2, r0
 80024f6:	f200 81d8 	bhi.w	80028aa <HAL_PCD_IRQHandler+0x506>
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80024fa:	69eb      	ldr	r3, [r5, #28]
 80024fc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002500:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002502:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 81ec 	beq.w	80028e2 <HAL_PCD_IRQHandler+0x53e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800250a:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800250e:	f043 030b 	orr.w	r3, r3, #11
 8002512:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002516:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002518:	f043 030b 	orr.w	r3, r3, #11
 800251c:	646b      	str	r3, [r5, #68]	; 0x44
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800251e:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002522:	7c21      	ldrb	r1, [r4, #16]
 8002524:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002526:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800252a:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800252e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002532:	f001 fc79 	bl	8003e28 <USB_EP0_OutStart>
                             (uint8_t *)hpcd->Setup);

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002536:	6822      	ldr	r2, [r4, #0]
 8002538:	6953      	ldr	r3, [r2, #20]
 800253a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002540:	6820      	ldr	r0, [r4, #0]
 8002542:	f001 fc2d 	bl	8003da0 <USB_ReadInterrupts>
 8002546:	0487      	lsls	r7, r0, #18
 8002548:	d516      	bpl.n	8002578 <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800254a:	6820      	ldr	r0, [r4, #0]
 800254c:	f001 fc5b 	bl	8003e06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002550:	6820      	ldr	r0, [r4, #0]
 8002552:	f001 f97b 	bl	800384c <USB_GetDevSpeed>
 8002556:	60e0      	str	r0, [r4, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002558:	6825      	ldr	r5, [r4, #0]
 800255a:	f000 fda5 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 800255e:	7b22      	ldrb	r2, [r4, #12]
 8002560:	4601      	mov	r1, r0
 8002562:	4628      	mov	r0, r5
 8002564:	f000 fffc 	bl	8003560 <USB_SetTurnaroundTime>
                                  (uint8_t)hpcd->Init.speed);

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002568:	4620      	mov	r0, r4
 800256a:	f002 fe34 	bl	80051d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	6953      	ldr	r3, [r2, #20]
 8002572:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002576:	6153      	str	r3, [r2, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002578:	6820      	ldr	r0, [r4, #0]
 800257a:	f001 fc11 	bl	8003da0 <USB_ReadInterrupts>
 800257e:	0706      	lsls	r6, r0, #28
 8002580:	d507      	bpl.n	8002592 <HAL_PCD_IRQHandler+0x1ee>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002582:	4620      	mov	r0, r4
 8002584:	f002 fe23 	bl	80051ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002588:	6822      	ldr	r2, [r4, #0]
 800258a:	6953      	ldr	r3, [r2, #20]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002592:	6820      	ldr	r0, [r4, #0]
 8002594:	f001 fc04 	bl	8003da0 <USB_ReadInterrupts>
 8002598:	02c5      	lsls	r5, r0, #11
 800259a:	d508      	bpl.n	80025ae <HAL_PCD_IRQHandler+0x20a>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800259c:	2100      	movs	r1, #0
 800259e:	4620      	mov	r0, r4
 80025a0:	f002 fe35 	bl	800520e <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025a4:	6822      	ldr	r2, [r4, #0]
 80025a6:	6953      	ldr	r3, [r2, #20]
 80025a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ac:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025ae:	6820      	ldr	r0, [r4, #0]
 80025b0:	f001 fbf6 	bl	8003da0 <USB_ReadInterrupts>
 80025b4:	0280      	lsls	r0, r0, #10
 80025b6:	d508      	bpl.n	80025ca <HAL_PCD_IRQHandler+0x226>
      epnum = 0U;

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025b8:	2100      	movs	r1, #0
 80025ba:	4620      	mov	r0, r4
 80025bc:	f002 fe23 	bl	8005206 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025c0:	6822      	ldr	r2, [r4, #0]
 80025c2:	6953      	ldr	r3, [r2, #20]
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025ca:	6820      	ldr	r0, [r4, #0]
 80025cc:	f001 fbe8 	bl	8003da0 <USB_ReadInterrupts>
 80025d0:	0041      	lsls	r1, r0, #1
 80025d2:	d507      	bpl.n	80025e4 <HAL_PCD_IRQHandler+0x240>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025d4:	4620      	mov	r0, r4
 80025d6:	f002 fe1e 	bl	8005216 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025da:	6822      	ldr	r2, [r4, #0]
 80025dc:	6953      	ldr	r3, [r2, #20]
 80025de:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025e2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025e4:	6820      	ldr	r0, [r4, #0]
 80025e6:	f001 fbdb 	bl	8003da0 <USB_ReadInterrupts>
 80025ea:	0742      	lsls	r2, r0, #29
 80025ec:	d50a      	bpl.n	8002604 <HAL_PCD_IRQHandler+0x260>
    {
      temp = hpcd->Instance->GOTGINT;
 80025ee:	6823      	ldr	r3, [r4, #0]
 80025f0:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80025f2:	076b      	lsls	r3, r5, #29
 80025f4:	d502      	bpl.n	80025fc <HAL_PCD_IRQHandler+0x258>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80025f6:	4620      	mov	r0, r4
 80025f8:	f002 fe11 	bl	800521e <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80025fc:	6822      	ldr	r2, [r4, #0]
 80025fe:	6853      	ldr	r3, [r2, #4]
 8002600:	432b      	orrs	r3, r5
 8002602:	6053      	str	r3, [r2, #4]
    }
  }
}
 8002604:	b007      	add	sp, #28
 8002606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800260a:	2b06      	cmp	r3, #6
 800260c:	f47f af12 	bne.w	8002434 <HAL_PCD_IRQHandler+0x90>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002610:	2208      	movs	r2, #8
 8002612:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8002616:	4630      	mov	r0, r6
 8002618:	f001 fb34 	bl	8003c84 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800261c:	231c      	movs	r3, #28
 800261e:	fb03 4505 	mla	r5, r3, r5, r4
 8002622:	f3c7 170a 	ubfx	r7, r7, #4, #11
 8002626:	f8d5 3214 	ldr.w	r3, [r5, #532]	; 0x214
 800262a:	441f      	add	r7, r3
 800262c:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
 8002630:	e700      	b.n	8002434 <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002632:	6820      	ldr	r0, [r4, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002634:	f8df b2c4 	ldr.w	fp, [pc, #708]	; 80028fc <HAL_PCD_IRQHandler+0x558>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002638:	f001 fbb6 	bl	8003da8 <USB_ReadDevAllOutEpInterrupt>
 800263c:	f506 6730 	add.w	r7, r6, #2816	; 0xb00
 8002640:	9003      	str	r0, [sp, #12]
      while (ep_intr != 0U)
 8002642:	46a2      	mov	sl, r4
      epnum = 0U;
 8002644:	2500      	movs	r5, #0
      while (ep_intr != 0U)
 8002646:	9b03      	ldr	r3, [sp, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	f43f aefe 	beq.w	800244a <HAL_PCD_IRQHandler+0xa6>
        if ((ep_intr & 0x1U) != 0U)
 800264e:	9b03      	ldr	r3, [sp, #12]
 8002650:	07d8      	lsls	r0, r3, #31
 8002652:	d556      	bpl.n	8002702 <HAL_PCD_IRQHandler+0x35e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002654:	fa5f f985 	uxtb.w	r9, r5
 8002658:	6820      	ldr	r0, [r4, #0]
 800265a:	4649      	mov	r1, r9
 800265c:	f001 fbb4 	bl	8003dc8 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002660:	f010 0f01 	tst.w	r0, #1
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002664:	4680      	mov	r8, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002666:	d01a      	beq.n	800269e <HAL_PCD_IRQHandler+0x2fa>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002668:	6820      	ldr	r0, [r4, #0]
  if (hpcd->Init.dma_enable == 1U)
 800266a:	6921      	ldr	r1, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800266c:	f500 6c30 	add.w	ip, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002670:	2201      	movs	r2, #1
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002672:	eb0c 1c45 	add.w	ip, ip, r5, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002676:	60ba      	str	r2, [r7, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002678:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800267a:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800267c:	f8dc 2008 	ldr.w	r2, [ip, #8]
  if (hpcd->Init.dma_enable == 1U)
 8002680:	d166      	bne.n	8002750 <HAL_PCD_IRQHandler+0x3ac>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002682:	0711      	lsls	r1, r2, #28
 8002684:	d506      	bpl.n	8002694 <HAL_PCD_IRQHandler+0x2f0>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002686:	455b      	cmp	r3, fp
 8002688:	d909      	bls.n	800269e <HAL_PCD_IRQHandler+0x2fa>
 800268a:	0410      	lsls	r0, r2, #16
 800268c:	d507      	bpl.n	800269e <HAL_PCD_IRQHandler+0x2fa>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800268e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002692:	e002      	b.n	800269a <HAL_PCD_IRQHandler+0x2f6>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002694:	0691      	lsls	r1, r2, #26
 8002696:	d53c      	bpl.n	8002712 <HAL_PCD_IRQHandler+0x36e>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002698:	2320      	movs	r3, #32
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800269a:	f8cc 3008 	str.w	r3, [ip, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800269e:	f018 0f08 	tst.w	r8, #8
 80026a2:	d01e      	beq.n	80026e2 <HAL_PCD_IRQHandler+0x33e>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a4:	6823      	ldr	r3, [r4, #0]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80026a6:	2208      	movs	r2, #8
 80026a8:	60ba      	str	r2, [r7, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026b0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b4:	455a      	cmp	r2, fp
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026b6:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026b8:	d904      	bls.n	80026c4 <HAL_PCD_IRQHandler+0x320>
 80026ba:	0409      	lsls	r1, r1, #16
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026bc:	bf44      	itt	mi
 80026be:	f44f 4100 	movmi.w	r1, #32768	; 0x8000
 80026c2:	6099      	strmi	r1, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80026c4:	4620      	mov	r0, r4
 80026c6:	9204      	str	r2, [sp, #16]
 80026c8:	f002 fd6a 	bl	80051a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80026cc:	9a04      	ldr	r2, [sp, #16]
 80026ce:	455a      	cmp	r2, fp
 80026d0:	d907      	bls.n	80026e2 <HAL_PCD_IRQHandler+0x33e>
 80026d2:	6921      	ldr	r1, [r4, #16]
 80026d4:	2901      	cmp	r1, #1
 80026d6:	d104      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x33e>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026d8:	6820      	ldr	r0, [r4, #0]
 80026da:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80026de:	f001 fba3 	bl	8003e28 <USB_EP0_OutStart>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80026e2:	f018 0f10 	tst.w	r8, #16
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80026e6:	bf1c      	itt	ne
 80026e8:	2310      	movne	r3, #16
 80026ea:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026ec:	f018 0f20 	tst.w	r8, #32
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026f0:	bf1c      	itt	ne
 80026f2:	2320      	movne	r3, #32
 80026f4:	60bb      	strne	r3, [r7, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026f6:	f418 5f00 	tst.w	r8, #8192	; 0x2000
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026fa:	bf1c      	itt	ne
 80026fc:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8002700:	60bb      	strne	r3, [r7, #8]
        ep_intr >>= 1U;
 8002702:	9b03      	ldr	r3, [sp, #12]
 8002704:	085b      	lsrs	r3, r3, #1
        epnum++;
 8002706:	3501      	adds	r5, #1
        ep_intr >>= 1U;
 8002708:	9303      	str	r3, [sp, #12]
 800270a:	3720      	adds	r7, #32
 800270c:	f10a 0a1c 	add.w	sl, sl, #28
 8002710:	e799      	b.n	8002646 <HAL_PCD_IRQHandler+0x2a2>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002712:	f012 0f28 	tst.w	r2, #40	; 0x28
 8002716:	d1c2      	bne.n	800269e <HAL_PCD_IRQHandler+0x2fa>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002718:	455b      	cmp	r3, fp
 800271a:	d901      	bls.n	8002720 <HAL_PCD_IRQHandler+0x37c>
 800271c:	0412      	lsls	r2, r2, #16
 800271e:	d4b6      	bmi.n	800268e <HAL_PCD_IRQHandler+0x2ea>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002720:	f8dc 2010 	ldr.w	r2, [ip, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 8002724:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002728:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800272c:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800272e:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002732:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 8002736:	440a      	add	r2, r1
 8002738:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800273c:	b995      	cbnz	r5, 8002764 <HAL_PCD_IRQHandler+0x3c0>
 800273e:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8002742:	b97a      	cbnz	r2, 8002764 <HAL_PCD_IRQHandler+0x3c0>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002744:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002748:	2101      	movs	r1, #1
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800274a:	f001 fb6d 	bl	8003e28 <USB_EP0_OutStart>
 800274e:	e009      	b.n	8002764 <HAL_PCD_IRQHandler+0x3c0>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002750:	4969      	ldr	r1, [pc, #420]	; (80028f8 <HAL_PCD_IRQHandler+0x554>)
 8002752:	428b      	cmp	r3, r1
 8002754:	d10b      	bne.n	800276e <HAL_PCD_IRQHandler+0x3ca>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002756:	0413      	lsls	r3, r2, #16
 8002758:	d499      	bmi.n	800268e <HAL_PCD_IRQHandler+0x2ea>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800275a:	0690      	lsls	r0, r2, #26
 800275c:	d502      	bpl.n	8002764 <HAL_PCD_IRQHandler+0x3c0>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800275e:	2220      	movs	r2, #32
 8002760:	f8cc 2008 	str.w	r2, [ip, #8]
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002764:	4649      	mov	r1, r9
 8002766:	4620      	mov	r0, r4
 8002768:	f002 fd20 	bl	80051ac <HAL_PCD_DataOutStageCallback>
 800276c:	e797      	b.n	800269e <HAL_PCD_IRQHandler+0x2fa>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800276e:	2d00      	cmp	r5, #0
 8002770:	d1f8      	bne.n	8002764 <HAL_PCD_IRQHandler+0x3c0>
 8002772:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 8002776:	2a00      	cmp	r2, #0
 8002778:	d1f4      	bne.n	8002764 <HAL_PCD_IRQHandler+0x3c0>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800277a:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800277e:	4629      	mov	r1, r5
 8002780:	e7e3      	b.n	800274a <HAL_PCD_IRQHandler+0x3a6>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002782:	9b03      	ldr	r3, [sp, #12]
 8002784:	07da      	lsls	r2, r3, #31
 8002786:	f140 8083 	bpl.w	8002890 <HAL_PCD_IRQHandler+0x4ec>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800278a:	fa5f fb88 	uxtb.w	fp, r8
 800278e:	6820      	ldr	r0, [r4, #0]
 8002790:	4659      	mov	r1, fp
 8002792:	f001 fb22 	bl	8003dda <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002796:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002798:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800279a:	d521      	bpl.n	80027e0 <HAL_PCD_IRQHandler+0x43c>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800279c:	f8d6 3834 	ldr.w	r3, [r6, #2100]	; 0x834
            if (hpcd->Init.dma_enable == 1U)
 80027a0:	6921      	ldr	r1, [r4, #16]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027a2:	2001      	movs	r0, #1
 80027a4:	f008 020f 	and.w	r2, r8, #15
 80027a8:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ac:	ea23 0302 	bic.w	r3, r3, r2
            if (hpcd->Init.dma_enable == 1U)
 80027b0:	4281      	cmp	r1, r0
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027b2:	f8c6 3834 	str.w	r3, [r6, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027b6:	f8c9 0008 	str.w	r0, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 80027ba:	d10d      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x434>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027bc:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 80027c0:	4413      	add	r3, r2
 80027c2:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027c4:	f1b8 0f00 	cmp.w	r8, #0
 80027c8:	d106      	bne.n	80027d8 <HAL_PCD_IRQHandler+0x434>
 80027ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80027cc:	b923      	cbnz	r3, 80027d8 <HAL_PCD_IRQHandler+0x434>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 80027d4:	f001 fb28 	bl	8003e28 <USB_EP0_OutStart>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80027d8:	4659      	mov	r1, fp
 80027da:	4620      	mov	r0, r4
 80027dc:	f002 fcef 	bl	80051be <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80027e0:	0738      	lsls	r0, r7, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80027e2:	bf44      	itt	mi
 80027e4:	2308      	movmi	r3, #8
 80027e6:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80027ea:	06f9      	lsls	r1, r7, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80027ec:	bf44      	itt	mi
 80027ee:	2310      	movmi	r3, #16
 80027f0:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80027f4:	067a      	lsls	r2, r7, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80027f6:	bf44      	itt	mi
 80027f8:	2340      	movmi	r3, #64	; 0x40
 80027fa:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80027fe:	07bb      	lsls	r3, r7, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002800:	bf44      	itt	mi
 8002802:	2302      	movmi	r3, #2
 8002804:	f8c9 3008 	strmi.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002808:	0638      	lsls	r0, r7, #24
 800280a:	d541      	bpl.n	8002890 <HAL_PCD_IRQHandler+0x4ec>
  if (ep->xfer_count > ep->xfer_len)
 800280c:	e9d5 3214 	ldrd	r3, r2, [r5, #80]	; 0x50
 8002810:	429a      	cmp	r2, r3
 8002812:	d83d      	bhi.n	8002890 <HAL_PCD_IRQHandler+0x4ec>
  len = ep->xfer_len - ep->xfer_count;
 8002814:	1a9b      	subs	r3, r3, r2
  len32b = (len + 3U) / 4U;
 8002816:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002818:	f8d4 a000 	ldr.w	sl, [r4]
  len32b = (len + 3U) / 4U;
 800281c:	4293      	cmp	r3, r2
 800281e:	bf28      	it	cs
 8002820:	4613      	movcs	r3, r2
 8002822:	3303      	adds	r3, #3
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	9304      	str	r3, [sp, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002828:	f50a 6310 	add.w	r3, sl, #2304	; 0x900
 800282c:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 8002830:	9305      	str	r3, [sp, #20]
 8002832:	9b05      	ldr	r3, [sp, #20]
 8002834:	9904      	ldr	r1, [sp, #16]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	b292      	uxth	r2, r2
 800283a:	428a      	cmp	r2, r1
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800283c:	e9d5 7314 	ldrd	r7, r3, [r5, #80]	; 0x50
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002840:	d324      	bcc.n	800288c <HAL_PCD_IRQHandler+0x4e8>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002842:	429f      	cmp	r7, r3
 8002844:	d80b      	bhi.n	800285e <HAL_PCD_IRQHandler+0x4ba>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002846:	f8da 3834 	ldr.w	r3, [sl, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800284a:	f008 020f 	and.w	r2, r8, #15
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f202 	lsl.w	r2, r1, r2
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002854:	ea23 0302 	bic.w	r3, r3, r2
 8002858:	f8ca 3834 	str.w	r3, [sl, #2100]	; 0x834
 800285c:	e018      	b.n	8002890 <HAL_PCD_IRQHandler+0x4ec>
    len = ep->xfer_len - ep->xfer_count;
 800285e:	1aff      	subs	r7, r7, r3
    if (len > ep->maxpacket)
 8002860:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002862:	429f      	cmp	r7, r3
 8002864:	bf28      	it	cs
 8002866:	461f      	movcs	r7, r3
    len32b = (len + 3U) / 4U;
 8002868:	1cfb      	adds	r3, r7, #3
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	9304      	str	r3, [sp, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800286e:	7c23      	ldrb	r3, [r4, #16]
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8002874:	b2bb      	uxth	r3, r7
 8002876:	465a      	mov	r2, fp
 8002878:	4650      	mov	r0, sl
 800287a:	f001 f901 	bl	8003a80 <USB_WritePacket>
    ep->xfer_buff  += len;
 800287e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8002880:	443b      	add	r3, r7
 8002882:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 8002884:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8002886:	443b      	add	r3, r7
 8002888:	656b      	str	r3, [r5, #84]	; 0x54
 800288a:	e7d2      	b.n	8002832 <HAL_PCD_IRQHandler+0x48e>
  if (ep->xfer_len <= ep->xfer_count)
 800288c:	429f      	cmp	r7, r3
 800288e:	d9da      	bls.n	8002846 <HAL_PCD_IRQHandler+0x4a2>
        ep_intr >>= 1U;
 8002890:	9b03      	ldr	r3, [sp, #12]
 8002892:	085b      	lsrs	r3, r3, #1
        epnum++;
 8002894:	f108 0801 	add.w	r8, r8, #1
        ep_intr >>= 1U;
 8002898:	9303      	str	r3, [sp, #12]
 800289a:	351c      	adds	r5, #28
 800289c:	f109 0920 	add.w	r9, r9, #32
 80028a0:	e5e1      	b.n	8002466 <HAL_PCD_IRQHandler+0xc2>
        HAL_PCD_ResumeCallback(hpcd);
 80028a2:	4620      	mov	r0, r4
 80028a4:	f002 fcab 	bl	80051fe <HAL_PCD_ResumeCallback>
 80028a8:	e5f7      	b.n	800249a <HAL_PCD_IRQHandler+0xf6>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028aa:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80028b2:	601a      	str	r2, [r3, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80028ba:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028bc:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028c4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80028c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028d0:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80028d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028d8:	9a02      	ldr	r2, [sp, #8]
 80028da:	3201      	adds	r2, #1
 80028dc:	9202      	str	r2, [sp, #8]
 80028de:	3320      	adds	r3, #32
 80028e0:	e606      	b.n	80024f0 <HAL_PCD_IRQHandler+0x14c>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028e2:	696b      	ldr	r3, [r5, #20]
 80028e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028ec:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028ee:	692b      	ldr	r3, [r5, #16]
 80028f0:	f043 030b 	orr.w	r3, r3, #11
 80028f4:	612b      	str	r3, [r5, #16]
 80028f6:	e612      	b.n	800251e <HAL_PCD_IRQHandler+0x17a>
 80028f8:	4f54310a 	.word	0x4f54310a
 80028fc:	4f54300a 	.word	0x4f54300a

08002900 <HAL_PCD_SetAddress>:
{
 8002900:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8002902:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8002906:	2a01      	cmp	r2, #1
{
 8002908:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800290a:	d00b      	beq.n	8002924 <HAL_PCD_SetAddress+0x24>
 800290c:	2201      	movs	r2, #1
 800290e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002912:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002916:	6800      	ldr	r0, [r0, #0]
 8002918:	f001 fa16 	bl	8003d48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800291c:	2000      	movs	r0, #0
 800291e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002922:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8002924:	2002      	movs	r0, #2
 8002926:	e7fc      	b.n	8002922 <HAL_PCD_SetAddress+0x22>

08002928 <HAL_PCD_EP_Open>:
{
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	f001 060f 	and.w	r6, r1, #15
 800292e:	ebc6 04c6 	rsb	r4, r6, r6, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 8002932:	f011 0f80 	tst.w	r1, #128	; 0x80
{
 8002936:	4605      	mov	r5, r0
 8002938:	ea4f 0484 	mov.w	r4, r4, lsl #2
 800293c:	f04f 001c 	mov.w	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8002940:	d01f      	beq.n	8002982 <HAL_PCD_EP_Open+0x5a>
    ep->is_in = 1U;
 8002942:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002946:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 800294a:	2401      	movs	r4, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294c:	4429      	add	r1, r5
    ep->is_in = 1U;
 800294e:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
  ep->maxpacket = ep_mps;
 8002952:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8002954:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002956:	700e      	strb	r6, [r1, #0]
  ep->type = ep_type;
 8002958:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800295a:	b102      	cbz	r2, 800295e <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800295c:	80ce      	strh	r6, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800295e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8002960:	bf04      	itt	eq
 8002962:	2300      	moveq	r3, #0
 8002964:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8002966:	f895 33bc 	ldrb.w	r3, [r5, #956]	; 0x3bc
 800296a:	2b01      	cmp	r3, #1
 800296c:	d012      	beq.n	8002994 <HAL_PCD_EP_Open+0x6c>
 800296e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002970:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 8002972:	f885 33bc 	strb.w	r3, [r5, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002976:	f000 ff74 	bl	8003862 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800297a:	2000      	movs	r0, #0
 800297c:	f885 03bc 	strb.w	r0, [r5, #956]	; 0x3bc
}
 8002980:	bd70      	pop	{r4, r5, r6, pc}
    ep->is_in = 0U;
 8002982:	fb00 5006 	mla	r0, r0, r6, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002986:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 800298a:	2400      	movs	r4, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800298c:	4429      	add	r1, r5
    ep->is_in = 0U;
 800298e:	f880 41fd 	strb.w	r4, [r0, #509]	; 0x1fd
 8002992:	e7de      	b.n	8002952 <HAL_PCD_EP_Open+0x2a>
  __HAL_LOCK(hpcd);
 8002994:	2002      	movs	r0, #2
 8002996:	e7f3      	b.n	8002980 <HAL_PCD_EP_Open+0x58>

08002998 <HAL_PCD_EP_Close>:
{
 8002998:	b510      	push	{r4, lr}
 800299a:	4604      	mov	r4, r0
 800299c:	f001 000f 	and.w	r0, r1, #15
 80029a0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
  if ((ep_addr & 0x80U) == 0x80U)
 80029a4:	f011 0f80 	tst.w	r1, #128	; 0x80
 80029a8:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80029ac:	f04f 021c 	mov.w	r2, #28
 80029b0:	d016      	beq.n	80029e0 <HAL_PCD_EP_Close+0x48>
    ep->is_in = 1U;
 80029b2:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029b6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 80029ba:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029bc:	4421      	add	r1, r4
    ep->is_in = 1U;
 80029be:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 80029c2:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 80029c4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d012      	beq.n	80029f2 <HAL_PCD_EP_Close+0x5a>
 80029cc:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029ce:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80029d0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80029d4:	f000 ff84 	bl	80038e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029d8:	2000      	movs	r0, #0
 80029da:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 80029de:	bd10      	pop	{r4, pc}
    ep->is_in = 0U;
 80029e0:	fb02 4200 	mla	r2, r2, r0, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e4:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 80029e8:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029ea:	4421      	add	r1, r4
    ep->is_in = 0U;
 80029ec:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 80029f0:	e7e7      	b.n	80029c2 <HAL_PCD_EP_Close+0x2a>
  __HAL_LOCK(hpcd);
 80029f2:	2002      	movs	r0, #2
 80029f4:	e7f3      	b.n	80029de <HAL_PCD_EP_Close+0x46>

080029f6 <HAL_PCD_EP_Receive>:
{
 80029f6:	b538      	push	{r3, r4, r5, lr}
 80029f8:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029fc:	241c      	movs	r4, #28
 80029fe:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8002a02:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a06:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8002a0a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8002a0e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8002a10:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8002a14:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8002a18:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a1c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  if (hpcd->Init.dma_enable == 1U)
 8002a20:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a22:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002a24:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002a26:	bf08      	it	eq
 8002a28:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a2c:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a2e:	b91d      	cbnz	r5, 8002a38 <HAL_PCD_EP_Receive+0x42>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a30:	f000 ffac 	bl	800398c <USB_EP0StartXfer>
}
 8002a34:	2000      	movs	r0, #0
 8002a36:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a38:	f001 f836 	bl	8003aa8 <USB_EPStartXfer>
 8002a3c:	e7fa      	b.n	8002a34 <HAL_PCD_EP_Receive+0x3e>

08002a3e <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002a3e:	f001 010f 	and.w	r1, r1, #15
 8002a42:	231c      	movs	r3, #28
 8002a44:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002a48:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
 8002a4c:	4770      	bx	lr

08002a4e <HAL_PCD_EP_Transmit>:
{
 8002a4e:	b538      	push	{r3, r4, r5, lr}
 8002a50:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a54:	241c      	movs	r4, #28
 8002a56:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8002a5a:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a5e:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8002a60:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8002a66:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8002a68:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8002a6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a6e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (hpcd->Init.dma_enable == 1U)
 8002a72:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a74:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 8002a76:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 8002a78:	bf08      	it	eq
 8002a7a:	64e2      	streq	r2, [r4, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a7c:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a7e:	b91d      	cbnz	r5, 8002a88 <HAL_PCD_EP_Transmit+0x3a>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a80:	f000 ff84 	bl	800398c <USB_EP0StartXfer>
}
 8002a84:	2000      	movs	r0, #0
 8002a86:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a88:	f001 f80e 	bl	8003aa8 <USB_EPStartXfer>
 8002a8c:	e7fa      	b.n	8002a84 <HAL_PCD_EP_Transmit+0x36>

08002a8e <HAL_PCD_EP_SetStall>:
{
 8002a8e:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a90:	6843      	ldr	r3, [r0, #4]
 8002a92:	f001 050f 	and.w	r5, r1, #15
 8002a96:	429d      	cmp	r5, r3
{
 8002a98:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a9a:	d82c      	bhi.n	8002af6 <HAL_PCD_EP_SetStall+0x68>
  if ((0x80U & ep_addr) == 0x80U)
 8002a9c:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002aa0:	f04f 001c 	mov.w	r0, #28
 8002aa4:	d01e      	beq.n	8002ae4 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8002aa6:	fb00 4205 	mla	r2, r0, r5, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aaa:	fb00 4105 	mla	r1, r0, r5, r4
    ep->is_in = 1U;
 8002aae:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab0:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 8002ab2:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  ep->is_stall = 1U;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	708b      	strb	r3, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aba:	700d      	strb	r5, [r1, #0]
  __HAL_LOCK(hpcd);
 8002abc:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d01a      	beq.n	8002afa <HAL_PCD_EP_SetStall+0x6c>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ac4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002ac6:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002aca:	f001 f8e9 	bl	8003ca0 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ace:	b92d      	cbnz	r5, 8002adc <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ad0:	7c21      	ldrb	r1, [r4, #16]
 8002ad2:	6820      	ldr	r0, [r4, #0]
 8002ad4:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 8002ad8:	f001 f9a6 	bl	8003e28 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 8002ae2:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae4:	fb00 4301 	mla	r3, r0, r1, r4
    ep->is_in = 0U;
 8002ae8:	461a      	mov	r2, r3
    ep = &hpcd->OUT_ep[ep_addr];
 8002aea:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f882 31fd 	strb.w	r3, [r2, #509]	; 0x1fd
 8002af4:	e7df      	b.n	8002ab6 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8002af6:	2001      	movs	r0, #1
 8002af8:	e7f3      	b.n	8002ae2 <HAL_PCD_EP_SetStall+0x54>
  __HAL_LOCK(hpcd);
 8002afa:	2002      	movs	r0, #2
 8002afc:	e7f1      	b.n	8002ae2 <HAL_PCD_EP_SetStall+0x54>

08002afe <HAL_PCD_EP_ClrStall>:
{
 8002afe:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b00:	6843      	ldr	r3, [r0, #4]
 8002b02:	f001 020f 	and.w	r2, r1, #15
 8002b06:	429a      	cmp	r2, r3
{
 8002b08:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b0a:	d82a      	bhi.n	8002b62 <HAL_PCD_EP_ClrStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 8002b0c:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
 8002b10:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002b14:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8002b18:	f04f 001c 	mov.w	r0, #28
 8002b1c:	d018      	beq.n	8002b50 <HAL_PCD_EP_ClrStall+0x52>
    ep->is_in = 1U;
 8002b1e:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b22:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    ep->is_in = 1U;
 8002b26:	2301      	movs	r3, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b28:	4421      	add	r1, r4
    ep->is_in = 1U;
 8002b2a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  ep->is_stall = 0U;
 8002b2e:	2500      	movs	r5, #0
 8002b30:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b32:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8002b34:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d014      	beq.n	8002b66 <HAL_PCD_EP_ClrStall+0x68>
 8002b3c:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b3e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8002b40:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b44:	f001 f8d7 	bl	8003cf6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b48:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8002b4c:	4628      	mov	r0, r5
}
 8002b4e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8002b50:	fb00 4002 	mla	r0, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b54:	f503 71fe 	add.w	r1, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8002b58:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b5a:	4421      	add	r1, r4
    ep->is_in = 0U;
 8002b5c:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
 8002b60:	e7e5      	b.n	8002b2e <HAL_PCD_EP_ClrStall+0x30>
    return HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
 8002b64:	e7f3      	b.n	8002b4e <HAL_PCD_EP_ClrStall+0x50>
  __HAL_LOCK(hpcd);
 8002b66:	2002      	movs	r0, #2
 8002b68:	e7f1      	b.n	8002b4e <HAL_PCD_EP_ClrStall+0x50>

08002b6a <HAL_PCDEx_SetTxFiFo>:
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b6a:	6800      	ldr	r0, [r0, #0]
{
 8002b6c:	b570      	push	{r4, r5, r6, lr}

  if (fifo == 0U)
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b6e:	0412      	lsls	r2, r2, #16
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002b70:	6a44      	ldr	r4, [r0, #36]	; 0x24
  if (fifo == 0U)
 8002b72:	b919      	cbnz	r1, 8002b7c <HAL_PCDEx_SetTxFiFo+0x12>
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002b74:	4322      	orrs	r2, r4
 8002b76:	6282      	str	r2, [r0, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8002b78:	2000      	movs	r0, #0
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8002b7e:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002b80:	eb04 4413 	add.w	r4, r4, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	1c5e      	adds	r6, r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	429d      	cmp	r5, r3
 8002b8c:	d805      	bhi.n	8002b9a <HAL_PCDEx_SetTxFiFo+0x30>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002b8e:	313f      	adds	r1, #63	; 0x3f
 8002b90:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8002b94:	4322      	orrs	r2, r4
 8002b96:	6042      	str	r2, [r0, #4]
 8002b98:	e7ee      	b.n	8002b78 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002b9a:	3340      	adds	r3, #64	; 0x40
 8002b9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8002ba6:	4633      	mov	r3, r6
 8002ba8:	e7ed      	b.n	8002b86 <HAL_PCDEx_SetTxFiFo+0x1c>

08002baa <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8002baa:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8002bac:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8002bae:	6259      	str	r1, [r3, #36]	; 0x24
}
 8002bb0:	4770      	bx	lr

08002bb2 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bb8:	4604      	mov	r4, r0
 8002bba:	b340      	cbz	r0, 8002c0e <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bbc:	6803      	ldr	r3, [r0, #0]
 8002bbe:	07dd      	lsls	r5, r3, #31
 8002bc0:	d410      	bmi.n	8002be4 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	0798      	lsls	r0, r3, #30
 8002bc6:	d45e      	bmi.n	8002c86 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	071a      	lsls	r2, r3, #28
 8002bcc:	f100 80a0 	bmi.w	8002d10 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	075b      	lsls	r3, r3, #29
 8002bd4:	f100 80c0 	bmi.w	8002d58 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd8:	69a0      	ldr	r0, [r4, #24]
 8002bda:	2800      	cmp	r0, #0
 8002bdc:	f040 8128 	bne.w	8002e30 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002be0:	2000      	movs	r0, #0
 8002be2:	e02b      	b.n	8002c3c <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be4:	4b8f      	ldr	r3, [pc, #572]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	f002 020c 	and.w	r2, r2, #12
 8002bec:	2a04      	cmp	r2, #4
 8002bee:	d007      	beq.n	8002c00 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf6:	2a08      	cmp	r2, #8
 8002bf8:	d10b      	bne.n	8002c12 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	0251      	lsls	r1, r2, #9
 8002bfe:	d508      	bpl.n	8002c12 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	039a      	lsls	r2, r3, #14
 8002c06:	d5dc      	bpl.n	8002bc2 <HAL_RCC_OscConfig+0xe>
 8002c08:	6863      	ldr	r3, [r4, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1d9      	bne.n	8002bc2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8002c0e:	2001      	movs	r0, #1
 8002c10:	e014      	b.n	8002c3c <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	6862      	ldr	r2, [r4, #4]
 8002c14:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002c18:	d113      	bne.n	8002c42 <HAL_RCC_OscConfig+0x8e>
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c20:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002c22:	f7fe ff2d 	bl	8001a80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4e7f      	ldr	r6, [pc, #508]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002c28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	6833      	ldr	r3, [r6, #0]
 8002c2c:	039b      	lsls	r3, r3, #14
 8002c2e:	d4c8      	bmi.n	8002bc2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c30:	f7fe ff26 	bl	8001a80 <HAL_GetTick>
 8002c34:	1b40      	subs	r0, r0, r5
 8002c36:	2864      	cmp	r0, #100	; 0x64
 8002c38:	d9f7      	bls.n	8002c2a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8002c3a:	2003      	movs	r0, #3
}
 8002c3c:	b002      	add	sp, #8
 8002c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c42:	4d78      	ldr	r5, [pc, #480]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c44:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_OscConfig+0xa8>
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	602b      	str	r3, [r5, #0]
 8002c52:	682b      	ldr	r3, [r5, #0]
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c5a:	e7e2      	b.n	8002c22 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c60:	602b      	str	r3, [r5, #0]
 8002c62:	682b      	ldr	r3, [r5, #0]
 8002c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c68:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c6a:	2a00      	cmp	r2, #0
 8002c6c:	d1d9      	bne.n	8002c22 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8002c6e:	f7fe ff07 	bl	8001a80 <HAL_GetTick>
 8002c72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c74:	682b      	ldr	r3, [r5, #0]
 8002c76:	039f      	lsls	r7, r3, #14
 8002c78:	d5a3      	bpl.n	8002bc2 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7a:	f7fe ff01 	bl	8001a80 <HAL_GetTick>
 8002c7e:	1b80      	subs	r0, r0, r6
 8002c80:	2864      	cmp	r0, #100	; 0x64
 8002c82:	d9f7      	bls.n	8002c74 <HAL_RCC_OscConfig+0xc0>
 8002c84:	e7d9      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	f012 0f0c 	tst.w	r2, #12
 8002c8e:	d007      	beq.n	8002ca0 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c96:	2a08      	cmp	r2, #8
 8002c98:	d111      	bne.n	8002cbe <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	025e      	lsls	r6, r3, #9
 8002c9e:	d40e      	bmi.n	8002cbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ca0:	4a60      	ldr	r2, [pc, #384]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	079d      	lsls	r5, r3, #30
 8002ca6:	d502      	bpl.n	8002cae <HAL_RCC_OscConfig+0xfa>
 8002ca8:	68e3      	ldr	r3, [r4, #12]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d1af      	bne.n	8002c0e <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	6813      	ldr	r3, [r2, #0]
 8002cb0:	6921      	ldr	r1, [r4, #16]
 8002cb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cba:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cbc:	e784      	b.n	8002bc8 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cbe:	68e2      	ldr	r2, [r4, #12]
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	b1b2      	cbz	r2, 8002cf2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cc8:	f7fe feda 	bl	8001a80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ccc:	4d55      	ldr	r5, [pc, #340]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002cce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd0:	682b      	ldr	r3, [r5, #0]
 8002cd2:	0798      	lsls	r0, r3, #30
 8002cd4:	d507      	bpl.n	8002ce6 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd6:	682b      	ldr	r3, [r5, #0]
 8002cd8:	6922      	ldr	r2, [r4, #16]
 8002cda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cde:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ce2:	602b      	str	r3, [r5, #0]
 8002ce4:	e770      	b.n	8002bc8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ce6:	f7fe fecb 	bl	8001a80 <HAL_GetTick>
 8002cea:	1b80      	subs	r0, r0, r6
 8002cec:	2802      	cmp	r0, #2
 8002cee:	d9ef      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x11c>
 8002cf0:	e7a3      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8002cf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cf4:	f7fe fec4 	bl	8001a80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cf8:	4e4a      	ldr	r6, [pc, #296]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8002cfa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfc:	6833      	ldr	r3, [r6, #0]
 8002cfe:	0799      	lsls	r1, r3, #30
 8002d00:	f57f af62 	bpl.w	8002bc8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe febc 	bl	8001a80 <HAL_GetTick>
 8002d08:	1b40      	subs	r0, r0, r5
 8002d0a:	2802      	cmp	r0, #2
 8002d0c:	d9f6      	bls.n	8002cfc <HAL_RCC_OscConfig+0x148>
 8002d0e:	e794      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d10:	6962      	ldr	r2, [r4, #20]
 8002d12:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <HAL_RCC_OscConfig+0x274>)
 8002d14:	b182      	cbz	r2, 8002d38 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8002d16:	2201      	movs	r2, #1
 8002d18:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002d1c:	f7fe feb0 	bl	8001a80 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d20:	4e40      	ldr	r6, [pc, #256]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002d22:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d24:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002d26:	079f      	lsls	r7, r3, #30
 8002d28:	f53f af52 	bmi.w	8002bd0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fea8 	bl	8001a80 <HAL_GetTick>
 8002d30:	1b40      	subs	r0, r0, r5
 8002d32:	2802      	cmp	r0, #2
 8002d34:	d9f6      	bls.n	8002d24 <HAL_RCC_OscConfig+0x170>
 8002d36:	e780      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8002d38:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fea0 	bl	8001a80 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	4e38      	ldr	r6, [pc, #224]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002d42:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002d46:	0798      	lsls	r0, r3, #30
 8002d48:	f57f af42 	bpl.w	8002bd0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d4c:	f7fe fe98 	bl	8001a80 <HAL_GetTick>
 8002d50:	1b40      	subs	r0, r0, r5
 8002d52:	2802      	cmp	r0, #2
 8002d54:	d9f6      	bls.n	8002d44 <HAL_RCC_OscConfig+0x190>
 8002d56:	e770      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d58:	4b32      	ldr	r3, [pc, #200]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d5c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002d60:	d128      	bne.n	8002db4 <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d62:	9201      	str	r2, [sp, #4]
 8002d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	9301      	str	r3, [sp, #4]
 8002d74:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d76:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	4d2c      	ldr	r5, [pc, #176]	; (8002e2c <HAL_RCC_OscConfig+0x278>)
 8002d7a:	682b      	ldr	r3, [r5, #0]
 8002d7c:	05d9      	lsls	r1, r3, #23
 8002d7e:	d51b      	bpl.n	8002db8 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d80:	68a3      	ldr	r3, [r4, #8]
 8002d82:	4d28      	ldr	r5, [pc, #160]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d127      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x224>
 8002d88:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d8a:	f043 0301 	orr.w	r3, r3, #1
 8002d8e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d90:	f7fe fe76 	bl	8001a80 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	4e23      	ldr	r6, [pc, #140]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8002d96:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d98:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d9c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002d9e:	079b      	lsls	r3, r3, #30
 8002da0:	d539      	bpl.n	8002e16 <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8002da2:	2f00      	cmp	r7, #0
 8002da4:	f43f af18 	beq.w	8002bd8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da8:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <HAL_RCC_OscConfig+0x270>)
 8002daa:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	; 0x40
 8002db2:	e711      	b.n	8002bd8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002db4:	2700      	movs	r7, #0
 8002db6:	e7df      	b.n	8002d78 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db8:	682b      	ldr	r3, [r5, #0]
 8002dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002dc0:	f7fe fe5e 	bl	8001a80 <HAL_GetTick>
 8002dc4:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	682b      	ldr	r3, [r5, #0]
 8002dc8:	05da      	lsls	r2, r3, #23
 8002dca:	d4d9      	bmi.n	8002d80 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7fe fe58 	bl	8001a80 <HAL_GetTick>
 8002dd0:	1b80      	subs	r0, r0, r6
 8002dd2:	2802      	cmp	r0, #2
 8002dd4:	d9f7      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x212>
 8002dd6:	e730      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d104      	bne.n	8002de6 <HAL_RCC_OscConfig+0x232>
 8002ddc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002dde:	f043 0304 	orr.w	r3, r3, #4
 8002de2:	672b      	str	r3, [r5, #112]	; 0x70
 8002de4:	e7d0      	b.n	8002d88 <HAL_RCC_OscConfig+0x1d4>
 8002de6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002de8:	f022 0201 	bic.w	r2, r2, #1
 8002dec:	672a      	str	r2, [r5, #112]	; 0x70
 8002dee:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002df0:	f022 0204 	bic.w	r2, r2, #4
 8002df4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ca      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8002dfa:	f7fe fe41 	bl	8001a80 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002e02:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002e06:	0798      	lsls	r0, r3, #30
 8002e08:	d5cb      	bpl.n	8002da2 <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e0a:	f7fe fe39 	bl	8001a80 <HAL_GetTick>
 8002e0e:	1b80      	subs	r0, r0, r6
 8002e10:	4540      	cmp	r0, r8
 8002e12:	d9f7      	bls.n	8002e04 <HAL_RCC_OscConfig+0x250>
 8002e14:	e711      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e16:	f7fe fe33 	bl	8001a80 <HAL_GetTick>
 8002e1a:	1b40      	subs	r0, r0, r5
 8002e1c:	4540      	cmp	r0, r8
 8002e1e:	d9bd      	bls.n	8002d9c <HAL_RCC_OscConfig+0x1e8>
 8002e20:	e70b      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
 8002e22:	bf00      	nop
 8002e24:	40023800 	.word	0x40023800
 8002e28:	42470000 	.word	0x42470000
 8002e2c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e30:	4d36      	ldr	r5, [pc, #216]	; (8002f0c <HAL_RCC_OscConfig+0x358>)
 8002e32:	68ab      	ldr	r3, [r5, #8]
 8002e34:	f003 030c 	and.w	r3, r3, #12
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d03d      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e3c:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <HAL_RCC_OscConfig+0x35c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002e42:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e44:	d12b      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8002e46:	f7fe fe1b 	bl	8001a80 <HAL_GetTick>
 8002e4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	0199      	lsls	r1, r3, #6
 8002e50:	d41f      	bmi.n	8002e92 <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e52:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e66:	0852      	lsrs	r2, r2, #1
 8002e68:	3a01      	subs	r2, #1
 8002e6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e6e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b27      	ldr	r3, [pc, #156]	; (8002f10 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e72:	4d26      	ldr	r5, [pc, #152]	; (8002f0c <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8002e74:	2201      	movs	r2, #1
 8002e76:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002e78:	f7fe fe02 	bl	8001a80 <HAL_GetTick>
 8002e7c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e7e:	682b      	ldr	r3, [r5, #0]
 8002e80:	019a      	lsls	r2, r3, #6
 8002e82:	f53f aead 	bmi.w	8002be0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e86:	f7fe fdfb 	bl	8001a80 <HAL_GetTick>
 8002e8a:	1b00      	subs	r0, r0, r4
 8002e8c:	2802      	cmp	r0, #2
 8002e8e:	d9f6      	bls.n	8002e7e <HAL_RCC_OscConfig+0x2ca>
 8002e90:	e6d3      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e92:	f7fe fdf5 	bl	8001a80 <HAL_GetTick>
 8002e96:	1b80      	subs	r0, r0, r6
 8002e98:	2802      	cmp	r0, #2
 8002e9a:	d9d7      	bls.n	8002e4c <HAL_RCC_OscConfig+0x298>
 8002e9c:	e6cd      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8002e9e:	f7fe fdef 	bl	8001a80 <HAL_GetTick>
 8002ea2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea4:	682b      	ldr	r3, [r5, #0]
 8002ea6:	019b      	lsls	r3, r3, #6
 8002ea8:	f57f ae9a 	bpl.w	8002be0 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eac:	f7fe fde8 	bl	8001a80 <HAL_GetTick>
 8002eb0:	1b00      	subs	r0, r0, r4
 8002eb2:	2802      	cmp	r0, #2
 8002eb4:	d9f6      	bls.n	8002ea4 <HAL_RCC_OscConfig+0x2f0>
 8002eb6:	e6c0      	b.n	8002c3a <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb8:	2801      	cmp	r0, #1
 8002eba:	f43f aebf 	beq.w	8002c3c <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8002ebe:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec0:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec2:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec6:	4291      	cmp	r1, r2
 8002ec8:	f47f aea1 	bne.w	8002c0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ecc:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ece:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed2:	428a      	cmp	r2, r1
 8002ed4:	f47f ae9b 	bne.w	8002c0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed8:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eda:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002ede:	401a      	ands	r2, r3
 8002ee0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002ee4:	f47f ae93 	bne.w	8002c0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002eea:	0852      	lsrs	r2, r2, #1
 8002eec:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002ef0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002ef6:	f47f ae8a 	bne.w	8002c0e <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002efa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002efc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f00:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002f04:	f43f ae6c 	beq.w	8002be0 <HAL_RCC_OscConfig+0x2c>
 8002f08:	e681      	b.n	8002c0e <HAL_RCC_OscConfig+0x5a>
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	42470000 	.word	0x42470000

08002f14 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f14:	4913      	ldr	r1, [pc, #76]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8002f16:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f18:	688b      	ldr	r3, [r1, #8]
 8002f1a:	f003 030c 	and.w	r3, r3, #12
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d01c      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x48>
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f26:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f28:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f2a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f2c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f30:	bf14      	ite	ne
 8002f32:	480d      	ldrne	r0, [pc, #52]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f34:	480d      	ldreq	r0, [pc, #52]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f36:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f3a:	bf18      	it	ne
 8002f3c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f3e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f42:	fba1 0100 	umull	r0, r1, r1, r0
 8002f46:	f7fd fd51 	bl	80009ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f4a:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x50>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002f52:	3301      	adds	r3, #1
 8002f54:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002f56:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002f5a:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x54>)
 8002f5e:	e7fc      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8002f62:	e7fa      	b.n	8002f5a <HAL_RCC_GetSysClockFreq+0x46>
 8002f64:	40023800 	.word	0x40023800
 8002f68:	007a1200 	.word	0x007a1200
 8002f6c:	00f42400 	.word	0x00f42400

08002f70 <HAL_RCC_ClockConfig>:
{
 8002f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f74:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002f76:	4604      	mov	r4, r0
 8002f78:	b910      	cbnz	r0, 8002f80 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002f7a:	2001      	movs	r0, #1
}
 8002f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f80:	4b44      	ldr	r3, [pc, #272]	; (8003094 <HAL_RCC_ClockConfig+0x124>)
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	f002 0207 	and.w	r2, r2, #7
 8002f88:	428a      	cmp	r2, r1
 8002f8a:	d328      	bcc.n	8002fde <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	0797      	lsls	r7, r2, #30
 8002f90:	d42d      	bmi.n	8002fee <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f92:	07d0      	lsls	r0, r2, #31
 8002f94:	d441      	bmi.n	800301a <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f96:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <HAL_RCC_ClockConfig+0x124>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	f002 0207 	and.w	r2, r2, #7
 8002f9e:	42aa      	cmp	r2, r5
 8002fa0:	d866      	bhi.n	8003070 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	0751      	lsls	r1, r2, #29
 8002fa6:	d46c      	bmi.n	8003082 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fa8:	0713      	lsls	r3, r2, #28
 8002faa:	d507      	bpl.n	8002fbc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fac:	4a3a      	ldr	r2, [pc, #232]	; (8003098 <HAL_RCC_ClockConfig+0x128>)
 8002fae:	6921      	ldr	r1, [r4, #16]
 8002fb0:	6893      	ldr	r3, [r2, #8]
 8002fb2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002fb6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002fba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fbc:	f7ff ffaa 	bl	8002f14 <HAL_RCC_GetSysClockFreq>
 8002fc0:	4b35      	ldr	r3, [pc, #212]	; (8003098 <HAL_RCC_ClockConfig+0x128>)
 8002fc2:	4a36      	ldr	r2, [pc, #216]	; (800309c <HAL_RCC_ClockConfig+0x12c>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002fca:	5cd3      	ldrb	r3, [r2, r3]
 8002fcc:	40d8      	lsrs	r0, r3
 8002fce:	4b34      	ldr	r3, [pc, #208]	; (80030a0 <HAL_RCC_ClockConfig+0x130>)
 8002fd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002fd2:	4b34      	ldr	r3, [pc, #208]	; (80030a4 <HAL_RCC_ClockConfig+0x134>)
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	f7fe fd0d 	bl	80019f4 <HAL_InitTick>
  return HAL_OK;
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e7ce      	b.n	8002f7c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fde:	b2ca      	uxtb	r2, r1
 8002fe0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	428b      	cmp	r3, r1
 8002fea:	d1c6      	bne.n	8002f7a <HAL_RCC_ClockConfig+0xa>
 8002fec:	e7ce      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fee:	4b2a      	ldr	r3, [pc, #168]	; (8003098 <HAL_RCC_ClockConfig+0x128>)
 8002ff0:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ff4:	bf1e      	ittt	ne
 8002ff6:	6899      	ldrne	r1, [r3, #8]
 8002ff8:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002ffc:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ffe:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003000:	bf42      	ittt	mi
 8003002:	6899      	ldrmi	r1, [r3, #8]
 8003004:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8003008:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300a:	4923      	ldr	r1, [pc, #140]	; (8003098 <HAL_RCC_ClockConfig+0x128>)
 800300c:	68a0      	ldr	r0, [r4, #8]
 800300e:	688b      	ldr	r3, [r1, #8]
 8003010:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003014:	4303      	orrs	r3, r0
 8003016:	608b      	str	r3, [r1, #8]
 8003018:	e7bb      	b.n	8002f92 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	6862      	ldr	r2, [r4, #4]
 800301c:	4b1e      	ldr	r3, [pc, #120]	; (8003098 <HAL_RCC_ClockConfig+0x128>)
 800301e:	2a01      	cmp	r2, #1
 8003020:	d11c      	bne.n	800305c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003028:	d0a7      	beq.n	8002f7a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302a:	4e1b      	ldr	r6, [pc, #108]	; (8003098 <HAL_RCC_ClockConfig+0x128>)
 800302c:	68b3      	ldr	r3, [r6, #8]
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	4313      	orrs	r3, r2
 8003034:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003036:	f7fe fd23 	bl	8001a80 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800303a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800303e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003040:	68b3      	ldr	r3, [r6, #8]
 8003042:	6862      	ldr	r2, [r4, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800304c:	d0a3      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304e:	f7fe fd17 	bl	8001a80 <HAL_GetTick>
 8003052:	1bc0      	subs	r0, r0, r7
 8003054:	4540      	cmp	r0, r8
 8003056:	d9f3      	bls.n	8003040 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8003058:	2003      	movs	r0, #3
 800305a:	e78f      	b.n	8002f7c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800305c:	1e91      	subs	r1, r2, #2
 800305e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003060:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003062:	d802      	bhi.n	800306a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003064:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003068:	e7de      	b.n	8003028 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800306a:	f013 0f02 	tst.w	r3, #2
 800306e:	e7db      	b.n	8003028 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003070:	b2ea      	uxtb	r2, r5
 8003072:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	42ab      	cmp	r3, r5
 800307c:	f47f af7d 	bne.w	8002f7a <HAL_RCC_ClockConfig+0xa>
 8003080:	e78f      	b.n	8002fa2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003082:	4905      	ldr	r1, [pc, #20]	; (8003098 <HAL_RCC_ClockConfig+0x128>)
 8003084:	68e0      	ldr	r0, [r4, #12]
 8003086:	688b      	ldr	r3, [r1, #8]
 8003088:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800308c:	4303      	orrs	r3, r0
 800308e:	608b      	str	r3, [r1, #8]
 8003090:	e78a      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x38>
 8003092:	bf00      	nop
 8003094:	40023c00 	.word	0x40023c00
 8003098:	40023800 	.word	0x40023800
 800309c:	0800b872 	.word	0x0800b872
 80030a0:	20000510 	.word	0x20000510
 80030a4:	20000444 	.word	0x20000444

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80030a8:	4b01      	ldr	r3, [pc, #4]	; (80030b0 <HAL_RCC_GetHCLKFreq+0x8>)
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000510 	.word	0x20000510

080030b4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030b8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d12c      	bne.n	800311a <HAL_TIM_Base_Start+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c0:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c2:	4a17      	ldr	r2, [pc, #92]	; (8003120 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030c8:	6803      	ldr	r3, [r0, #0]
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d01a      	beq.n	8003104 <HAL_TIM_Base_Start+0x4c>
 80030ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d2:	d017      	beq.n	8003104 <HAL_TIM_Base_Start+0x4c>
 80030d4:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80030d8:	4293      	cmp	r3, r2
 80030da:	d013      	beq.n	8003104 <HAL_TIM_Base_Start+0x4c>
 80030dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00f      	beq.n	8003104 <HAL_TIM_Base_Start+0x4c>
 80030e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00b      	beq.n	8003104 <HAL_TIM_Base_Start+0x4c>
 80030ec:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <HAL_TIM_Base_Start+0x4c>
 80030f4:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <HAL_TIM_Base_Start+0x4c>
 80030fc:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003100:	4293      	cmp	r3, r2
 8003102:	d104      	bne.n	800310e <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800310a:	2a06      	cmp	r2, #6
 800310c:	d003      	beq.n	8003116 <HAL_TIM_Base_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003116:	2000      	movs	r0, #0
}
 8003118:	4770      	bx	lr
    return HAL_ERROR;
 800311a:	2001      	movs	r0, #1
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40010000 	.word	0x40010000

08003124 <HAL_TIM_Base_Stop>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003124:	6803      	ldr	r3, [r0, #0]
 8003126:	6a19      	ldr	r1, [r3, #32]
 8003128:	f241 1211 	movw	r2, #4369	; 0x1111
 800312c:	4211      	tst	r1, r2
 800312e:	d108      	bne.n	8003142 <HAL_TIM_Base_Stop+0x1e>
 8003130:	6a19      	ldr	r1, [r3, #32]
 8003132:	f240 4244 	movw	r2, #1092	; 0x444
 8003136:	4211      	tst	r1, r2
 8003138:	bf02      	ittt	eq
 800313a:	681a      	ldreq	r2, [r3, #0]
 800313c:	f022 0201 	biceq.w	r2, r2, #1
 8003140:	601a      	streq	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003142:	2301      	movs	r3, #1
 8003144:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
}
 8003148:	2000      	movs	r0, #0
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800314c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003150:	2b01      	cmp	r3, #1
 8003152:	d130      	bne.n	80031b6 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	2302      	movs	r3, #2
 8003156:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800315a:	6803      	ldr	r3, [r0, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	f042 0201 	orr.w	r2, r2, #1
 8003162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003164:	4a15      	ldr	r2, [pc, #84]	; (80031bc <HAL_TIM_Base_Start_IT+0x70>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d01a      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x54>
 800316a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800316e:	d017      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x54>
 8003170:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003174:	4293      	cmp	r3, r2
 8003176:	d013      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x54>
 8003178:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800317c:	4293      	cmp	r3, r2
 800317e:	d00f      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x54>
 8003180:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003184:	4293      	cmp	r3, r2
 8003186:	d00b      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x54>
 8003188:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800318c:	4293      	cmp	r3, r2
 800318e:	d007      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x54>
 8003190:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003194:	4293      	cmp	r3, r2
 8003196:	d003      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x54>
 8003198:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800319c:	4293      	cmp	r3, r2
 800319e:	d104      	bne.n	80031aa <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a6:	2a06      	cmp	r2, #6
 80031a8:	d003      	beq.n	80031b2 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	f042 0201 	orr.w	r2, r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031b2:	2000      	movs	r0, #0
}
 80031b4:	4770      	bx	lr
    return HAL_ERROR;
 80031b6:	2001      	movs	r0, #1
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40010000 	.word	0x40010000

080031c0 <HAL_TIM_OC_DelayElapsedCallback>:
 80031c0:	4770      	bx	lr

080031c2 <HAL_TIM_IC_CaptureCallback>:
 80031c2:	4770      	bx	lr

080031c4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80031c4:	4770      	bx	lr

080031c6 <HAL_TIM_TriggerCallback>:
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031c8:	6803      	ldr	r3, [r0, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	0791      	lsls	r1, r2, #30
{
 80031ce:	b510      	push	{r4, lr}
 80031d0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d2:	d50e      	bpl.n	80031f2 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	0792      	lsls	r2, r2, #30
 80031d8:	d50b      	bpl.n	80031f2 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031da:	f06f 0202 	mvn.w	r2, #2
 80031de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e0:	2201      	movs	r2, #1
 80031e2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	079b      	lsls	r3, r3, #30
 80031e8:	d077      	beq.n	80032da <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031ea:	f7ff ffea 	bl	80031c2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	2300      	movs	r3, #0
 80031f0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031f2:	6823      	ldr	r3, [r4, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	0750      	lsls	r0, r2, #29
 80031f8:	d510      	bpl.n	800321c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	0751      	lsls	r1, r2, #29
 80031fe:	d50d      	bpl.n	800321c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003200:	f06f 0204 	mvn.w	r2, #4
 8003204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003206:	2202      	movs	r2, #2
 8003208:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003210:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003212:	d068      	beq.n	80032e6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003214:	f7ff ffd5 	bl	80031c2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003218:	2300      	movs	r3, #0
 800321a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	0712      	lsls	r2, r2, #28
 8003222:	d50f      	bpl.n	8003244 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	0710      	lsls	r0, r2, #28
 8003228:	d50c      	bpl.n	8003244 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800322a:	f06f 0208 	mvn.w	r2, #8
 800322e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003230:	2204      	movs	r2, #4
 8003232:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003238:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800323a:	d05a      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800323c:	f7ff ffc1 	bl	80031c2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003240:	2300      	movs	r3, #0
 8003242:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	06d2      	lsls	r2, r2, #27
 800324a:	d510      	bpl.n	800326e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800324c:	68da      	ldr	r2, [r3, #12]
 800324e:	06d0      	lsls	r0, r2, #27
 8003250:	d50d      	bpl.n	800326e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003252:	f06f 0210 	mvn.w	r2, #16
 8003256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003258:	2208      	movs	r2, #8
 800325a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003262:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003264:	d04b      	beq.n	80032fe <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	f7ff ffac 	bl	80031c2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326a:	2300      	movs	r3, #0
 800326c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800326e:	6823      	ldr	r3, [r4, #0]
 8003270:	691a      	ldr	r2, [r3, #16]
 8003272:	07d1      	lsls	r1, r2, #31
 8003274:	d508      	bpl.n	8003288 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003276:	68da      	ldr	r2, [r3, #12]
 8003278:	07d2      	lsls	r2, r2, #31
 800327a:	d505      	bpl.n	8003288 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800327c:	f06f 0201 	mvn.w	r2, #1
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003282:	4620      	mov	r0, r4
 8003284:	f001 fb6c 	bl	8004960 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	691a      	ldr	r2, [r3, #16]
 800328c:	0610      	lsls	r0, r2, #24
 800328e:	d508      	bpl.n	80032a2 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	0611      	lsls	r1, r2, #24
 8003294:	d505      	bpl.n	80032a2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003296:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800329a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800329c:	4620      	mov	r0, r4
 800329e:	f000 f906 	bl	80034ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	0652      	lsls	r2, r2, #25
 80032a8:	d508      	bpl.n	80032bc <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	0650      	lsls	r0, r2, #25
 80032ae:	d505      	bpl.n	80032bc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032b6:	4620      	mov	r0, r4
 80032b8:	f7ff ff85 	bl	80031c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	0691      	lsls	r1, r2, #26
 80032c2:	d522      	bpl.n	800330a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	0692      	lsls	r2, r2, #26
 80032c8:	d51f      	bpl.n	800330a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032ca:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032d0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80032d6:	f000 b8e9 	b.w	80034ac <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	f7ff ff71 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff ff70 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80032e4:	e783      	b.n	80031ee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032e6:	f7ff ff6b 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7ff ff6a 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80032f0:	e792      	b.n	8003218 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	f7ff ff65 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f6:	4620      	mov	r0, r4
 80032f8:	f7ff ff64 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
 80032fc:	e7a0      	b.n	8003240 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	f7ff ff5f 	bl	80031c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003302:	4620      	mov	r0, r4
 8003304:	f7ff ff5e 	bl	80031c4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003308:	e7af      	b.n	800326a <HAL_TIM_IRQHandler+0xa2>
}
 800330a:	bd10      	pop	{r4, pc}

0800330c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800330e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003310:	4290      	cmp	r0, r2
 8003312:	d012      	beq.n	800333a <TIM_Base_SetConfig+0x2e>
 8003314:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003318:	d00f      	beq.n	800333a <TIM_Base_SetConfig+0x2e>
 800331a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800331e:	4290      	cmp	r0, r2
 8003320:	d00b      	beq.n	800333a <TIM_Base_SetConfig+0x2e>
 8003322:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003326:	4290      	cmp	r0, r2
 8003328:	d007      	beq.n	800333a <TIM_Base_SetConfig+0x2e>
 800332a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800332e:	4290      	cmp	r0, r2
 8003330:	d003      	beq.n	800333a <TIM_Base_SetConfig+0x2e>
 8003332:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003336:	4290      	cmp	r0, r2
 8003338:	d119      	bne.n	800336e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800333a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800333c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003340:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003342:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <TIM_Base_SetConfig+0xc4>)
 8003344:	4290      	cmp	r0, r2
 8003346:	d029      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 8003348:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800334c:	d026      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 800334e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003352:	4290      	cmp	r0, r2
 8003354:	d022      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 8003356:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800335a:	4290      	cmp	r0, r2
 800335c:	d01e      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 800335e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003362:	4290      	cmp	r0, r2
 8003364:	d01a      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 8003366:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800336a:	4290      	cmp	r0, r2
 800336c:	d016      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 800336e:	4a19      	ldr	r2, [pc, #100]	; (80033d4 <TIM_Base_SetConfig+0xc8>)
 8003370:	4290      	cmp	r0, r2
 8003372:	d013      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 8003374:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003378:	4290      	cmp	r0, r2
 800337a:	d00f      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 800337c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003380:	4290      	cmp	r0, r2
 8003382:	d00b      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 8003384:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003388:	4290      	cmp	r0, r2
 800338a:	d007      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 800338c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003390:	4290      	cmp	r0, r2
 8003392:	d003      	beq.n	800339c <TIM_Base_SetConfig+0x90>
 8003394:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003398:	4290      	cmp	r0, r2
 800339a:	d103      	bne.n	80033a4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800339c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800339e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033a4:	694a      	ldr	r2, [r1, #20]
 80033a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033aa:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80033ac:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033ae:	688b      	ldr	r3, [r1, #8]
 80033b0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033b2:	680b      	ldr	r3, [r1, #0]
 80033b4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b6:	4b06      	ldr	r3, [pc, #24]	; (80033d0 <TIM_Base_SetConfig+0xc4>)
 80033b8:	4298      	cmp	r0, r3
 80033ba:	d003      	beq.n	80033c4 <TIM_Base_SetConfig+0xb8>
 80033bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80033c0:	4298      	cmp	r0, r3
 80033c2:	d101      	bne.n	80033c8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033c4:	690b      	ldr	r3, [r1, #16]
 80033c6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033c8:	2301      	movs	r3, #1
 80033ca:	6143      	str	r3, [r0, #20]
}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000
 80033d4:	40014000 	.word	0x40014000

080033d8 <HAL_TIM_Base_Init>:
{
 80033d8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80033da:	4604      	mov	r4, r0
 80033dc:	b330      	cbz	r0, 800342c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033e6:	b91b      	cbnz	r3, 80033f0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80033e8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80033ec:	f7ff fe62 	bl	80030b4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f2:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f8:	1d21      	adds	r1, r4, #4
 80033fa:	f7ff ff87 	bl	800330c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fe:	2301      	movs	r3, #1
 8003400:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003404:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800340a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800340e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003412:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003416:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800341a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800341e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003422:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003426:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800342a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800342c:	2001      	movs	r0, #1
 800342e:	e7fc      	b.n	800342a <HAL_TIM_Base_Init+0x52>

08003430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003430:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003432:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003436:	2b01      	cmp	r3, #1
 8003438:	f04f 0302 	mov.w	r3, #2
 800343c:	d032      	beq.n	80034a4 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003442:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003444:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8003446:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003448:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800344a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800344e:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003450:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003452:	4c15      	ldr	r4, [pc, #84]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003454:	42a3      	cmp	r3, r4
 8003456:	d01a      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345c:	d017      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800345e:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8003462:	42a3      	cmp	r3, r4
 8003464:	d013      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003466:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800346a:	42a3      	cmp	r3, r4
 800346c:	d00f      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800346e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003472:	42a3      	cmp	r3, r4
 8003474:	d00b      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003476:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800347a:	42a3      	cmp	r3, r4
 800347c:	d007      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800347e:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8003482:	42a3      	cmp	r3, r4
 8003484:	d003      	beq.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003486:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 800348a:	42a3      	cmp	r3, r4
 800348c:	d104      	bne.n	8003498 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003494:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003498:	2301      	movs	r3, #1
 800349a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349e:	2300      	movs	r3, #0
 80034a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80034a4:	4618      	mov	r0, r3

  return HAL_OK;
}
 80034a6:	bd30      	pop	{r4, r5, pc}
 80034a8:	40010000 	.word	0x40010000

080034ac <HAL_TIMEx_CommutCallback>:
 80034ac:	4770      	bx	lr

080034ae <HAL_TIMEx_BreakCallback>:
 80034ae:	4770      	bx	lr

080034b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80034b2:	3b01      	subs	r3, #1
 80034b4:	d00f      	beq.n	80034d6 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034b6:	6902      	ldr	r2, [r0, #16]
 80034b8:	2a00      	cmp	r2, #0
 80034ba:	dafa      	bge.n	80034b2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80034bc:	6903      	ldr	r3, [r0, #16]
 80034be:	4a07      	ldr	r2, [pc, #28]	; (80034dc <USB_CoreReset+0x2c>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80034c6:	3a01      	subs	r2, #1
 80034c8:	d005      	beq.n	80034d6 <USB_CoreReset+0x26>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80034ca:	6903      	ldr	r3, [r0, #16]
 80034cc:	f013 0301 	ands.w	r3, r3, #1
 80034d0:	d1f9      	bne.n	80034c6 <USB_CoreReset+0x16>

  return HAL_OK;
 80034d2:	4618      	mov	r0, r3
 80034d4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80034d6:	2003      	movs	r0, #3
}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	00030d41 	.word	0x00030d41

080034e0 <USB_CoreInit>:
{
 80034e0:	b084      	sub	sp, #16
 80034e2:	b538      	push	{r3, r4, r5, lr}
 80034e4:	ad05      	add	r5, sp, #20
 80034e6:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80034ec:	2b01      	cmp	r3, #1
{
 80034ee:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034f0:	d125      	bne.n	800353e <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80034f2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f8:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80034fa:	68c3      	ldr	r3, [r0, #12]
 80034fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003504:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003506:	68c3      	ldr	r3, [r0, #12]
 8003508:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800350c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800350e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003510:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003512:	bf02      	ittt	eq
 8003514:	68c3      	ldreq	r3, [r0, #12]
 8003516:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800351a:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800351c:	f7ff ffc8 	bl	80034b0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003520:	9b08      	ldr	r3, [sp, #32]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d107      	bne.n	8003536 <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003526:	68a3      	ldr	r3, [r4, #8]
 8003528:	f043 0306 	orr.w	r3, r3, #6
 800352c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800352e:	68a3      	ldr	r3, [r4, #8]
 8003530:	f043 0320 	orr.w	r3, r3, #32
 8003534:	60a3      	str	r3, [r4, #8]
}
 8003536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800353a:	b004      	add	sp, #16
 800353c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800353e:	68c3      	ldr	r3, [r0, #12]
 8003540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003544:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8003546:	f7ff ffb3 	bl	80034b0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 800354a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800354c:	b923      	cbnz	r3, 8003558 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800354e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003554:	63a3      	str	r3, [r4, #56]	; 0x38
 8003556:	e7e3      	b.n	8003520 <USB_CoreInit+0x40>
 8003558:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800355a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355e:	e7f9      	b.n	8003554 <USB_CoreInit+0x74>

08003560 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 8003560:	2a02      	cmp	r2, #2
 8003562:	d14a      	bne.n	80035fa <USB_SetTurnaroundTime+0x9a>
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <USB_SetTurnaroundTime+0xa4>)
 8003566:	4a28      	ldr	r2, [pc, #160]	; (8003608 <USB_SetTurnaroundTime+0xa8>)
 8003568:	440b      	add	r3, r1
 800356a:	4293      	cmp	r3, r2
 800356c:	d939      	bls.n	80035e2 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800356e:	4b27      	ldr	r3, [pc, #156]	; (800360c <USB_SetTurnaroundTime+0xac>)
 8003570:	4a27      	ldr	r2, [pc, #156]	; (8003610 <USB_SetTurnaroundTime+0xb0>)
 8003572:	440b      	add	r3, r1
 8003574:	4293      	cmp	r3, r2
 8003576:	d936      	bls.n	80035e6 <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003578:	4a26      	ldr	r2, [pc, #152]	; (8003614 <USB_SetTurnaroundTime+0xb4>)
 800357a:	f5a1 0374 	sub.w	r3, r1, #15990784	; 0xf40000
 800357e:	f5a3 5310 	sub.w	r3, r3, #9216	; 0x2400
 8003582:	4293      	cmp	r3, r2
 8003584:	d931      	bls.n	80035ea <USB_SetTurnaroundTime+0x8a>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003586:	4a24      	ldr	r2, [pc, #144]	; (8003618 <USB_SetTurnaroundTime+0xb8>)
 8003588:	f1a1 7383 	sub.w	r3, r1, #17170432	; 0x1060000
 800358c:	f5a3 43e7 	sub.w	r3, r3, #29568	; 0x7380
 8003590:	4293      	cmp	r3, r2
 8003592:	d32c      	bcc.n	80035ee <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <USB_SetTurnaroundTime+0xbc>)
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <USB_SetTurnaroundTime+0xc0>)
 8003598:	440b      	add	r3, r1
 800359a:	4293      	cmp	r3, r2
 800359c:	d929      	bls.n	80035f2 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800359e:	4b21      	ldr	r3, [pc, #132]	; (8003624 <USB_SetTurnaroundTime+0xc4>)
 80035a0:	4a21      	ldr	r2, [pc, #132]	; (8003628 <USB_SetTurnaroundTime+0xc8>)
 80035a2:	440b      	add	r3, r1
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d326      	bcc.n	80035f6 <USB_SetTurnaroundTime+0x96>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80035a8:	4b20      	ldr	r3, [pc, #128]	; (800362c <USB_SetTurnaroundTime+0xcc>)
 80035aa:	4a21      	ldr	r2, [pc, #132]	; (8003630 <USB_SetTurnaroundTime+0xd0>)
 80035ac:	440b      	add	r3, r1
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d323      	bcc.n	80035fa <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80035b2:	4a20      	ldr	r2, [pc, #128]	; (8003634 <USB_SetTurnaroundTime+0xd4>)
 80035b4:	f1a1 73b7 	sub.w	r3, r1, #23986176	; 0x16e0000
 80035b8:	f5a3 5358 	sub.w	r3, r3, #13824	; 0x3600
 80035bc:	4293      	cmp	r3, r2
 80035be:	d31e      	bcc.n	80035fe <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035c0:	4b1d      	ldr	r3, [pc, #116]	; (8003638 <USB_SetTurnaroundTime+0xd8>)
      UsbTrd = 0x6U;
 80035c2:	4a1e      	ldr	r2, [pc, #120]	; (800363c <USB_SetTurnaroundTime+0xdc>)
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80035c4:	440b      	add	r3, r1
      UsbTrd = 0x6U;
 80035c6:	4293      	cmp	r3, r2
 80035c8:	bf34      	ite	cc
 80035ca:	2307      	movcc	r3, #7
 80035cc:	2306      	movcs	r3, #6
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80035ce:	68c2      	ldr	r2, [r0, #12]
 80035d0:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 80035d4:	60c2      	str	r2, [r0, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80035d6:	68c2      	ldr	r2, [r0, #12]
 80035d8:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
 80035dc:	60c3      	str	r3, [r0, #12]
}
 80035de:	2000      	movs	r0, #0
 80035e0:	4770      	bx	lr
      UsbTrd = 0xFU;
 80035e2:	230f      	movs	r3, #15
 80035e4:	e7f3      	b.n	80035ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xEU;
 80035e6:	230e      	movs	r3, #14
 80035e8:	e7f1      	b.n	80035ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xDU;
 80035ea:	230d      	movs	r3, #13
 80035ec:	e7ef      	b.n	80035ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xCU;
 80035ee:	230c      	movs	r3, #12
 80035f0:	e7ed      	b.n	80035ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xBU;
 80035f2:	230b      	movs	r3, #11
 80035f4:	e7eb      	b.n	80035ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0xAU;
 80035f6:	230a      	movs	r3, #10
 80035f8:	e7e9      	b.n	80035ce <USB_SetTurnaroundTime+0x6e>
    UsbTrd = USBD_HS_TRDT_VALUE;
 80035fa:	2309      	movs	r3, #9
 80035fc:	e7e7      	b.n	80035ce <USB_SetTurnaroundTime+0x6e>
      UsbTrd = 0x8U;
 80035fe:	2308      	movs	r3, #8
 8003600:	e7e5      	b.n	80035ce <USB_SetTurnaroundTime+0x6e>
 8003602:	bf00      	nop
 8003604:	ff275340 	.word	0xff275340
 8003608:	000c34ff 	.word	0x000c34ff
 800360c:	ff1b1e40 	.word	0xff1b1e40
 8003610:	000f423f 	.word	0x000f423f
 8003614:	00124f7f 	.word	0x00124f7f
 8003618:	0013d620 	.word	0x0013d620
 800361c:	fee5b660 	.word	0xfee5b660
 8003620:	0016e35f 	.word	0x0016e35f
 8003624:	feced300 	.word	0xfeced300
 8003628:	001b7740 	.word	0x001b7740
 800362c:	feb35bc0 	.word	0xfeb35bc0
 8003630:	002191c0 	.word	0x002191c0
 8003634:	00387520 	.word	0x00387520
 8003638:	fe5954e0 	.word	0xfe5954e0
 800363c:	00419ce0 	.word	0x00419ce0

08003640 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003640:	6883      	ldr	r3, [r0, #8]
 8003642:	f043 0301 	orr.w	r3, r3, #1
 8003646:	6083      	str	r3, [r0, #8]
}
 8003648:	2000      	movs	r0, #0
 800364a:	4770      	bx	lr

0800364c <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800364c:	6883      	ldr	r3, [r0, #8]
 800364e:	f023 0301 	bic.w	r3, r3, #1
 8003652:	6083      	str	r3, [r0, #8]
}
 8003654:	2000      	movs	r0, #0
 8003656:	4770      	bx	lr

08003658 <USB_SetCurrentMode>:
{
 8003658:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800365a:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800365c:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800365e:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003662:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003664:	d108      	bne.n	8003678 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003666:	68c3      	ldr	r3, [r0, #12]
 8003668:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800366c:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800366e:	2032      	movs	r0, #50	; 0x32
 8003670:	f7fe fa0c 	bl	8001a8c <HAL_Delay>
  return HAL_OK;
 8003674:	2000      	movs	r0, #0
}
 8003676:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8003678:	b919      	cbnz	r1, 8003682 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800367a:	68c3      	ldr	r3, [r0, #12]
 800367c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003680:	e7f4      	b.n	800366c <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
 8003684:	e7f7      	b.n	8003676 <USB_SetCurrentMode+0x1e>
	...

08003688 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003688:	0189      	lsls	r1, r1, #6
 800368a:	f041 0120 	orr.w	r1, r1, #32
 800368e:	4a06      	ldr	r2, [pc, #24]	; (80036a8 <USB_FlushTxFifo+0x20>)
 8003690:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8003692:	3a01      	subs	r2, #1
 8003694:	d005      	beq.n	80036a2 <USB_FlushTxFifo+0x1a>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003696:	6903      	ldr	r3, [r0, #16]
 8003698:	f013 0320 	ands.w	r3, r3, #32
 800369c:	d1f9      	bne.n	8003692 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800369e:	4618      	mov	r0, r3
 80036a0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80036a2:	2003      	movs	r0, #3
}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	00030d41 	.word	0x00030d41

080036ac <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80036ac:	2310      	movs	r3, #16
 80036ae:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <USB_FlushRxFifo+0x1c>)
 80036b0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80036b2:	3a01      	subs	r2, #1
 80036b4:	d005      	beq.n	80036c2 <USB_FlushRxFifo+0x16>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80036b6:	6903      	ldr	r3, [r0, #16]
 80036b8:	f013 0310 	ands.w	r3, r3, #16
 80036bc:	d1f9      	bne.n	80036b2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80036be:	4618      	mov	r0, r3
 80036c0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80036c2:	2003      	movs	r0, #3
}
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	00030d41 	.word	0x00030d41

080036cc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80036cc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80036d0:	4319      	orrs	r1, r3
 80036d2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80036d6:	2000      	movs	r0, #0
 80036d8:	4770      	bx	lr
	...

080036dc <USB_DevInit>:
{
 80036dc:	b084      	sub	sp, #16
 80036de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036e2:	4604      	mov	r4, r0
 80036e4:	a809      	add	r0, sp, #36	; 0x24
 80036e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80036ea:	9d13      	ldr	r5, [sp, #76]	; 0x4c
  for (i = 0U; i < 15U; i++)
 80036ec:	2300      	movs	r3, #0
 80036ee:	460e      	mov	r6, r1
    USBx->DIEPTXF[i] = 0U;
 80036f0:	4619      	mov	r1, r3
 80036f2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80036f6:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80036fa:	3301      	adds	r3, #1
 80036fc:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80036fe:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8003700:	d1f7      	bne.n	80036f2 <USB_DevInit+0x16>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003702:	f504 6700 	add.w	r7, r4, #2048	; 0x800
  if (cfg.vbus_sensing_enable == 0U)
 8003706:	2d00      	cmp	r5, #0
 8003708:	d16c      	bne.n	80037e4 <USB_DevInit+0x108>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	607b      	str	r3, [r7, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003712:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003714:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003718:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800371a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800371c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003720:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003722:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003728:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003730:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8003734:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003738:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800373a:	2b01      	cmp	r3, #1
 800373c:	d15c      	bne.n	80037f8 <USB_DevInit+0x11c>
    if (cfg.speed == USBD_HS_SPEED)
 800373e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003740:	2900      	cmp	r1, #0
 8003742:	d157      	bne.n	80037f4 <USB_DevInit+0x118>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003744:	4620      	mov	r0, r4
 8003746:	f7ff ffc1 	bl	80036cc <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800374a:	2110      	movs	r1, #16
 800374c:	4620      	mov	r0, r4
 800374e:	f7ff ff9b 	bl	8003688 <USB_FlushTxFifo>
 8003752:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003754:	4620      	mov	r0, r4
 8003756:	f7ff ffa9 	bl	80036ac <USB_FlushRxFifo>
 800375a:	4308      	orrs	r0, r1
 800375c:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 800375e:	2300      	movs	r3, #0
    ret = HAL_ERROR;
 8003760:	3800      	subs	r0, #0
  USBx_DEVICE->DIEPMSK = 0U;
 8003762:	613b      	str	r3, [r7, #16]
    ret = HAL_ERROR;
 8003764:	bf18      	it	ne
 8003766:	2001      	movne	r0, #1
  USBx_DEVICE->DOEPMSK = 0U;
 8003768:	617b      	str	r3, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800376a:	f504 6210 	add.w	r2, r4, #2304	; 0x900
 800376e:	61fb      	str	r3, [r7, #28]
      USBx_INEP(i)->DIEPCTL = 0U;
 8003770:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003772:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003776:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800377a:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800377e:	42b3      	cmp	r3, r6
 8003780:	d13c      	bne.n	80037fc <USB_DevInit+0x120>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003782:	2200      	movs	r2, #0
 8003784:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003788:	4611      	mov	r1, r2
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800378a:	f04f 4c90 	mov.w	ip, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800378e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003792:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003796:	42b2      	cmp	r2, r6
 8003798:	d143      	bne.n	8003822 <USB_DevInit+0x146>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a0:	613b      	str	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80037a6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80037aa:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80037ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037ae:	b91b      	cbnz	r3, 80037b8 <USB_DevInit+0xdc>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80037b0:	69a3      	ldr	r3, [r4, #24]
 80037b2:	f043 0310 	orr.w	r3, r3, #16
 80037b6:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80037b8:	69a2      	ldr	r2, [r4, #24]
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <USB_DevInit+0x16c>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80037c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037c2:	b11b      	cbz	r3, 80037cc <USB_DevInit+0xf0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80037c4:	69a3      	ldr	r3, [r4, #24]
 80037c6:	f043 0308 	orr.w	r3, r3, #8
 80037ca:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80037cc:	2d01      	cmp	r5, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037ce:	bf01      	itttt	eq
 80037d0:	69a3      	ldreq	r3, [r4, #24]
 80037d2:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80037d6:	f043 0304 	orreq.w	r3, r3, #4
 80037da:	61a3      	streq	r3, [r4, #24]
}
 80037dc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e0:	b004      	add	sp, #16
 80037e2:	4770      	bx	lr
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80037e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037ea:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80037ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80037ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037f2:	e799      	b.n	8003728 <USB_DevInit+0x4c>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80037f4:	4619      	mov	r1, r3
 80037f6:	e7a5      	b.n	8003744 <USB_DevInit+0x68>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80037f8:	2103      	movs	r1, #3
 80037fa:	e7a3      	b.n	8003744 <USB_DevInit+0x68>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037fc:	f8d2 9000 	ldr.w	r9, [r2]
 8003800:	f1b9 0f00 	cmp.w	r9, #0
 8003804:	da0b      	bge.n	800381e <USB_DevInit+0x142>
      if (i == 0U)
 8003806:	b93b      	cbnz	r3, 8003818 <USB_DevInit+0x13c>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003808:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800380c:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800380e:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003810:	f8c2 8008 	str.w	r8, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003814:	3220      	adds	r2, #32
 8003816:	e7b2      	b.n	800377e <USB_DevInit+0xa2>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003818:	f8c2 c000 	str.w	ip, [r2]
 800381c:	e7f6      	b.n	800380c <USB_DevInit+0x130>
      USBx_INEP(i)->DIEPCTL = 0U;
 800381e:	6011      	str	r1, [r2, #0]
 8003820:	e7f4      	b.n	800380c <USB_DevInit+0x130>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003822:	f8d3 9000 	ldr.w	r9, [r3]
 8003826:	f1b9 0f00 	cmp.w	r9, #0
 800382a:	da0b      	bge.n	8003844 <USB_DevInit+0x168>
      if (i == 0U)
 800382c:	b93a      	cbnz	r2, 800383e <USB_DevInit+0x162>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800382e:	f8c3 e000 	str.w	lr, [r3]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003832:	6119      	str	r1, [r3, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003834:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003836:	f8c3 8008 	str.w	r8, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800383a:	3320      	adds	r3, #32
 800383c:	e7ab      	b.n	8003796 <USB_DevInit+0xba>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800383e:	f8c3 c000 	str.w	ip, [r3]
 8003842:	e7f6      	b.n	8003832 <USB_DevInit+0x156>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003844:	6019      	str	r1, [r3, #0]
 8003846:	e7f4      	b.n	8003832 <USB_DevInit+0x156>
 8003848:	803c3800 	.word	0x803c3800

0800384c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800384c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003850:	f013 0006 	ands.w	r0, r3, #6
 8003854:	d004      	beq.n	8003860 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8003856:	f013 0f02 	tst.w	r3, #2
 800385a:	bf14      	ite	ne
 800385c:	2002      	movne	r0, #2
 800385e:	200f      	moveq	r0, #15
}
 8003860:	4770      	bx	lr

08003862 <USB_ActivateEndpoint>:
{
 8003862:	b530      	push	{r4, r5, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003864:	780d      	ldrb	r5, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003866:	2401      	movs	r4, #1
 8003868:	f005 030f 	and.w	r3, r5, #15
 800386c:	409c      	lsls	r4, r3
  if (ep->is_in == 1U)
 800386e:	784b      	ldrb	r3, [r1, #1]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003870:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8003874:	2b01      	cmp	r3, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003876:	eb00 1045 	add.w	r0, r0, r5, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800387a:	69d3      	ldr	r3, [r2, #28]
  if (ep->is_in == 1U)
 800387c:	d118      	bne.n	80038b0 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800387e:	431c      	orrs	r4, r3
 8003880:	61d4      	str	r4, [r2, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003882:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003886:	041a      	lsls	r2, r3, #16
 8003888:	d410      	bmi.n	80038ac <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800388a:	688a      	ldr	r2, [r1, #8]
 800388c:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
 8003890:	f3c2 030a 	ubfx	r3, r2, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003894:	78ca      	ldrb	r2, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003896:	4323      	orrs	r3, r4
 8003898:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 800389c:	ea43 5385 	orr.w	r3, r3, r5, lsl #22
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80038ac:	2000      	movs	r0, #0
 80038ae:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80038b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80038b4:	61d4      	str	r4, [r2, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80038b6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80038ba:	041b      	lsls	r3, r3, #16
 80038bc:	d4f6      	bmi.n	80038ac <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038be:	688b      	ldr	r3, [r1, #8]
 80038c0:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80038c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038c8:	4313      	orrs	r3, r2
                                    ((uint32_t)ep->type << 18) |
 80038ca:	78ca      	ldrb	r2, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80038cc:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038d8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80038dc:	e7e6      	b.n	80038ac <USB_ActivateEndpoint+0x4a>
	...

080038e0 <USB_DeactivateEndpoint>:
{
 80038e0:	b510      	push	{r4, lr}
  uint32_t epnum = (uint32_t)ep->num;
 80038e2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 80038e4:	7849      	ldrb	r1, [r1, #1]
 80038e6:	2901      	cmp	r1, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038e8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 80038ec:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80038f0:	f002 020f 	and.w	r2, r2, #15
  if (ep->is_in == 1U)
 80038f4:	d122      	bne.n	800393c <USB_DeactivateEndpoint+0x5c>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038f6:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 80038fa:	2900      	cmp	r1, #0
 80038fc:	da0b      	bge.n	8003916 <USB_DeactivateEndpoint+0x36>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80038fe:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003902:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003906:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800390a:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 800390e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003912:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003916:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003918:	2101      	movs	r1, #1
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	ea24 0402 	bic.w	r4, r4, r2
 8003922:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003924:	69c1      	ldr	r1, [r0, #28]
 8003926:	ea21 0202 	bic.w	r2, r1, r2
 800392a:	61c2      	str	r2, [r0, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800392c:	f8d3 1900 	ldr.w	r1, [r3, #2304]	; 0x900
 8003930:	4a14      	ldr	r2, [pc, #80]	; (8003984 <USB_DeactivateEndpoint+0xa4>)
 8003932:	400a      	ands	r2, r1
 8003934:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
}
 8003938:	2000      	movs	r0, #0
 800393a:	bd10      	pop	{r4, pc}
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800393c:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003940:	2900      	cmp	r1, #0
 8003942:	da0b      	bge.n	800395c <USB_DeactivateEndpoint+0x7c>
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003944:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003948:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 800394c:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003950:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003954:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8003958:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800395c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800395e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003962:	fa01 f202 	lsl.w	r2, r1, r2
 8003966:	ea24 0402 	bic.w	r4, r4, r2
 800396a:	63c4      	str	r4, [r0, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800396c:	69c1      	ldr	r1, [r0, #28]
 800396e:	ea21 0202 	bic.w	r2, r1, r2
 8003972:	61c2      	str	r2, [r0, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003974:	f8d3 1b00 	ldr.w	r1, [r3, #2816]	; 0xb00
 8003978:	4a03      	ldr	r2, [pc, #12]	; (8003988 <USB_DeactivateEndpoint+0xa8>)
 800397a:	400a      	ands	r2, r1
 800397c:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8003980:	e7da      	b.n	8003938 <USB_DeactivateEndpoint+0x58>
 8003982:	bf00      	nop
 8003984:	ec337800 	.word	0xec337800
 8003988:	eff37800 	.word	0xeff37800

0800398c <USB_EP0StartXfer>:
  if (ep->is_in == 1U)
 800398c:	784b      	ldrb	r3, [r1, #1]
 800398e:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 8003a7c <USB_EP0StartXfer+0xf0>
{
 8003992:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t epnum = (uint32_t)ep->num;
 8003994:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8003996:	694d      	ldr	r5, [r1, #20]
 8003998:	4f37      	ldr	r7, [pc, #220]	; (8003a78 <USB_EP0StartXfer+0xec>)
  if (ep->is_in == 1U)
 800399a:	2b01      	cmp	r3, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800399c:	eb00 1446 	add.w	r4, r0, r6, lsl #5
  if (ep->is_in == 1U)
 80039a0:	d146      	bne.n	8003a30 <USB_EP0StartXfer+0xa4>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039a2:	f504 6310 	add.w	r3, r4, #2304	; 0x900
    if (ep->xfer_len == 0U)
 80039a6:	b9bd      	cbnz	r5, 80039d8 <USB_EP0StartXfer+0x4c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039a8:	691d      	ldr	r5, [r3, #16]
 80039aa:	402f      	ands	r7, r5
 80039ac:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039ae:	691d      	ldr	r5, [r3, #16]
 80039b0:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80039b4:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039b6:	691d      	ldr	r5, [r3, #16]
 80039b8:	ea05 050c 	and.w	r5, r5, ip
    if (dma == 1U)
 80039bc:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039be:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80039c0:	d123      	bne.n	8003a0a <USB_EP0StartXfer+0x7e>
      if ((uint32_t)ep->dma_addr != 0U)
 80039c2:	690a      	ldr	r2, [r1, #16]
 80039c4:	b102      	cbz	r2, 80039c8 <USB_EP0StartXfer+0x3c>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80039c6:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039c8:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 80039cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039d0:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 80039d4:	2000      	movs	r0, #0
 80039d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80039d8:	f8d3 e010 	ldr.w	lr, [r3, #16]
 80039dc:	ea0e 0c0c 	and.w	ip, lr, ip
 80039e0:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039e4:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80039e8:	ea0c 0707 	and.w	r7, ip, r7
 80039ec:	611f      	str	r7, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 80039ee:	688f      	ldr	r7, [r1, #8]
 80039f0:	42af      	cmp	r7, r5
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039f2:	691d      	ldr	r5, [r3, #16]
        ep->xfer_len = ep->maxpacket;
 80039f4:	bf38      	it	cc
 80039f6:	614f      	strcc	r7, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039f8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80039fc:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039fe:	694d      	ldr	r5, [r1, #20]
 8003a00:	691f      	ldr	r7, [r3, #16]
 8003a02:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8003a06:	433d      	orrs	r5, r7
 8003a08:	e7d8      	b.n	80039bc <USB_EP0StartXfer+0x30>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a0a:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003a0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a12:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->xfer_len > 0U)
 8003a16:	694b      	ldr	r3, [r1, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0db      	beq.n	80039d4 <USB_EP0StartXfer+0x48>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a1c:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 8003a20:	f006 060f 	and.w	r6, r6, #15
 8003a24:	2301      	movs	r3, #1
 8003a26:	40b3      	lsls	r3, r6
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
 8003a2e:	e7d1      	b.n	80039d4 <USB_EP0StartXfer+0x48>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a30:	f8d4 0b10 	ldr.w	r0, [r4, #2832]	; 0xb10
 8003a34:	ea00 000c 	and.w	r0, r0, ip
 8003a38:	f8c4 0b10 	str.w	r0, [r4, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a3c:	f8d4 0b10 	ldr.w	r0, [r4, #2832]	; 0xb10
 8003a40:	4038      	ands	r0, r7
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a42:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003a46:	6118      	str	r0, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8003a48:	6888      	ldr	r0, [r1, #8]
    if (ep->xfer_len > 0U)
 8003a4a:	b105      	cbz	r5, 8003a4e <USB_EP0StartXfer+0xc2>
      ep->xfer_len = ep->maxpacket;
 8003a4c:	6148      	str	r0, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a4e:	691d      	ldr	r5, [r3, #16]
 8003a50:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8003a54:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a56:	691d      	ldr	r5, [r3, #16]
 8003a58:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8003a5c:	4328      	orrs	r0, r5
    if (dma == 1U)
 8003a5e:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003a60:	6118      	str	r0, [r3, #16]
    if (dma == 1U)
 8003a62:	d102      	bne.n	8003a6a <USB_EP0StartXfer+0xde>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a64:	68ca      	ldr	r2, [r1, #12]
 8003a66:	b102      	cbz	r2, 8003a6a <USB_EP0StartXfer+0xde>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a68:	615a      	str	r2, [r3, #20]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a6a:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003a6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a72:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8003a76:	e7ad      	b.n	80039d4 <USB_EP0StartXfer+0x48>
 8003a78:	e007ffff 	.word	0xe007ffff
 8003a7c:	fff80000 	.word	0xfff80000

08003a80 <USB_WritePacket>:
{
 8003a80:	b510      	push	{r4, lr}
 8003a82:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8003a86:	b944      	cbnz	r4, 8003a9a <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a88:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a8a:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8003a8c:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a8e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8003a92:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8003a96:	428b      	cmp	r3, r1
 8003a98:	d101      	bne.n	8003a9e <USB_WritePacket+0x1e>
}
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003a9e:	f851 2b04 	ldr.w	r2, [r1], #4
 8003aa2:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8003aa4:	e7f7      	b.n	8003a96 <USB_WritePacket+0x16>
	...

08003aa8 <USB_EPStartXfer>:
{
 8003aa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 8003aac:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003aae:	780e      	ldrb	r6, [r1, #0]
    if (ep->xfer_len == 0U)
 8003ab0:	694b      	ldr	r3, [r1, #20]
      if (ep->type == EP_TYPE_ISOC)
 8003ab2:	78cf      	ldrb	r7, [r1, #3]
 8003ab4:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8003c78 <USB_EPStartXfer+0x1d0>
 8003ab8:	f8df e1c0 	ldr.w	lr, [pc, #448]	; 8003c7c <USB_EPStartXfer+0x1d4>
  if (ep->is_in == 1U)
 8003abc:	2d01      	cmp	r5, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003abe:	eb00 1446 	add.w	r4, r0, r6, lsl #5
  if (ep->is_in == 1U)
 8003ac2:	f040 808e 	bne.w	8003be2 <USB_EPStartXfer+0x13a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ac6:	f504 6510 	add.w	r5, r4, #2304	; 0x900
 8003aca:	f8d5 8010 	ldr.w	r8, [r5, #16]
    if (ep->xfer_len == 0U)
 8003ace:	bb6b      	cbnz	r3, 8003b2c <USB_EPStartXfer+0x84>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ad0:	ea08 0c0c 	and.w	ip, r8, ip
 8003ad4:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ad8:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003adc:	f44c 2c00 	orr.w	ip, ip, #524288	; 0x80000
 8003ae0:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ae4:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003ae8:	ea0c 0e0e 	and.w	lr, ip, lr
 8003aec:	f8c5 e010 	str.w	lr, [r5, #16]
    if (dma == 1U)
 8003af0:	2a01      	cmp	r2, #1
 8003af2:	d14e      	bne.n	8003b92 <USB_EPStartXfer+0xea>
      if ((uint32_t)ep->dma_addr != 0U)
 8003af4:	690b      	ldr	r3, [r1, #16]
 8003af6:	b103      	cbz	r3, 8003afa <USB_EPStartXfer+0x52>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003af8:	616b      	str	r3, [r5, #20]
      if (ep->type == EP_TYPE_ISOC)
 8003afa:	2f01      	cmp	r7, #1
 8003afc:	d10c      	bne.n	8003b18 <USB_EPStartXfer+0x70>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003afe:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003b02:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b06:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003b0a:	bf0c      	ite	eq
 8003b0c:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b10:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003b14:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b18:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8003b1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b20:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
}
 8003b24:	2000      	movs	r0, #0
 8003b26:	b002      	add	sp, #8
 8003b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b2c:	ea08 0e0e 	and.w	lr, r8, lr
 8003b30:	f8c5 e010 	str.w	lr, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b34:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8003b38:	ea0e 0c0c 	and.w	ip, lr, ip
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b3c:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b40:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003b44:	eb0e 0c03 	add.w	ip, lr, r3
 8003b48:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8003b4c:	fbbc fefe 	udiv	lr, ip, lr
 8003b50:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8003c80 <USB_EPStartXfer+0x1d8>
 8003b54:	f8d5 8010 	ldr.w	r8, [r5, #16]
 8003b58:	ea0c 4cce 	and.w	ip, ip, lr, lsl #19
 8003b5c:	ea4c 0c08 	orr.w	ip, ip, r8
 8003b60:	f8c5 c010 	str.w	ip, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b64:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8003b68:	f3c3 0c12 	ubfx	ip, r3, #0, #19
 8003b6c:	ea4c 0c0e 	orr.w	ip, ip, lr
      if (ep->type == EP_TYPE_ISOC)
 8003b70:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003b72:	f8c5 c010 	str.w	ip, [r5, #16]
      if (ep->type == EP_TYPE_ISOC)
 8003b76:	d1bb      	bne.n	8003af0 <USB_EPStartXfer+0x48>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003b78:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003b7c:	f02c 4cc0 	bic.w	ip, ip, #1610612736	; 0x60000000
 8003b80:	f8c5 c010 	str.w	ip, [r5, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003b84:	f8d5 c010 	ldr.w	ip, [r5, #16]
 8003b88:	f04c 5c00 	orr.w	ip, ip, #536870912	; 0x20000000
 8003b8c:	f8c5 c010 	str.w	ip, [r5, #16]
 8003b90:	e7ae      	b.n	8003af0 <USB_EPStartXfer+0x48>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b92:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003b96:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b98:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8003b9c:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8003ba0:	d00b      	beq.n	8003bba <USB_EPStartXfer+0x112>
        if (ep->xfer_len > 0U)
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0be      	beq.n	8003b24 <USB_EPStartXfer+0x7c>
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003ba6:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8003baa:	f006 020f 	and.w	r2, r6, #15
 8003bae:	2601      	movs	r6, #1
 8003bb0:	4096      	lsls	r6, r2
 8003bb2:	431e      	orrs	r6, r3
 8003bb4:	f8c0 6834 	str.w	r6, [r0, #2100]	; 0x834
 8003bb8:	e7b4      	b.n	8003b24 <USB_EPStartXfer+0x7c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bba:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8003bbe:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003bc2:	f8d4 5900 	ldr.w	r5, [r4, #2304]	; 0x900
 8003bc6:	bf0c      	ite	eq
 8003bc8:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003bcc:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8003bd0:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003bd4:	9200      	str	r2, [sp, #0]
 8003bd6:	68c9      	ldr	r1, [r1, #12]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	4632      	mov	r2, r6
 8003bdc:	f7ff ff50 	bl	8003a80 <USB_WritePacket>
 8003be0:	e7a0      	b.n	8003b24 <USB_EPStartXfer+0x7c>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003be2:	f8d4 6b10 	ldr.w	r6, [r4, #2832]	; 0xb10
 8003be6:	ea06 060e 	and.w	r6, r6, lr
 8003bea:	f8c4 6b10 	str.w	r6, [r4, #2832]	; 0xb10
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bee:	f8d4 6b10 	ldr.w	r6, [r4, #2832]	; 0xb10
 8003bf2:	ea06 060c 	and.w	r6, r6, ip
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003bf6:	f504 6530 	add.w	r5, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003bfa:	612e      	str	r6, [r5, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003bfc:	688e      	ldr	r6, [r1, #8]
    if (ep->xfer_len == 0U)
 8003bfe:	bb1b      	cbnz	r3, 8003c48 <USB_EPStartXfer+0x1a0>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003c00:	692b      	ldr	r3, [r5, #16]
 8003c02:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003c06:	431e      	orrs	r6, r3
 8003c08:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c0a:	692b      	ldr	r3, [r5, #16]
 8003c0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c10:	612b      	str	r3, [r5, #16]
    if (dma == 1U)
 8003c12:	2a01      	cmp	r2, #1
 8003c14:	d102      	bne.n	8003c1c <USB_EPStartXfer+0x174>
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c16:	68cb      	ldr	r3, [r1, #12]
 8003c18:	b103      	cbz	r3, 8003c1c <USB_EPStartXfer+0x174>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c1a:	616b      	str	r3, [r5, #20]
    if (ep->type == EP_TYPE_ISOC)
 8003c1c:	2f01      	cmp	r7, #1
 8003c1e:	d10c      	bne.n	8003c3a <USB_EPStartXfer+0x192>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c20:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8003c24:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c28:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003c2c:	bf0c      	ite	eq
 8003c2e:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c32:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8003c36:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c3a:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8003c3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c42:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
 8003c46:	e76d      	b.n	8003b24 <USB_EPStartXfer+0x7c>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c48:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8003c80 <USB_EPStartXfer+0x1d8>
 8003c4c:	f8d5 e010 	ldr.w	lr, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003c50:	4433      	add	r3, r6
 8003c52:	3b01      	subs	r3, #1
 8003c54:	fbb3 f3f6 	udiv	r3, r3, r6
 8003c58:	fa1f fc83 	uxth.w	ip, r3
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003c5c:	ea08 43c3 	and.w	r3, r8, r3, lsl #19
 8003c60:	ea43 030e 	orr.w	r3, r3, lr
 8003c64:	612b      	str	r3, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003c66:	692b      	ldr	r3, [r5, #16]
 8003c68:	fb06 f60c 	mul.w	r6, r6, ip
 8003c6c:	f3c6 0612 	ubfx	r6, r6, #0, #19
 8003c70:	431e      	orrs	r6, r3
 8003c72:	612e      	str	r6, [r5, #16]
 8003c74:	e7cd      	b.n	8003c12 <USB_EPStartXfer+0x16a>
 8003c76:	bf00      	nop
 8003c78:	e007ffff 	.word	0xe007ffff
 8003c7c:	fff80000 	.word	0xfff80000
 8003c80:	1ff80000 	.word	0x1ff80000

08003c84 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003c84:	3203      	adds	r2, #3
 8003c86:	0892      	lsrs	r2, r2, #2
 8003c88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c8c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8003c90:	4291      	cmp	r1, r2
 8003c92:	d101      	bne.n	8003c98 <USB_ReadPacket+0x14>
}
 8003c94:	4608      	mov	r0, r1
 8003c96:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c98:	6803      	ldr	r3, [r0, #0]
 8003c9a:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8003c9e:	e7f7      	b.n	8003c90 <USB_ReadPacket+0xc>

08003ca0 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8003ca0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8003ca2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003ca4:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003ca6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8003caa:	d112      	bne.n	8003cd2 <USB_EPSetStall+0x32>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cac:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	db06      	blt.n	8003cc2 <USB_EPSetStall+0x22>
 8003cb4:	b12b      	cbz	r3, 8003cc2 <USB_EPSetStall+0x22>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003cb6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003cba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cbe:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003cc2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003cc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cca:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003cce:	2000      	movs	r0, #0
 8003cd0:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cd2:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	db06      	blt.n	8003ce8 <USB_EPSetStall+0x48>
 8003cda:	b12b      	cbz	r3, 8003ce8 <USB_EPSetStall+0x48>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003cdc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003ce0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ce4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ce8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8003cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003cf0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8003cf4:	e7eb      	b.n	8003cce <USB_EPSetStall+0x2e>

08003cf6 <USB_EPClearStall>:
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cf6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8003cf8:	784a      	ldrb	r2, [r1, #1]
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003cfa:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003cfe:	78cb      	ldrb	r3, [r1, #3]
  if (ep->is_in == 1U)
 8003d00:	2a01      	cmp	r2, #1
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d02:	f1a3 0302 	sub.w	r3, r3, #2
 8003d06:	b2db      	uxtb	r3, r3
  if (ep->is_in == 1U)
 8003d08:	d10f      	bne.n	8003d2a <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d0a:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d0e:	2b01      	cmp	r3, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d10:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003d14:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d18:	d805      	bhi.n	8003d26 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d1a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d22:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8003d26:	2000      	movs	r0, #0
 8003d28:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d2a:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8003d2e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d32:	2b01      	cmp	r3, #1
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d34:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d38:	bf9e      	ittt	ls
 8003d3a:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8003d3e:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8003d42:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8003d46:	e7ee      	b.n	8003d26 <USB_EPClearStall+0x30>

08003d48 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003d48:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003d4c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d50:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003d54:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8003d58:	0109      	lsls	r1, r1, #4
 8003d5a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8003d5e:	4319      	orrs	r1, r3
 8003d60:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8003d64:	2000      	movs	r0, #0
 8003d66:	4770      	bx	lr

08003d68 <USB_DevConnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d68:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003d6c:	f023 0303 	bic.w	r3, r3, #3
 8003d70:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003d74:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003d78:	f023 0302 	bic.w	r3, r3, #2
 8003d7c:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003d80:	2000      	movs	r0, #0
 8003d82:	4770      	bx	lr

08003d84 <USB_DevDisconnect>:
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003d84:	f8d0 3e00 	ldr.w	r3, [r0, #3584]	; 0xe00
 8003d88:	f023 0303 	bic.w	r3, r3, #3
 8003d8c:	f8c0 3e00 	str.w	r3, [r0, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d90:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003d94:	f043 0302 	orr.w	r3, r3, #2
 8003d98:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	4770      	bx	lr

08003da0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003da0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003da2:	6980      	ldr	r0, [r0, #24]
}
 8003da4:	4010      	ands	r0, r2
 8003da6:	4770      	bx	lr

08003da8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003da8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003dac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003db0:	69c0      	ldr	r0, [r0, #28]
 8003db2:	4018      	ands	r0, r3
}
 8003db4:	0c00      	lsrs	r0, r0, #16
 8003db6:	4770      	bx	lr

08003db8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8003db8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8003dbc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003dc0:	69c0      	ldr	r0, [r0, #28]
 8003dc2:	4018      	ands	r0, r3
}
 8003dc4:	b280      	uxth	r0, r0
 8003dc6:	4770      	bx	lr

08003dc8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003dc8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003dcc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003dd0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003dd4:	6940      	ldr	r0, [r0, #20]
}
 8003dd6:	4010      	ands	r0, r2
 8003dd8:	4770      	bx	lr

08003dda <USB_ReadDevInEPInterrupt>:
{
 8003dda:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8003ddc:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003de0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003de4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003de8:	f001 010f 	and.w	r1, r1, #15
 8003dec:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003dee:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003df2:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003df4:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4323      	orrs	r3, r4
}
 8003dfa:	4018      	ands	r0, r3
 8003dfc:	bd10      	pop	{r4, pc}

08003dfe <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003dfe:	6940      	ldr	r0, [r0, #20]
}
 8003e00:	f000 0001 	and.w	r0, r0, #1
 8003e04:	4770      	bx	lr

08003e06 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003e06:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8003e0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003e0e:	f023 0307 	bic.w	r3, r3, #7
 8003e12:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003e16:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8003e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e1e:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
}
 8003e22:	2000      	movs	r0, #0
 8003e24:	4770      	bx	lr
	...

08003e28 <USB_EP0_OutStart>:
{
 8003e28:	b530      	push	{r4, r5, lr}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e2a:	6c05      	ldr	r5, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003e2c:	4c10      	ldr	r4, [pc, #64]	; (8003e70 <USB_EP0_OutStart+0x48>)
 8003e2e:	42a5      	cmp	r5, r4
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e30:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003e34:	d903      	bls.n	8003e3e <USB_EP0_OutStart+0x16>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e36:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 8003e3a:	2c00      	cmp	r4, #0
 8003e3c:	db16      	blt.n	8003e6c <USB_EP0_OutStart+0x44>
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003e3e:	2400      	movs	r4, #0
 8003e40:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e42:	691c      	ldr	r4, [r3, #16]
 8003e44:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8003e48:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003e4a:	691c      	ldr	r4, [r3, #16]
 8003e4c:	f044 0418 	orr.w	r4, r4, #24
 8003e50:	611c      	str	r4, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003e52:	691c      	ldr	r4, [r3, #16]
  if (dma == 1U)
 8003e54:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003e56:	f044 44c0 	orr.w	r4, r4, #1610612736	; 0x60000000
 8003e5a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003e5c:	bf01      	itttt	eq
 8003e5e:	615a      	streq	r2, [r3, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003e60:	f8d0 3b00 	ldreq.w	r3, [r0, #2816]	; 0xb00
 8003e64:	f043 2380 	orreq.w	r3, r3, #2147516416	; 0x80008000
 8003e68:	f8c0 3b00 	streq.w	r3, [r0, #2816]	; 0xb00
}
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	bd30      	pop	{r4, r5, pc}
 8003e70:	4f54300a 	.word	0x4f54300a

08003e74 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003e74:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003e76:	4604      	mov	r4, r0
{
 8003e78:	b08a      	sub	sp, #40	; 0x28
  LEDx_GPIO_CLK_ENABLE(Led);
 8003e7a:	bb08      	cbnz	r0, 8003ec0 <BSP_LED_Init+0x4c>
 8003e7c:	4b27      	ldr	r3, [pc, #156]	; (8003f1c <BSP_LED_Init+0xa8>)
 8003e7e:	9001      	str	r0, [sp, #4]
 8003e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e82:	f042 0208 	orr.w	r2, r2, #8
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003e92:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <BSP_LED_Init+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003e94:	4d23      	ldr	r5, [pc, #140]	; (8003f24 <BSP_LED_Init+0xb0>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003e96:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003e9a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003e9e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ea0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003ea6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003eac:	f7fe f8e4 	bl	8002078 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003eb0:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4631      	mov	r1, r6
 8003eb8:	f7fe f9be 	bl	8002238 <HAL_GPIO_WritePin>
}
 8003ebc:	b00a      	add	sp, #40	; 0x28
 8003ebe:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8003ec0:	2801      	cmp	r0, #1
 8003ec2:	d10c      	bne.n	8003ede <BSP_LED_Init+0x6a>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9302      	str	r3, [sp, #8]
 8003ec8:	4b14      	ldr	r3, [pc, #80]	; (8003f1c <BSP_LED_Init+0xa8>)
 8003eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ecc:	f042 0208 	orr.w	r2, r2, #8
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	f003 0308 	and.w	r3, r3, #8
 8003ed8:	9302      	str	r3, [sp, #8]
 8003eda:	9b02      	ldr	r3, [sp, #8]
 8003edc:	e7d9      	b.n	8003e92 <BSP_LED_Init+0x1e>
 8003ede:	2802      	cmp	r0, #2
 8003ee0:	d10c      	bne.n	8003efc <BSP_LED_Init+0x88>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	9303      	str	r3, [sp, #12]
 8003ee6:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <BSP_LED_Init+0xa8>)
 8003ee8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eea:	f042 0208 	orr.w	r2, r2, #8
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	9303      	str	r3, [sp, #12]
 8003ef8:	9b03      	ldr	r3, [sp, #12]
 8003efa:	e7ca      	b.n	8003e92 <BSP_LED_Init+0x1e>
 8003efc:	2803      	cmp	r0, #3
 8003efe:	d1c8      	bne.n	8003e92 <BSP_LED_Init+0x1e>
 8003f00:	2300      	movs	r3, #0
 8003f02:	9304      	str	r3, [sp, #16]
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <BSP_LED_Init+0xa8>)
 8003f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f08:	f042 0208 	orr.w	r2, r2, #8
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f10:	f003 0308 	and.w	r3, r3, #8
 8003f14:	9304      	str	r3, [sp, #16]
 8003f16:	9b04      	ldr	r3, [sp, #16]
 8003f18:	e7bb      	b.n	8003e92 <BSP_LED_Init+0x1e>
 8003f1a:	bf00      	nop
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	0800b7ca 	.word	0x0800b7ca
 8003f24:	20000448 	.word	0x20000448

08003f28 <BSP_LED_On>:
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003f28:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <BSP_LED_On+0x14>)
 8003f2a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <BSP_LED_On+0x18>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003f36:	f7fe b97f 	b.w	8002238 <HAL_GPIO_WritePin>
 8003f3a:	bf00      	nop
 8003f3c:	0800b7ca 	.word	0x0800b7ca
 8003f40:	20000448 	.word	0x20000448

08003f44 <BSP_LED_Off>:
  *     @arg LED5
  *     @arg LED6 
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003f44:	4b04      	ldr	r3, [pc, #16]	; (8003f58 <BSP_LED_Off+0x14>)
 8003f46:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <BSP_LED_Off+0x18>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003f52:	f7fe b971 	b.w	8002238 <HAL_GPIO_WritePin>
 8003f56:	bf00      	nop
 8003f58:	0800b7ca 	.word	0x0800b7ca
 8003f5c:	20000448 	.word	0x20000448

08003f60 <USBD_MIDI_Setup>:
static uint8_t USBD_MIDI_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(pdev);
  UNUSED(req);
  return (uint8_t) USBD_OK;
}
 8003f60:	2000      	movs	r0, #0
 8003f62:	4770      	bx	lr

08003f64 <USBD_MIDI_GetCfgDesc>:

}

static uint8_t  *USBD_MIDI_GetCfgDesc (uint16_t *length)
{
  *length = (uint16_t)sizeof (USBD_MIDI_CfgDesc);
 8003f64:	2365      	movs	r3, #101	; 0x65
 8003f66:	8003      	strh	r3, [r0, #0]
  return USBD_MIDI_CfgDesc;
}
 8003f68:	4800      	ldr	r0, [pc, #0]	; (8003f6c <USBD_MIDI_GetCfgDesc+0x8>)
 8003f6a:	4770      	bx	lr
 8003f6c:	20000490 	.word	0x20000490

08003f70 <USBD_MIDI_GetDeviceQualifierDesc>:
  return USBD_MIDI_CfgDesc;
}

static uint8_t *USBD_MIDI_GetDeviceQualifierDesc(uint16_t *length)
{
  *length = (uint16_t)sizeof(USBD_MIDI_DeviceQualifierDesc);
 8003f70:	230a      	movs	r3, #10
 8003f72:	8003      	strh	r3, [r0, #0]

  return USBD_MIDI_DeviceQualifierDesc;
}
 8003f74:	4800      	ldr	r0, [pc, #0]	; (8003f78 <USBD_MIDI_GetDeviceQualifierDesc+0x8>)
 8003f76:	4770      	bx	lr
 8003f78:	200004f8 	.word	0x200004f8

08003f7c <USBD_MIDI_SOF>:
  USBD_MIDI_HandleTypeDef* midi = (USBD_MIDI_HandleTypeDef*)pdev->pClassData;
 8003f7c:	f8d0 12bc 	ldr.w	r1, [r0, #700]	; 0x2bc
static uint8_t  USBD_MIDI_SOF         (USBD_HandleTypeDef *pdev){
 8003f80:	b510      	push	{r4, lr}
  if (midi == NULL)
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d034      	beq.n	8003ff0 <USBD_MIDI_SOF+0x74>
	if ((midi->FrameCount)++ == MIDI_IN_FRAME_INTERVAL)
 8003f86:	690b      	ldr	r3, [r1, #16]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	f103 0201 	add.w	r2, r3, #1
 8003f8e:	d002      	beq.n	8003f96 <USBD_MIDI_SOF+0x1a>
 8003f90:	610a      	str	r2, [r1, #16]
	return (uint8_t) USBD_OK;
 8003f92:	2000      	movs	r0, #0
 8003f94:	e00f      	b.n	8003fb6 <USBD_MIDI_SOF+0x3a>
	if(midi->USB_Tx_State != USB_TX_STATE_FULL) {
 8003f96:	7b0a      	ldrb	r2, [r1, #12]
		midi->FrameCount = 0;
 8003f98:	2300      	movs	r3, #0
	if(midi->USB_Tx_State != USB_TX_STATE_FULL) {
 8003f9a:	2a01      	cmp	r2, #1
		midi->FrameCount = 0;
 8003f9c:	610b      	str	r3, [r1, #16]
	if(midi->USB_Tx_State != USB_TX_STATE_FULL) {
 8003f9e:	d0f8      	beq.n	8003f92 <USBD_MIDI_SOF+0x16>
		if (midi->APP_Rx_ptr_out == APP_RX_DATA_SIZE) {
 8003fa0:	684a      	ldr	r2, [r1, #4]
 8003fa2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
			midi->APP_Rx_ptr_out = 0;
 8003fa6:	bf08      	it	eq
 8003fa8:	604b      	streq	r3, [r1, #4]
		if(midi->APP_Rx_ptr_out == midi->APP_Rx_ptr_in){
 8003faa:	e9d1 2400 	ldrd	r2, r4, [r1]
 8003fae:	4294      	cmp	r4, r2
 8003fb0:	d102      	bne.n	8003fb8 <USBD_MIDI_SOF+0x3c>
			midi->USB_Tx_State = USB_TX_STATE_EMPTY;
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	7308      	strb	r0, [r1, #12]
}
 8003fb6:	bd10      	pop	{r4, pc}
			midi->APP_Rx_length = APP_RX_DATA_SIZE - midi->APP_Rx_ptr_out;
 8003fb8:	bf8c      	ite	hi
 8003fba:	f5c4 6200 	rsbhi	r2, r4, #2048	; 0x800
			midi->APP_Rx_length = midi->APP_Rx_ptr_in - midi->APP_Rx_ptr_out;
 8003fbe:	1b12      	subls	r2, r2, r4
		if (midi->APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 8003fc0:	2a40      	cmp	r2, #64	; 0x40
 8003fc2:	608a      	str	r2, [r1, #8]
 8003fc4:	d90e      	bls.n	8003fe4 <USBD_MIDI_SOF+0x68>
			midi->APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 8003fc6:	f104 0340 	add.w	r3, r4, #64	; 0x40
			midi->APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 8003fca:	3a40      	subs	r2, #64	; 0x40
			midi->APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 8003fcc:	604b      	str	r3, [r1, #4]
			midi->APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 8003fce:	608a      	str	r2, [r1, #8]
			USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 8003fd0:	2340      	movs	r3, #64	; 0x40
		midi->USB_Tx_State = USB_TX_STATE_FULL;
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	730a      	strb	r2, [r1, #12]
    (void)USBD_LL_Transmit(pdev, MIDI_IN_EP, (uint8_t*)&(midi->APP_Rx_Buffer[USB_Tx_ptr]), USB_Tx_length);
 8003fd6:	b2a2      	uxth	r2, r4
 8003fd8:	3254      	adds	r2, #84	; 0x54
 8003fda:	440a      	add	r2, r1
 8003fdc:	2181      	movs	r1, #129	; 0x81
 8003fde:	f001 f993 	bl	8005308 <USBD_LL_Transmit>
 8003fe2:	e7d6      	b.n	8003f92 <USBD_MIDI_SOF+0x16>
			USB_Tx_length = midi->APP_Rx_length;
 8003fe4:	b293      	uxth	r3, r2
			midi->APP_Rx_ptr_out += midi->APP_Rx_length;
 8003fe6:	4422      	add	r2, r4
 8003fe8:	604a      	str	r2, [r1, #4]
			midi->APP_Rx_length = 0;
 8003fea:	2200      	movs	r2, #0
 8003fec:	608a      	str	r2, [r1, #8]
 8003fee:	e7f0      	b.n	8003fd2 <USBD_MIDI_SOF+0x56>
    return (uint8_t)USBD_FAIL;
 8003ff0:	2003      	movs	r0, #3
 8003ff2:	e7e0      	b.n	8003fb6 <USBD_MIDI_SOF+0x3a>

08003ff4 <USBD_MIDI_DataIn>:
static uint8_t  USBD_MIDI_DataIn      (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8003ff4:	b510      	push	{r4, lr}
  midi = (USBD_MIDI_HandleTypeDef *)pdev->pClassData;
 8003ff6:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (midi == NULL)
 8003ffa:	b1ec      	cbz	r4, 8004038 <USBD_MIDI_DataIn+0x44>
	if (midi->USB_Tx_State == USB_TX_STATE_FULL) {
 8003ffc:	7b23      	ldrb	r3, [r4, #12]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d102      	bne.n	8004008 <USBD_MIDI_DataIn+0x14>
		if (midi->APP_Rx_length == 0) {
 8004002:	68a1      	ldr	r1, [r4, #8]
 8004004:	b911      	cbnz	r1, 800400c <USBD_MIDI_DataIn+0x18>
			midi->USB_Tx_State = USB_TX_STATE_EMPTY;
 8004006:	7321      	strb	r1, [r4, #12]
	return (uint8_t) USBD_OK;
 8004008:	2000      	movs	r0, #0
 800400a:	e016      	b.n	800403a <USBD_MIDI_DataIn+0x46>
			if (midi->APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 800400c:	2940      	cmp	r1, #64	; 0x40
				USB_Tx_ptr = midi->APP_Rx_ptr_out;
 800400e:	6862      	ldr	r2, [r4, #4]
			if (midi->APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 8004010:	d90c      	bls.n	800402c <USBD_MIDI_DataIn+0x38>
				midi->APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 8004012:	f102 0340 	add.w	r3, r2, #64	; 0x40
				midi->APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 8004016:	3940      	subs	r1, #64	; 0x40
				midi->APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 8004018:	6063      	str	r3, [r4, #4]
				midi->APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 800401a:	60a1      	str	r1, [r4, #8]
				USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 800401c:	2340      	movs	r3, #64	; 0x40
      (void)USBD_LL_Transmit(pdev, MIDI_IN_EP, (uint8_t*)&(midi->APP_Rx_Buffer[USB_Tx_ptr]), USB_Tx_length);
 800401e:	b292      	uxth	r2, r2
 8004020:	3254      	adds	r2, #84	; 0x54
 8004022:	4422      	add	r2, r4
 8004024:	2181      	movs	r1, #129	; 0x81
 8004026:	f001 f96f 	bl	8005308 <USBD_LL_Transmit>
 800402a:	e7ed      	b.n	8004008 <USBD_MIDI_DataIn+0x14>
				USB_Tx_length = midi->APP_Rx_length;
 800402c:	b28b      	uxth	r3, r1
				midi->APP_Rx_ptr_out += midi->APP_Rx_length;
 800402e:	4411      	add	r1, r2
 8004030:	6061      	str	r1, [r4, #4]
				midi->APP_Rx_length = 0;
 8004032:	2100      	movs	r1, #0
 8004034:	60a1      	str	r1, [r4, #8]
 8004036:	e7f2      	b.n	800401e <USBD_MIDI_DataIn+0x2a>
    return (uint8_t)USBD_FAIL;
 8004038:	2003      	movs	r0, #3
}
 800403a:	bd10      	pop	{r4, pc}

0800403c <USBD_MIDI_DataOut>:
static uint8_t  USBD_MIDI_DataOut     (USBD_HandleTypeDef *pdev, uint8_t epnum){
 800403c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBD_MIDI_HandleTypeDef*midi = (USBD_MIDI_HandleTypeDef *)pdev->pClassData;
 800403e:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
static uint8_t  USBD_MIDI_DataOut     (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8004042:	4604      	mov	r4, r0
  if (midi == NULL)
 8004044:	b195      	cbz	r5, 800406c <USBD_MIDI_DataOut+0x30>
  USB_Rx_Cnt = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8004046:	f001 f96d 	bl	8005324 <USBD_LL_GetRxDataSize>
  midi->Rx_callback((uint8_t*)&(midi->USB_Rx_Buffer), USB_Rx_Cnt);
 800404a:	f105 0214 	add.w	r2, r5, #20
 800404e:	b281      	uxth	r1, r0
 8004050:	f8d5 3854 	ldr.w	r3, [r5, #2132]	; 0x854
 8004054:	9201      	str	r2, [sp, #4]
 8004056:	4610      	mov	r0, r2
 8004058:	4798      	blx	r3
  (void)USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP ,(uint8_t*)(midi->USB_Rx_Buffer), MIDI_DATA_OUT_PACKET_SIZE);
 800405a:	9a01      	ldr	r2, [sp, #4]
 800405c:	2340      	movs	r3, #64	; 0x40
 800405e:	2101      	movs	r1, #1
 8004060:	4620      	mov	r0, r4
 8004062:	f001 f958 	bl	8005316 <USBD_LL_PrepareReceive>
	return (uint8_t) USBD_OK;
 8004066:	2000      	movs	r0, #0
}
 8004068:	b003      	add	sp, #12
 800406a:	bd30      	pop	{r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 800406c:	2003      	movs	r0, #3
 800406e:	e7fb      	b.n	8004068 <USBD_MIDI_DataOut+0x2c>

08004070 <USBD_MIDI_DeInit>:
static uint8_t  USBD_MIDI_DeInit      (USBD_HandleTypeDef  *pdev, uint8_t cfgidx){
 8004070:	b538      	push	{r3, r4, r5, lr}
 8004072:	4604      	mov	r4, r0
  (void)USBD_LL_CloseEP(pdev, MIDI_IN_EP);
 8004074:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 0U;
 8004076:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, MIDI_IN_EP);
 8004078:	f001 f917 	bl	80052aa <USBD_LL_CloseEP>
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 0U;
 800407c:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, MIDI_OUT_EP);
 800407e:	2101      	movs	r1, #1
 8004080:	4620      	mov	r0, r4
 8004082:	f001 f912 	bl	80052aa <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL) {
 8004086:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
  pdev->ep_in[MIDI_OUT_EP & 0xFU].is_used = 0U;
 800408a:	8725      	strh	r5, [r4, #56]	; 0x38
  if (pdev->pClassData != NULL) {
 800408c:	b118      	cbz	r0, 8004096 <USBD_MIDI_DeInit+0x26>
    (void)USBD_free(pdev->pClassData);
 800408e:	f001 fa71 	bl	8005574 <free>
    pdev->pClassData = NULL;
 8004092:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8004096:	2000      	movs	r0, #0
 8004098:	bd38      	pop	{r3, r4, r5, pc}
	...

0800409c <USBD_MIDI_Init>:
{
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	4606      	mov	r6, r0
  midi = USBD_malloc(sizeof(USBD_MIDI_HandleTypeDef));
 80040a0:	f640 0058 	movw	r0, #2136	; 0x858
 80040a4:	f001 fa5e 	bl	8005564 <malloc>
  if (midi == NULL)
 80040a8:	4604      	mov	r4, r0
 80040aa:	b918      	cbnz	r0, 80040b4 <USBD_MIDI_Init+0x18>
    pdev->pClassData = NULL;
 80040ac:	f8c6 02bc 	str.w	r0, [r6, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80040b0:	2002      	movs	r0, #2
}
 80040b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  midi->APP_Rx_ptr_in = 0;
 80040b4:	2500      	movs	r5, #0
  midi->Rx_callback = MIDI_DataRx;
 80040b6:	4b11      	ldr	r3, [pc, #68]	; (80040fc <USBD_MIDI_Init+0x60>)
 80040b8:	f8c0 3854 	str.w	r3, [r0, #2132]	; 0x854
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 1U;
 80040bc:	2701      	movs	r7, #1
  midi->APP_Rx_ptr_out = 0;
 80040be:	e9c0 5500 	strd	r5, r5, [r0]
  midi->APP_Rx_length = 0;
 80040c2:	6085      	str	r5, [r0, #8]
  midi->USB_Tx_State = 0;
 80040c4:	7305      	strb	r5, [r0, #12]
  midi->FrameCount = 0;
 80040c6:	6105      	str	r5, [r0, #16]
  pdev->pClassData = (void *)midi;
 80040c8:	f8c6 02bc 	str.w	r0, [r6, #700]	; 0x2bc
  (void)USBD_LL_OpenEP(pdev, MIDI_IN_EP, USBD_EP_TYPE_BULK, MIDI_DATA_IN_PACKET_SIZE);
 80040cc:	2340      	movs	r3, #64	; 0x40
 80040ce:	2202      	movs	r2, #2
 80040d0:	2181      	movs	r1, #129	; 0x81
 80040d2:	4630      	mov	r0, r6
 80040d4:	f001 f8df 	bl	8005296 <USBD_LL_OpenEP>
  (void)USBD_LL_OpenEP(pdev, MIDI_OUT_EP, USBD_EP_TYPE_BULK, MIDI_DATA_OUT_PACKET_SIZE);
 80040d8:	2340      	movs	r3, #64	; 0x40
 80040da:	2202      	movs	r2, #2
 80040dc:	4639      	mov	r1, r7
  pdev->ep_in[MIDI_IN_EP & 0xFU].is_used = 1U;
 80040de:	8737      	strh	r7, [r6, #56]	; 0x38
  (void)USBD_LL_OpenEP(pdev, MIDI_OUT_EP, USBD_EP_TYPE_BULK, MIDI_DATA_OUT_PACKET_SIZE);
 80040e0:	4630      	mov	r0, r6
 80040e2:	f001 f8d8 	bl	8005296 <USBD_LL_OpenEP>
  pdev->ep_out[MIDI_OUT_EP & 0xFU].is_used = 1U;
 80040e6:	f8a6 7178 	strh.w	r7, [r6, #376]	; 0x178
  (void)USBD_LL_PrepareReceive(pdev, MIDI_OUT_EP ,(uint8_t*)(midi->USB_Rx_Buffer), MIDI_DATA_OUT_PACKET_SIZE);
 80040ea:	2340      	movs	r3, #64	; 0x40
 80040ec:	f104 0214 	add.w	r2, r4, #20
 80040f0:	4639      	mov	r1, r7
 80040f2:	4630      	mov	r0, r6
 80040f4:	f001 f90f 	bl	8005316 <USBD_LL_PrepareReceive>
	return (uint8_t) USBD_OK;
 80040f8:	4628      	mov	r0, r5
 80040fa:	e7da      	b.n	80040b2 <USBD_MIDI_Init+0x16>
 80040fc:	08004b61 	.word	0x08004b61

08004100 <USBD_MIDI_GetOtherSpeedCfgDesc>:
 8004100:	2365      	movs	r3, #101	; 0x65
 8004102:	8003      	strh	r3, [r0, #0]
 8004104:	4800      	ldr	r0, [pc, #0]	; (8004108 <USBD_MIDI_GetOtherSpeedCfgDesc+0x8>)
 8004106:	4770      	bx	lr
 8004108:	20000490 	.word	0x20000490

0800410c <USBD_MIDI_SendMsg>:
{
 800410c:	b5f0      	push	{r4, r5, r6, r7, lr}
  midi = (USBD_MIDI_HandleTypeDef *)pdev->pClassData;
 800410e:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if (midi == NULL)
 8004112:	b194      	cbz	r4, 800413a <USBD_MIDI_SendMsg+0x2e>
	uint32_t i = 0;
 8004114:	2000      	movs	r0, #0
			midi->APP_Rx_ptr_in = 0;
 8004116:	4605      	mov	r5, r0
	while (i < length) {
 8004118:	4290      	cmp	r0, r2
 800411a:	d301      	bcc.n	8004120 <USBD_MIDI_SendMsg+0x14>
	return USBD_OK;
 800411c:	2000      	movs	r0, #0
}
 800411e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		midi->APP_Rx_Buffer[midi->APP_Rx_ptr_in] = *(msg + i);
 8004120:	6823      	ldr	r3, [r4, #0]
 8004122:	5c0f      	ldrb	r7, [r1, r0]
 8004124:	18e6      	adds	r6, r4, r3
		midi->APP_Rx_ptr_in++;
 8004126:	3301      	adds	r3, #1
		if (midi->APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8004128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		midi->APP_Rx_ptr_in++;
 800412c:	bf08      	it	eq
 800412e:	462b      	moveq	r3, r5
		midi->APP_Rx_Buffer[midi->APP_Rx_ptr_in] = *(msg + i);
 8004130:	f886 7054 	strb.w	r7, [r6, #84]	; 0x54
		i++;
 8004134:	3001      	adds	r0, #1
		midi->APP_Rx_ptr_in++;
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	e7ee      	b.n	8004118 <USBD_MIDI_SendMsg+0xc>
    return (uint8_t)USBD_FAIL;
 800413a:	2003      	movs	r0, #3
 800413c:	e7ef      	b.n	800411e <USBD_MIDI_SendMsg+0x12>

0800413e <USBD_MIDI_SendPitch>:
    *(midi_packet + 2 ) = (uint8_t) ((midi_pitch->pitchBend >> 8) & 0x00FF);
    *(midi_packet + 3 ) = (uint8_t) (midi_pitch->pitchBend & 0x00FF);
}

USBD_StatusTypeDef USBD_MIDI_SendPitch(USBD_HandleTypeDef *pdev, USBD_MIDI_PitchTypedef *midi_pitch)
{
 800413e:	b507      	push	{r0, r1, r2, lr}
    *(midi_packet     ) =  0x0E;
 8004140:	230e      	movs	r3, #14
 8004142:	f88d 3004 	strb.w	r3, [sp, #4]
    *(midi_packet + 1 ) = (0xE0 | (0x0f & midi_pitch->channel));
 8004146:	784b      	ldrb	r3, [r1, #1]
 8004148:	f003 030f 	and.w	r3, r3, #15
 800414c:	f063 031f 	orn	r3, r3, #31
 8004150:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t message [4];
  set_pitch(message, midi_pitch);
  return USBD_MIDI_SendMsg(pdev, message, 4);
 8004154:	2204      	movs	r2, #4
    *(midi_packet + 2 ) = (uint8_t) ((midi_pitch->pitchBend >> 8) & 0x00FF);
 8004156:	2300      	movs	r3, #0
 8004158:	f88d 3006 	strb.w	r3, [sp, #6]
    *(midi_packet + 3 ) = (uint8_t) (midi_pitch->pitchBend & 0x00FF);
 800415c:	780b      	ldrb	r3, [r1, #0]
 800415e:	f88d 3007 	strb.w	r3, [sp, #7]
  return USBD_MIDI_SendMsg(pdev, message, 4);
 8004162:	eb0d 0102 	add.w	r1, sp, r2
 8004166:	f7ff ffd1 	bl	800410c <USBD_MIDI_SendMsg>
}
 800416a:	b003      	add	sp, #12
 800416c:	f85d fb04 	ldr.w	pc, [sp], #4

08004170 <USBD_MIDI_SendNote>:

   return USBD_MIDI_SendMsg(pdev, b, 4);
}

USBD_StatusTypeDef USBD_MIDI_SendNote(USBD_HandleTypeDef *pdev, USBD_MIDI_NoteTypedef *midi_note)
{
 8004170:	b507      	push	{r0, r1, r2, lr}
  if (midi_note->cmd == NOTE_ON || midi_note->cmd == NOTE_OFF ){
 8004172:	78ca      	ldrb	r2, [r1, #3]
 8004174:	2a01      	cmp	r2, #1
 8004176:	d810      	bhi.n	800419a <USBD_MIDI_SendNote+0x2a>
    *(midi_packet     ) = 0x08;
 8004178:	2308      	movs	r3, #8
 800417a:	f88d 3004 	strb.w	r3, [sp, #4]
    *(midi_packet + 1 ) = (midi_note->cmd == NOTE_ON) ? \
 800417e:	788b      	ldrb	r3, [r1, #2]
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	b98a      	cbnz	r2, 80041aa <USBD_MIDI_SendNote+0x3a>
 8004186:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800418a:	f88d 3005 	strb.w	r3, [sp, #5]
    *(midi_packet + 2 ) = midi_note->note;
 800418e:	780b      	ldrb	r3, [r1, #0]
 8004190:	f88d 3006 	strb.w	r3, [sp, #6]
    *(midi_packet + 3 ) = midi_note->velocity;
 8004194:	784b      	ldrb	r3, [r1, #1]
 8004196:	f88d 3007 	strb.w	r3, [sp, #7]
  uint8_t message [4];
  set_note(message , midi_note);
  return USBD_MIDI_SendMsg(pdev,message, 4);
 800419a:	2204      	movs	r2, #4
 800419c:	eb0d 0102 	add.w	r1, sp, r2
 80041a0:	f7ff ffb4 	bl	800410c <USBD_MIDI_SendMsg>
}
 80041a4:	b003      	add	sp, #12
 80041a6:	f85d fb04 	ldr.w	pc, [sp], #4
    *(midi_packet + 1 ) = (midi_note->cmd == NOTE_ON) ? \
 80041aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ae:	e7ec      	b.n	800418a <USBD_MIDI_SendNote+0x1a>

080041b0 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80041b0:	b178      	cbz	r0, 80041d2 <USBD_Init+0x22>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80041b8:	f8c0 32c0 	str.w	r3, [r0, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80041bc:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80041c0:	b109      	cbz	r1, 80041c6 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80041c2:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80041c6:	2301      	movs	r3, #1
 80041c8:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->id = id;
 80041cc:	7002      	strb	r2, [r0, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80041ce:	f001 b82b 	b.w	8005228 <USBD_LL_Init>

  return ret;
}
 80041d2:	2003      	movs	r0, #3
 80041d4:	4770      	bx	lr

080041d6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80041d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t len = 0U;
 80041d8:	2500      	movs	r5, #0
{
 80041da:	4604      	mov	r4, r0
  uint16_t len = 0U;
 80041dc:	f8ad 5006 	strh.w	r5, [sp, #6]

  if (pclass == NULL)
 80041e0:	b159      	cbz	r1, 80041fa <USBD_RegisterClass+0x24>
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80041e2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
  pdev->pClass = pclass;
 80041e4:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80041e8:	b14b      	cbz	r3, 80041fe <USBD_RegisterClass+0x28>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80041ea:	f10d 0006 	add.w	r0, sp, #6
 80041ee:	4798      	blx	r3
 80041f0:	f8c4 02cc 	str.w	r0, [r4, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80041f4:	4628      	mov	r0, r5
}
 80041f6:	b003      	add	sp, #12
 80041f8:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80041fa:	2003      	movs	r0, #3
 80041fc:	e7fb      	b.n	80041f6 <USBD_RegisterClass+0x20>
  return USBD_OK;
 80041fe:	4618      	mov	r0, r3
 8004200:	e7f9      	b.n	80041f6 <USBD_RegisterClass+0x20>

08004202 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004202:	f001 b841 	b.w	8005288 <USBD_LL_Start>

08004206 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8004206:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800420a:	b10b      	cbz	r3, 8004210 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4718      	bx	r3
  }

  return ret;
}
 8004210:	2003      	movs	r0, #3
 8004212:	4770      	bx	lr

08004214 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004214:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004216:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800421a:	b10b      	cbz	r3, 8004220 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	4798      	blx	r3
  }

  return USBD_OK;
}
 8004220:	2000      	movs	r0, #0
 8004222:	bd08      	pop	{r3, pc}

08004224 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004224:	b538      	push	{r3, r4, r5, lr}
 8004226:	4604      	mov	r4, r0
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004228:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
 800422c:	4628      	mov	r0, r5
 800422e:	f000 fb35 	bl	800489c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004232:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8004234:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8004238:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800423c:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0
 8004240:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8004244:	f001 031f 	and.w	r3, r1, #31
 8004248:	2b01      	cmp	r3, #1
 800424a:	d008      	beq.n	800425e <USBD_LL_SetupStage+0x3a>
 800424c:	2b02      	cmp	r3, #2
 800424e:	d00c      	beq.n	800426a <USBD_LL_SetupStage+0x46>
 8004250:	b98b      	cbnz	r3, 8004276 <USBD_LL_SetupStage+0x52>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004252:	4629      	mov	r1, r5
 8004254:	4620      	mov	r0, r4
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return ret;
}
 8004256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800425a:	f000 b925 	b.w	80044a8 <USBD_StdDevReq>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800425e:	4629      	mov	r1, r5
 8004260:	4620      	mov	r0, r4
}
 8004262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004266:	f000 ba63 	b.w	8004730 <USBD_StdItfReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800426a:	4629      	mov	r1, r5
 800426c:	4620      	mov	r0, r4
}
 800426e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004272:	f000 ba83 	b.w	800477c <USBD_StdEPReq>
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004276:	4620      	mov	r0, r4
 8004278:	f001 0180 	and.w	r1, r1, #128	; 0x80
}
 800427c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004280:	f001 b81a 	b.w	80052b8 <USBD_LL_StallEP>

08004284 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004284:	b570      	push	{r4, r5, r6, lr}
 8004286:	4604      	mov	r4, r0
 8004288:	4615      	mov	r5, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800428a:	b9f9      	cbnz	r1, 80042cc <USBD_LL_DataOutStage+0x48>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800428c:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8004290:	2b03      	cmp	r3, #3
 8004292:	d10c      	bne.n	80042ae <USBD_LL_DataOutStage+0x2a>
    {
      if (pep->rem_length > pep->maxpacket)
 8004294:	e9d0 3257 	ldrd	r3, r2, [r0, #348]	; 0x15c
 8004298:	4293      	cmp	r3, r2
 800429a:	d90a      	bls.n	80042b2 <USBD_LL_DataOutStage+0x2e>
      {
        pep->rem_length -= pep->maxpacket;
 800429c:	1a9b      	subs	r3, r3, r2

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800429e:	429a      	cmp	r2, r3
        pep->rem_length -= pep->maxpacket;
 80042a0:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80042a4:	bf28      	it	cs
 80042a6:	461a      	movcs	r2, r3
 80042a8:	4629      	mov	r1, r5
 80042aa:	f000 fb33 	bl	8004914 <USBD_CtlContinueRx>
      }
    }
  }

  return USBD_OK;
}
 80042ae:	2000      	movs	r0, #0
 80042b0:	bd70      	pop	{r4, r5, r6, pc}
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042b2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042b6:	2b03      	cmp	r3, #3
 80042b8:	d104      	bne.n	80042c4 <USBD_LL_DataOutStage+0x40>
          if (pdev->pClass->EP0_RxReady != NULL)
 80042ba:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	b103      	cbz	r3, 80042c4 <USBD_LL_DataOutStage+0x40>
            pdev->pClass->EP0_RxReady(pdev);
 80042c2:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80042c4:	4620      	mov	r0, r4
 80042c6:	f000 fb2d 	bl	8004924 <USBD_CtlSendStatus>
 80042ca:	e7f0      	b.n	80042ae <USBD_LL_DataOutStage+0x2a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80042cc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d1ec      	bne.n	80042ae <USBD_LL_DataOutStage+0x2a>
      if (pdev->pClass->DataOut != NULL)
 80042d4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d0e7      	beq.n	80042ae <USBD_LL_DataOutStage+0x2a>
}
 80042de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80042e2:	4718      	bx	r3

080042e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80042e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80042e6:	4604      	mov	r4, r0
 80042e8:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80042ea:	2900      	cmp	r1, #0
 80042ec:	d13f      	bne.n	800436e <USBD_LL_DataInStage+0x8a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80042ee:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 80042f2:	2a02      	cmp	r2, #2
 80042f4:	d10f      	bne.n	8004316 <USBD_LL_DataInStage+0x32>
    {
      if (pep->rem_length > pep->maxpacket)
 80042f6:	e9d0 5207 	ldrd	r5, r2, [r0, #28]
 80042fa:	4295      	cmp	r5, r2
 80042fc:	d915      	bls.n	800432a <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80042fe:	1aaa      	subs	r2, r5, r2
 8004300:	9101      	str	r1, [sp, #4]
 8004302:	61c2      	str	r2, [r0, #28]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004304:	4631      	mov	r1, r6
 8004306:	f000 fafd 	bl	8004904 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800430a:	9b01      	ldr	r3, [sp, #4]
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800430c:	461a      	mov	r2, r3
 800430e:	4619      	mov	r1, r3
 8004310:	4620      	mov	r0, r4
 8004312:	f001 f800 	bl	8005316 <USBD_LL_PrepareReceive>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004316:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 800431a:	2b01      	cmp	r3, #1
 800431c:	d102      	bne.n	8004324 <USBD_LL_DataInStage+0x40>
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800431e:	2300      	movs	r3, #0
 8004320:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
      }
    }
  }

  return USBD_OK;
}
 8004324:	2000      	movs	r0, #0
 8004326:	b002      	add	sp, #8
 8004328:	bd70      	pop	{r4, r5, r6, pc}
        if ((pep->maxpacket == pep->rem_length) &&
 800432a:	d10e      	bne.n	800434a <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800432c:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 800432e:	4295      	cmp	r5, r2
 8004330:	d80b      	bhi.n	800434a <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 8004332:	f8d0 5298 	ldr.w	r5, [r0, #664]	; 0x298
 8004336:	42aa      	cmp	r2, r5
 8004338:	d207      	bcs.n	800434a <USBD_LL_DataInStage+0x66>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800433a:	460a      	mov	r2, r1
 800433c:	9101      	str	r1, [sp, #4]
 800433e:	f000 fae1 	bl	8004904 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004342:	9b01      	ldr	r3, [sp, #4]
 8004344:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 8004348:	e7e0      	b.n	800430c <USBD_LL_DataInStage+0x28>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800434a:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 800434e:	2b03      	cmp	r3, #3
 8004350:	d105      	bne.n	800435e <USBD_LL_DataInStage+0x7a>
            if (pdev->pClass->EP0_TxSent != NULL)
 8004352:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	b10b      	cbz	r3, 800435e <USBD_LL_DataInStage+0x7a>
              pdev->pClass->EP0_TxSent(pdev);
 800435a:	4620      	mov	r0, r4
 800435c:	4798      	blx	r3
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800435e:	2180      	movs	r1, #128	; 0x80
 8004360:	4620      	mov	r0, r4
 8004362:	f000 ffa9 	bl	80052b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004366:	4620      	mov	r0, r4
 8004368:	f000 fae7 	bl	800493a <USBD_CtlReceiveStatus>
 800436c:	e7d3      	b.n	8004316 <USBD_LL_DataInStage+0x32>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800436e:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004372:	2b03      	cmp	r3, #3
 8004374:	d1d6      	bne.n	8004324 <USBD_LL_DataInStage+0x40>
      if (pdev->pClass->DataIn != NULL)
 8004376:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d0d1      	beq.n	8004324 <USBD_LL_DataInStage+0x40>
}
 8004380:	b002      	add	sp, #8
 8004382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004386:	4718      	bx	r3

08004388 <USBD_LL_Reset>:
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004388:	2301      	movs	r3, #1
{
 800438a:	b570      	push	{r4, r5, r6, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800438c:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClass == NULL)
 8004390:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
  pdev->ep0_state = USBD_EP0_IDLE;
 8004394:	2100      	movs	r1, #0
{
 8004396:	4604      	mov	r4, r0
  pdev->ep0_state = USBD_EP0_IDLE;
 8004398:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 800439c:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 800439e:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClass == NULL)
 80043a2:	b1db      	cbz	r3, 80043dc <USBD_LL_Reset+0x54>
  {
    return USBD_FAIL;
  }

  if (pdev->pClassData != NULL)
 80043a4:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
 80043a8:	b112      	cbz	r2, 80043b0 <USBD_LL_Reset+0x28>
  {
    if (pdev->pClass->DeInit != NULL)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	b103      	cbz	r3, 80043b0 <USBD_LL_Reset+0x28>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80043ae:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80043b0:	2200      	movs	r2, #0
 80043b2:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80043b4:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80043b6:	2340      	movs	r3, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80043b8:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80043ba:	4620      	mov	r0, r4
 80043bc:	f000 ff6b 	bl	8005296 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80043c0:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80043c4:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80043c8:	462b      	mov	r3, r5
 80043ca:	2200      	movs	r2, #0
 80043cc:	2180      	movs	r1, #128	; 0x80
 80043ce:	4620      	mov	r0, r4
 80043d0:	f000 ff61 	bl	8005296 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80043d4:	84a6      	strh	r6, [r4, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80043d6:	6225      	str	r5, [r4, #32]

  return USBD_OK;
 80043d8:	2000      	movs	r0, #0
}
 80043da:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80043dc:	2003      	movs	r0, #3
 80043de:	e7fc      	b.n	80043da <USBD_LL_Reset+0x52>

080043e0 <USBD_LL_SetSpeed>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80043e0:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 80043e2:	2000      	movs	r0, #0
 80043e4:	4770      	bx	lr

080043e6 <USBD_LL_Suspend>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state = pdev->dev_state;
 80043e6:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f880 329d 	strb.w	r3, [r0, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80043f0:	2304      	movs	r3, #4
 80043f2:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  return USBD_OK;
}
 80043f6:	2000      	movs	r0, #0
 80043f8:	4770      	bx	lr

080043fa <USBD_LL_Resume>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80043fa:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80043fe:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8004400:	bf02      	ittt	eq
 8004402:	f890 329d 	ldrbeq.w	r3, [r0, #669]	; 0x29d
 8004406:	b2db      	uxtbeq	r3, r3
 8004408:	f880 329c 	strbeq.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 800440c:	2000      	movs	r0, #0
 800440e:	4770      	bx	lr

08004410 <USBD_LL_SOF>:
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->pClass == NULL)
 8004410:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004414:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8004416:	b142      	cbz	r2, 800442a <USBD_LL_SOF+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004418:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800441c:	2b03      	cmp	r3, #3
 800441e:	d102      	bne.n	8004426 <USBD_LL_SOF+0x16>
  {
    if (pdev->pClass->SOF != NULL)
 8004420:	69d3      	ldr	r3, [r2, #28]
 8004422:	b123      	cbz	r3, 800442e <USBD_LL_SOF+0x1e>
    {
      (void)pdev->pClass->SOF(pdev);
 8004424:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004426:	2000      	movs	r0, #0
 8004428:	e000      	b.n	800442c <USBD_LL_SOF+0x1c>
    return USBD_FAIL;
 800442a:	2003      	movs	r0, #3
}
 800442c:	bd08      	pop	{r3, pc}
  return USBD_OK;
 800442e:	4618      	mov	r0, r3
 8004430:	e7fc      	b.n	800442c <USBD_LL_SOF+0x1c>

08004432 <USBD_LL_IsoINIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8004432:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004436:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 8004438:	b142      	cbz	r2, 800444c <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800443a:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 800443e:	2b03      	cmp	r3, #3
 8004440:	d102      	bne.n	8004448 <USBD_LL_IsoINIncomplete+0x16>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004442:	6a13      	ldr	r3, [r2, #32]
 8004444:	b123      	cbz	r3, 8004450 <USBD_LL_IsoINIncomplete+0x1e>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004446:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004448:	2000      	movs	r0, #0
 800444a:	e000      	b.n	800444e <USBD_LL_IsoINIncomplete+0x1c>
    return USBD_FAIL;
 800444c:	2003      	movs	r0, #3
}
 800444e:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8004450:	4618      	mov	r0, r3
 8004452:	e7fc      	b.n	800444e <USBD_LL_IsoINIncomplete+0x1c>

08004454 <USBD_LL_IsoOUTIncomplete>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
  if (pdev->pClass == NULL)
 8004454:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
{
 8004458:	b508      	push	{r3, lr}
  if (pdev->pClass == NULL)
 800445a:	b142      	cbz	r2, 800446e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800445c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004460:	2b03      	cmp	r3, #3
 8004462:	d102      	bne.n	800446a <USBD_LL_IsoOUTIncomplete+0x16>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8004464:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8004466:	b123      	cbz	r3, 8004472 <USBD_LL_IsoOUTIncomplete+0x1e>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8004468:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800446a:	2000      	movs	r0, #0
 800446c:	e000      	b.n	8004470 <USBD_LL_IsoOUTIncomplete+0x1c>
    return USBD_FAIL;
 800446e:	2003      	movs	r0, #3
}
 8004470:	bd08      	pop	{r3, pc}
  return USBD_OK;
 8004472:	4618      	mov	r0, r3
 8004474:	e7fc      	b.n	8004470 <USBD_LL_IsoOUTIncomplete+0x1c>

08004476 <USBD_LL_DevConnected>:
 8004476:	2000      	movs	r0, #0
 8004478:	4770      	bx	lr

0800447a <USBD_LL_DevDisconnected>:
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800447a:	2201      	movs	r2, #1
{
 800447c:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 800447e:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004482:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
 8004486:	b112      	cbz	r2, 800448e <USBD_LL_DevDisconnected+0x14>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004488:	6852      	ldr	r2, [r2, #4]
 800448a:	7901      	ldrb	r1, [r0, #4]
 800448c:	4790      	blx	r2
  }

  return USBD_OK;
}
 800448e:	2000      	movs	r0, #0
 8004490:	bd08      	pop	{r3, pc}

08004492 <USBD_CtlError.constprop.0>:
  *         Handle USB low level Error
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004492:	b510      	push	{r4, lr}
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004494:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
 8004496:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8004498:	f000 ff0e 	bl	80052b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800449c:	4620      	mov	r0, r4
 800449e:	2100      	movs	r1, #0
}
 80044a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 80044a4:	f000 bf08 	b.w	80052b8 <USBD_LL_StallEP>

080044a8 <USBD_StdDevReq>:
{
 80044a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044aa:	780d      	ldrb	r5, [r1, #0]
 80044ac:	f005 0560 	and.w	r5, r5, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044b0:	2d20      	cmp	r5, #32
{
 80044b2:	4604      	mov	r4, r0
 80044b4:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80044b6:	d014      	beq.n	80044e2 <USBD_StdDevReq+0x3a>
 80044b8:	2d40      	cmp	r5, #64	; 0x40
 80044ba:	d012      	beq.n	80044e2 <USBD_StdDevReq+0x3a>
 80044bc:	2d00      	cmp	r5, #0
 80044be:	f040 8100 	bne.w	80046c2 <USBD_StdDevReq+0x21a>
      switch (req->bRequest)
 80044c2:	784f      	ldrb	r7, [r1, #1]
 80044c4:	2f09      	cmp	r7, #9
 80044c6:	f200 80fc 	bhi.w	80046c2 <USBD_StdDevReq+0x21a>
 80044ca:	e8df f017 	tbh	[pc, r7, lsl #1]
 80044ce:	0101      	.short	0x0101
 80044d0:	00fa0123 	.word	0x00fa0123
 80044d4:	00fa0119 	.word	0x00fa0119
 80044d8:	00130082 	.word	0x00130082
 80044dc:	00e900fa 	.word	0x00e900fa
 80044e0:	009e      	.short	0x009e
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80044e2:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4631      	mov	r1, r6
 80044ea:	4620      	mov	r0, r4
}
 80044ec:	b003      	add	sp, #12
 80044ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80044f2:	4718      	bx	r3
  uint16_t len = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 80044fa:	884b      	ldrh	r3, [r1, #2]
 80044fc:	0a1a      	lsrs	r2, r3, #8
 80044fe:	3a01      	subs	r2, #1
 8004500:	2a06      	cmp	r2, #6
 8004502:	d837      	bhi.n	8004574 <USBD_StdDevReq+0xcc>
 8004504:	e8df f002 	tbb	[pc, r2]
 8004508:	36291c04 	.word	0x36291c04
 800450c:	5036      	.short	0x5036
 800450e:	5a          	.byte	0x5a
 800450f:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004510:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004514:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004516:	7c20      	ldrb	r0, [r4, #16]
 8004518:	f10d 0106 	add.w	r1, sp, #6
 800451c:	4798      	blx	r3
  if (req->wLength != 0U)
 800451e:	88f2      	ldrh	r2, [r6, #6]
 8004520:	2a00      	cmp	r2, #0
 8004522:	f000 80f3 	beq.w	800470c <USBD_StdDevReq+0x264>
    if (len != 0U)
 8004526:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800452a:	b31b      	cbz	r3, 8004574 <USBD_StdDevReq+0xcc>
      len = MIN(len, req->wLength);
 800452c:	429a      	cmp	r2, r3
 800452e:	bf28      	it	cs
 8004530:	461a      	movcs	r2, r3
 8004532:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004536:	4601      	mov	r1, r0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8004538:	4620      	mov	r0, r4
 800453a:	f000 f9d6 	bl	80048ea <USBD_CtlSendData>
        break;
 800453e:	e01c      	b.n	800457a <USBD_StdDevReq+0xd2>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004540:	7c02      	ldrb	r2, [r0, #16]
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004542:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004546:	b932      	cbnz	r2, 8004556 <USBD_StdDevReq+0xae>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800454a:	f10d 0006 	add.w	r0, sp, #6
 800454e:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004550:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004552:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8004554:	e7e3      	b.n	800451e <USBD_StdDevReq+0x76>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	e7f7      	b.n	800454a <USBD_StdDevReq+0xa2>
      switch ((uint8_t)(req->wValue))
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b05      	cmp	r3, #5
 800455e:	d809      	bhi.n	8004574 <USBD_StdDevReq+0xcc>
 8004560:	e8df f003 	tbb	[pc, r3]
 8004564:	16120e03 	.word	0x16120e03
 8004568:	1e1a      	.short	0x1e1a
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800456a:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800456e:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1d0      	bne.n	8004516 <USBD_StdDevReq+0x6e>
      USBD_CtlError(pdev, req);
 8004574:	4620      	mov	r0, r4
          USBD_CtlError(pdev, req);
 8004576:	f7ff ff8c 	bl	8004492 <USBD_CtlError.constprop.0>
}
 800457a:	4628      	mov	r0, r5
 800457c:	b003      	add	sp, #12
 800457e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004580:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	e7f3      	b.n	8004570 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004588:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	e7ef      	b.n	8004570 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004590:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	e7eb      	b.n	8004570 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004598:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	e7e7      	b.n	8004570 <USBD_StdDevReq+0xc8>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80045a0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	e7e3      	b.n	8004570 <USBD_StdDevReq+0xc8>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045a8:	7c03      	ldrb	r3, [r0, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1e2      	bne.n	8004574 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80045ae:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80045b2:	f10d 0006 	add.w	r0, sp, #6
 80045b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045b8:	4798      	blx	r3
  if (err != 0U)
 80045ba:	e7b0      	b.n	800451e <USBD_StdDevReq+0x76>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045bc:	7c03      	ldrb	r3, [r0, #16]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1d8      	bne.n	8004574 <USBD_StdDevReq+0xcc>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80045c2:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80045c6:	f10d 0006 	add.w	r0, sp, #6
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80045ce:	2307      	movs	r3, #7
 80045d0:	e7bf      	b.n	8004552 <USBD_StdDevReq+0xaa>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80045d2:	888b      	ldrh	r3, [r1, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1cd      	bne.n	8004574 <USBD_StdDevReq+0xcc>
 80045d8:	88cb      	ldrh	r3, [r1, #6]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ca      	bne.n	8004574 <USBD_StdDevReq+0xcc>
 80045de:	884e      	ldrh	r6, [r1, #2]
 80045e0:	2e7f      	cmp	r6, #127	; 0x7f
 80045e2:	d8c7      	bhi.n	8004574 <USBD_StdDevReq+0xcc>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045e4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d0c3      	beq.n	8004574 <USBD_StdDevReq+0xcc>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80045ec:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 80045ee:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80045f2:	f000 fe82 	bl	80052fa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80045f6:	4620      	mov	r0, r4
 80045f8:	f000 f994 	bl	8004924 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80045fc:	b11e      	cbz	r6, 8004606 <USBD_StdDevReq+0x15e>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80045fe:	2302      	movs	r3, #2
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004600:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 8004604:	e7b9      	b.n	800457a <USBD_StdDevReq+0xd2>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004606:	2301      	movs	r3, #1
 8004608:	e7fa      	b.n	8004600 <USBD_StdDevReq+0x158>
  cfgidx = (uint8_t)(req->wValue);
 800460a:	788e      	ldrb	r6, [r1, #2]
 800460c:	4f47      	ldr	r7, [pc, #284]	; (800472c <USBD_StdDevReq+0x284>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800460e:	2e01      	cmp	r6, #1
  cfgidx = (uint8_t)(req->wValue);
 8004610:	703e      	strb	r6, [r7, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004612:	d903      	bls.n	800461c <USBD_StdDevReq+0x174>
    USBD_CtlError(pdev, req);
 8004614:	f7ff ff3d 	bl	8004492 <USBD_CtlError.constprop.0>
      ret = USBD_FAIL;
 8004618:	2503      	movs	r5, #3
      break;
 800461a:	e7ae      	b.n	800457a <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 800461c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004620:	2b02      	cmp	r3, #2
 8004622:	b2da      	uxtb	r2, r3
 8004624:	d008      	beq.n	8004638 <USBD_StdDevReq+0x190>
 8004626:	2a03      	cmp	r2, #3
 8004628:	d014      	beq.n	8004654 <USBD_StdDevReq+0x1ac>
      USBD_CtlError(pdev, req);
 800462a:	f7ff ff32 	bl	8004492 <USBD_CtlError.constprop.0>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800462e:	7839      	ldrb	r1, [r7, #0]
 8004630:	4620      	mov	r0, r4
 8004632:	f7ff fdef 	bl	8004214 <USBD_ClrClassConfig>
 8004636:	e7ef      	b.n	8004618 <USBD_StdDevReq+0x170>
      if (cfgidx != 0U)
 8004638:	2e00      	cmp	r6, #0
 800463a:	d067      	beq.n	800470c <USBD_StdDevReq+0x264>
        pdev->dev_config = cfgidx;
 800463c:	2101      	movs	r1, #1
 800463e:	6041      	str	r1, [r0, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8004640:	f7ff fde1 	bl	8004206 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004644:	4605      	mov	r5, r0
 8004646:	4620      	mov	r0, r4
 8004648:	2d00      	cmp	r5, #0
 800464a:	d194      	bne.n	8004576 <USBD_StdDevReq+0xce>
          (void)USBD_CtlSendStatus(pdev);
 800464c:	f000 f96a 	bl	8004924 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004650:	2303      	movs	r3, #3
 8004652:	e7d5      	b.n	8004600 <USBD_StdDevReq+0x158>
      if (cfgidx == 0U)
 8004654:	b95e      	cbnz	r6, 800466e <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004656:	2302      	movs	r3, #2
 8004658:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800465c:	6046      	str	r6, [r0, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800465e:	4631      	mov	r1, r6
 8004660:	f7ff fdd8 	bl	8004214 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8004664:	4620      	mov	r0, r4
 8004666:	f000 f95d 	bl	8004924 <USBD_CtlSendStatus>
 800466a:	4635      	mov	r5, r6
 800466c:	e785      	b.n	800457a <USBD_StdDevReq+0xd2>
      else if (cfgidx != pdev->dev_config)
 800466e:	6841      	ldr	r1, [r0, #4]
 8004670:	2901      	cmp	r1, #1
 8004672:	d04b      	beq.n	800470c <USBD_StdDevReq+0x264>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004674:	b2c9      	uxtb	r1, r1
 8004676:	f7ff fdcd 	bl	8004214 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800467a:	7839      	ldrb	r1, [r7, #0]
 800467c:	6061      	str	r1, [r4, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800467e:	4620      	mov	r0, r4
 8004680:	f7ff fdc1 	bl	8004206 <USBD_SetClassConfig>
        if (ret != USBD_OK)
 8004684:	4606      	mov	r6, r0
 8004686:	2800      	cmp	r0, #0
 8004688:	d040      	beq.n	800470c <USBD_StdDevReq+0x264>
          USBD_CtlError(pdev, req);
 800468a:	4620      	mov	r0, r4
 800468c:	f7ff ff01 	bl	8004492 <USBD_CtlError.constprop.0>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004690:	7921      	ldrb	r1, [r4, #4]
 8004692:	4620      	mov	r0, r4
 8004694:	f7ff fdbe 	bl	8004214 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004698:	2302      	movs	r3, #2
 800469a:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
 800469e:	e7e4      	b.n	800466a <USBD_StdDevReq+0x1c2>
  if (req->wLength != 1U)
 80046a0:	88ca      	ldrh	r2, [r1, #6]
 80046a2:	2a01      	cmp	r2, #1
 80046a4:	f47f af66 	bne.w	8004574 <USBD_StdDevReq+0xcc>
    switch (pdev->dev_state)
 80046a8:	f890 129c 	ldrb.w	r1, [r0, #668]	; 0x29c
 80046ac:	2902      	cmp	r1, #2
 80046ae:	b2cb      	uxtb	r3, r1
 80046b0:	d805      	bhi.n	80046be <USBD_StdDevReq+0x216>
 80046b2:	b133      	cbz	r3, 80046c2 <USBD_StdDevReq+0x21a>
        pdev->dev_default_config = 0U;
 80046b4:	4601      	mov	r1, r0
 80046b6:	2300      	movs	r3, #0
 80046b8:	f841 3f08 	str.w	r3, [r1, #8]!
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80046bc:	e73c      	b.n	8004538 <USBD_StdDevReq+0x90>
    switch (pdev->dev_state)
 80046be:	2b03      	cmp	r3, #3
 80046c0:	d004      	beq.n	80046cc <USBD_StdDevReq+0x224>
        USBD_CtlError(pdev, req);
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7ff fee5 	bl	8004492 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 80046c8:	2500      	movs	r5, #0
        break;
 80046ca:	e756      	b.n	800457a <USBD_StdDevReq+0xd2>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80046cc:	1d01      	adds	r1, r0, #4
 80046ce:	e733      	b.n	8004538 <USBD_StdDevReq+0x90>
  switch (pdev->dev_state)
 80046d0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80046d4:	3b01      	subs	r3, #1
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d8f3      	bhi.n	80046c2 <USBD_StdDevReq+0x21a>
      if (req->wLength != 0x2U)
 80046da:	88cb      	ldrh	r3, [r1, #6]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	f47f af49 	bne.w	8004574 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80046e2:	2301      	movs	r3, #1
 80046e4:	60c3      	str	r3, [r0, #12]
      if (pdev->dev_remote_wakeup != 0U)
 80046e6:	f8d0 32a4 	ldr.w	r3, [r0, #676]	; 0x2a4
 80046ea:	b10b      	cbz	r3, 80046f0 <USBD_StdDevReq+0x248>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80046ec:	2303      	movs	r3, #3
 80046ee:	60c3      	str	r3, [r0, #12]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80046f0:	2202      	movs	r2, #2
 80046f2:	f104 010c 	add.w	r1, r4, #12
 80046f6:	4620      	mov	r0, r4
 80046f8:	f000 f8f7 	bl	80048ea <USBD_CtlSendData>
  USBD_StatusTypeDef ret = USBD_OK;
 80046fc:	463d      	mov	r5, r7
      break;
 80046fe:	e73c      	b.n	800457a <USBD_StdDevReq+0xd2>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004700:	884b      	ldrh	r3, [r1, #2]
 8004702:	2b01      	cmp	r3, #1
 8004704:	f47f af39 	bne.w	800457a <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8004708:	f8c4 32a4 	str.w	r3, [r4, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800470c:	4620      	mov	r0, r4
 800470e:	f000 f909 	bl	8004924 <USBD_CtlSendStatus>
 8004712:	e732      	b.n	800457a <USBD_StdDevReq+0xd2>
  switch (pdev->dev_state)
 8004714:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004718:	3b01      	subs	r3, #1
 800471a:	2b02      	cmp	r3, #2
 800471c:	d8d1      	bhi.n	80046c2 <USBD_StdDevReq+0x21a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800471e:	884b      	ldrh	r3, [r1, #2]
 8004720:	2b01      	cmp	r3, #1
 8004722:	f47f af2a 	bne.w	800457a <USBD_StdDevReq+0xd2>
        pdev->dev_remote_wakeup = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	e7ee      	b.n	8004708 <USBD_StdDevReq+0x260>
 800472a:	bf00      	nop
 800472c:	20000b9c 	.word	0x20000b9c

08004730 <USBD_StdItfReq>:
{
 8004730:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004732:	780b      	ldrb	r3, [r1, #0]
 8004734:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004738:	2a40      	cmp	r2, #64	; 0x40
{
 800473a:	4604      	mov	r4, r0
 800473c:	460e      	mov	r6, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800473e:	d001      	beq.n	8004744 <USBD_StdItfReq+0x14>
 8004740:	065b      	lsls	r3, r3, #25
 8004742:	d416      	bmi.n	8004772 <USBD_StdItfReq+0x42>
      switch (pdev->dev_state)
 8004744:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8004748:	3b01      	subs	r3, #1
 800474a:	2b02      	cmp	r3, #2
 800474c:	d811      	bhi.n	8004772 <USBD_StdItfReq+0x42>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800474e:	7933      	ldrb	r3, [r6, #4]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d80e      	bhi.n	8004772 <USBD_StdItfReq+0x42>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004754:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004758:	4631      	mov	r1, r6
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4620      	mov	r0, r4
 800475e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004760:	88f3      	ldrh	r3, [r6, #6]
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004762:	4605      	mov	r5, r0
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004764:	b91b      	cbnz	r3, 800476e <USBD_StdItfReq+0x3e>
 8004766:	b910      	cbnz	r0, 800476e <USBD_StdItfReq+0x3e>
              (void)USBD_CtlSendStatus(pdev);
 8004768:	4620      	mov	r0, r4
 800476a:	f000 f8db 	bl	8004924 <USBD_CtlSendStatus>
}
 800476e:	4628      	mov	r0, r5
 8004770:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8004772:	4620      	mov	r0, r4
 8004774:	f7ff fe8d 	bl	8004492 <USBD_CtlError.constprop.0>
  USBD_StatusTypeDef ret = USBD_OK;
 8004778:	2500      	movs	r5, #0
          break;
 800477a:	e7f8      	b.n	800476e <USBD_StdItfReq+0x3e>

0800477c <USBD_StdEPReq>:
{
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	780b      	ldrb	r3, [r1, #0]
 8004780:	f003 0360 	and.w	r3, r3, #96	; 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004784:	2b20      	cmp	r3, #32
{
 8004786:	4604      	mov	r4, r0
 8004788:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800478a:	d053      	beq.n	8004834 <USBD_StdEPReq+0xb8>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d051      	beq.n	8004834 <USBD_StdEPReq+0xb8>
 8004790:	bb73      	cbnz	r3, 80047f0 <USBD_StdEPReq+0x74>
      switch (req->bRequest)
 8004792:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8004794:	888a      	ldrh	r2, [r1, #4]
 8004796:	7909      	ldrb	r1, [r1, #4]
      switch (req->bRequest)
 8004798:	2b01      	cmp	r3, #1
 800479a:	d03a      	beq.n	8004812 <USBD_StdEPReq+0x96>
 800479c:	2b03      	cmp	r3, #3
 800479e:	d020      	beq.n	80047e2 <USBD_StdEPReq+0x66>
 80047a0:	bb33      	cbnz	r3, 80047f0 <USBD_StdEPReq+0x74>
          switch (pdev->dev_state)
 80047a2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	b2d8      	uxtb	r0, r3
 80047aa:	d054      	beq.n	8004856 <USBD_StdEPReq+0xda>
 80047ac:	2803      	cmp	r0, #3
 80047ae:	d11f      	bne.n	80047f0 <USBD_StdEPReq+0x74>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80047b0:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 80047b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80047b8:	f04f 0214 	mov.w	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80047bc:	fb02 4303 	mla	r3, r2, r3, r4
              if ((ep_addr & 0x80U) == 0x80U)
 80047c0:	d058      	beq.n	8004874 <USBD_StdEPReq+0xf8>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80047c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047c4:	b1a3      	cbz	r3, 80047f0 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80047c6:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80047ca:	3501      	adds	r5, #1
 80047cc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80047d0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80047d4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80047d8:	d158      	bne.n	800488c <USBD_StdEPReq+0x110>
                pep->status = 0x0001U;
 80047da:	602b      	str	r3, [r5, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80047dc:	2202      	movs	r2, #2
 80047de:	4629      	mov	r1, r5
 80047e0:	e044      	b.n	800486c <USBD_StdEPReq+0xf0>
          switch (pdev->dev_state)
 80047e2:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	d02b      	beq.n	8004844 <USBD_StdEPReq+0xc8>
 80047ec:	2a03      	cmp	r2, #3
 80047ee:	d003      	beq.n	80047f8 <USBD_StdEPReq+0x7c>
              USBD_CtlError(pdev, req);
 80047f0:	4620      	mov	r0, r4
 80047f2:	f7ff fe4e 	bl	8004492 <USBD_CtlError.constprop.0>
              break;
 80047f6:	e00a      	b.n	800480e <USBD_StdEPReq+0x92>
              if (req->wValue == USB_FEATURE_EP_HALT)
 80047f8:	886b      	ldrh	r3, [r5, #2]
 80047fa:	b92b      	cbnz	r3, 8004808 <USBD_StdEPReq+0x8c>
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80047fc:	064a      	lsls	r2, r1, #25
 80047fe:	d003      	beq.n	8004808 <USBD_StdEPReq+0x8c>
 8004800:	88eb      	ldrh	r3, [r5, #6]
 8004802:	b90b      	cbnz	r3, 8004808 <USBD_StdEPReq+0x8c>
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8004804:	f000 fd58 	bl	80052b8 <USBD_LL_StallEP>
              (void)USBD_CtlSendStatus(pdev);
 8004808:	4620      	mov	r0, r4
 800480a:	f000 f88b 	bl	8004924 <USBD_CtlSendStatus>
}
 800480e:	2000      	movs	r0, #0
 8004810:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8004812:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8004816:	2b02      	cmp	r3, #2
 8004818:	b2da      	uxtb	r2, r3
 800481a:	d013      	beq.n	8004844 <USBD_StdEPReq+0xc8>
 800481c:	2a03      	cmp	r2, #3
 800481e:	d1e7      	bne.n	80047f0 <USBD_StdEPReq+0x74>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004820:	886b      	ldrh	r3, [r5, #2]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f3      	bne.n	800480e <USBD_StdEPReq+0x92>
                if ((ep_addr & 0x7FU) != 0x00U)
 8004826:	064e      	lsls	r6, r1, #25
 8004828:	d001      	beq.n	800482e <USBD_StdEPReq+0xb2>
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800482a:	f000 fd4c 	bl	80052c6 <USBD_LL_ClearStallEP>
                (void)USBD_CtlSendStatus(pdev);
 800482e:	4620      	mov	r0, r4
 8004830:	f000 f878 	bl	8004924 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004834:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8004838:	4629      	mov	r1, r5
 800483a:	4620      	mov	r0, r4
 800483c:	689b      	ldr	r3, [r3, #8]
}
 800483e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004842:	4718      	bx	r3
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004844:	064b      	lsls	r3, r1, #25
 8004846:	d0d3      	beq.n	80047f0 <USBD_StdEPReq+0x74>
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8004848:	f000 fd36 	bl	80052b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800484c:	2180      	movs	r1, #128	; 0x80
 800484e:	4620      	mov	r0, r4
 8004850:	f000 fd32 	bl	80052b8 <USBD_LL_StallEP>
 8004854:	e7db      	b.n	800480e <USBD_StdEPReq+0x92>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004856:	0649      	lsls	r1, r1, #25
 8004858:	d1ca      	bne.n	80047f0 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800485a:	0613      	lsls	r3, r2, #24
 800485c:	bf4c      	ite	mi
 800485e:	f104 0114 	addmi.w	r1, r4, #20
 8004862:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
              pep->status = 0x0000U;
 8004866:	2300      	movs	r3, #0
 8004868:	600b      	str	r3, [r1, #0]
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800486a:	2202      	movs	r2, #2
              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800486c:	4620      	mov	r0, r4
 800486e:	f000 f83c 	bl	80048ea <USBD_CtlSendData>
              break;
 8004872:	e7cc      	b.n	800480e <USBD_StdEPReq+0x92>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004874:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0b9      	beq.n	80047f0 <USBD_StdEPReq+0x74>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800487c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8004880:	2314      	movs	r3, #20
 8004882:	fb03 4505 	mla	r5, r3, r5, r4
 8004886:	f505 75aa 	add.w	r5, r5, #340	; 0x154
 800488a:	e7a3      	b.n	80047d4 <USBD_StdEPReq+0x58>
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800488c:	4620      	mov	r0, r4
 800488e:	f000 fd21 	bl	80052d4 <USBD_LL_IsStallEP>
 8004892:	b108      	cbz	r0, 8004898 <USBD_StdEPReq+0x11c>
                pep->status = 0x0001U;
 8004894:	2301      	movs	r3, #1
 8004896:	e7a0      	b.n	80047da <USBD_StdEPReq+0x5e>
                pep->status = 0x0000U;
 8004898:	6028      	str	r0, [r5, #0]
 800489a:	e79f      	b.n	80047dc <USBD_StdEPReq+0x60>

0800489c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 800489c:	780b      	ldrb	r3, [r1, #0]
 800489e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 80048a0:	784b      	ldrb	r3, [r1, #1]
 80048a2:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 80048a4:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 80048a6:	8043      	strh	r3, [r0, #2]
 80048a8:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 80048aa:	8083      	strh	r3, [r0, #4]
 80048ac:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 80048ae:	80c3      	strh	r3, [r0, #6]
}
 80048b0:	4770      	bx	lr

080048b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80048b2:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 80048b4:	b188      	cbz	r0, 80048da <USBD_GetString+0x28>
 80048b6:	2400      	movs	r4, #0
 80048b8:	3801      	subs	r0, #1
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 80048ba:	4623      	mov	r3, r4
 80048bc:	3401      	adds	r4, #1
 80048be:	5d05      	ldrb	r5, [r0, r4]
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	d1fa      	bne.n	80048ba <USBD_GetString+0x8>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	3301      	adds	r3, #1
 80048c8:	005b      	lsls	r3, r3, #1
 80048ca:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 80048cc:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80048ce:	2303      	movs	r3, #3
 80048d0:	704b      	strb	r3, [r1, #1]
  idx++;
 80048d2:	2302      	movs	r3, #2
  while (*pdesc != (uint8_t)'\0')
 80048d4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80048d8:	b902      	cbnz	r2, 80048dc <USBD_GetString+0x2a>
}
 80048da:	bd30      	pop	{r4, r5, pc}
    unicode[idx] = *pdesc;
 80048dc:	54ca      	strb	r2, [r1, r3]
    idx++;
 80048de:	1c5a      	adds	r2, r3, #1
    unicode[idx] = 0U;
 80048e0:	b2d2      	uxtb	r2, r2
    idx++;
 80048e2:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80048e4:	548d      	strb	r5, [r1, r2]
    idx++;
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	e7f4      	b.n	80048d4 <USBD_GetString+0x22>

080048ea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80048ea:	b510      	push	{r4, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80048ec:	2402      	movs	r4, #2
#else
  pdev->ep_in[0].rem_length = len;
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80048ee:	4613      	mov	r3, r2
  pdev->ep_in[0].rem_length = len;
 80048f0:	e9c0 2206 	strd	r2, r2, [r0, #24]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80048f4:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80048f8:	460a      	mov	r2, r1
 80048fa:	2100      	movs	r1, #0
 80048fc:	f000 fd04 	bl	8005308 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004900:	2000      	movs	r0, #0
 8004902:	bd10      	pop	{r4, pc}

08004904 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8004904:	b508      	push	{r3, lr}
 8004906:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004908:	460a      	mov	r2, r1
 800490a:	2100      	movs	r1, #0
 800490c:	f000 fcfc 	bl	8005308 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004910:	2000      	movs	r0, #0
 8004912:	bd08      	pop	{r3, pc}

08004914 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8004914:	b508      	push	{r3, lr}
 8004916:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004918:	460a      	mov	r2, r1
 800491a:	2100      	movs	r1, #0
 800491c:	f000 fcfb 	bl	8005316 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8004920:	2000      	movs	r0, #0
 8004922:	bd08      	pop	{r3, pc}

08004924 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004924:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004926:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004928:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800492a:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800492e:	4619      	mov	r1, r3
 8004930:	461a      	mov	r2, r3
 8004932:	f000 fce9 	bl	8005308 <USBD_LL_Transmit>

  return USBD_OK;
}
 8004936:	2000      	movs	r0, #0
 8004938:	bd08      	pop	{r3, pc}

0800493a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800493a:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800493c:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800493e:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004940:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004944:	4619      	mov	r1, r3
 8004946:	461a      	mov	r2, r3
 8004948:	f000 fce5 	bl	8005316 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800494c:	2000      	movs	r0, #0
 800494e:	bd08      	pop	{r3, pc}

08004950 <Error_Handler>:
  BSP_LED_On(LED5);
}

// Error handler (Turns LED on)
static void Error_Handler(void)
{
 8004950:	b508      	push	{r3, lr}
  /* Turn LED4 on */
  BSP_LED_On(LED4);
 8004952:	2000      	movs	r0, #0
 8004954:	f7ff fae8 	bl	8003f28 <BSP_LED_On>
  while(1)
 8004958:	e7fe      	b.n	8004958 <Error_Handler+0x8>
 800495a:	0000      	movs	r0, r0
 800495c:	0000      	movs	r0, r0
	...

08004960 <HAL_TIM_PeriodElapsedCallback>:
{
 8004960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(HAL_GPIO_ReadPin((button == KEY_BUTTON_PIN) ? KEY_BUTTON_GPIO_PORT : GPIOE, button)){
 8004962:	4c73      	ldr	r4, [pc, #460]	; (8004b30 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8004964:	4f73      	ldr	r7, [pc, #460]	; (8004b34 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8004966:	4d74      	ldr	r5, [pc, #464]	; (8004b38 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
{
 8004968:	4606      	mov	r6, r0
  if(HAL_GPIO_ReadPin((button == KEY_BUTTON_PIN) ? KEY_BUTTON_GPIO_PORT : GPIOE, button)){
 800496a:	8820      	ldrh	r0, [r4, #0]
 800496c:	8821      	ldrh	r1, [r4, #0]
 800496e:	b280      	uxth	r0, r0
 8004970:	b289      	uxth	r1, r1
 8004972:	2801      	cmp	r0, #1
 8004974:	bf0c      	ite	eq
 8004976:	4638      	moveq	r0, r7
 8004978:	4628      	movne	r0, r5
 800497a:	f7fd fc57 	bl	800222c <HAL_GPIO_ReadPin>
 800497e:	2800      	cmp	r0, #0
 8004980:	d05b      	beq.n	8004a3a <HAL_TIM_PeriodElapsedCallback+0xda>
    if(!active[(int)log2(button)]) {
 8004982:	8820      	ldrh	r0, [r4, #0]
 8004984:	4d6d      	ldr	r5, [pc, #436]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8004986:	b280      	uxth	r0, r0
 8004988:	f7fb fd7c 	bl	8000484 <__aeabi_ui2d>
 800498c:	ec41 0b10 	vmov	d0, r0, r1
 8004990:	f006 fc96 	bl	800b2c0 <log>
 8004994:	a364      	add	r3, pc, #400	; (adr r3, 8004b28 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499a:	ec51 0b10 	vmov	r0, r1, d0
 800499e:	f7fb ff15 	bl	80007cc <__aeabi_ddiv>
 80049a2:	f7fb fffb 	bl	800099c <__aeabi_d2iz>
 80049a6:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f040 80a2 	bne.w	8004af4 <HAL_TIM_PeriodElapsedCallback+0x194>
      active[(int)log2(button)] = 1;
 80049b0:	8820      	ldrh	r0, [r4, #0]
 80049b2:	b280      	uxth	r0, r0
 80049b4:	f7fb fd66 	bl	8000484 <__aeabi_ui2d>
 80049b8:	ec41 0b10 	vmov	d0, r0, r1
 80049bc:	f006 fc80 	bl	800b2c0 <log>
 80049c0:	a359      	add	r3, pc, #356	; (adr r3, 8004b28 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	ec51 0b10 	vmov	r0, r1, d0
 80049ca:	f7fb feff 	bl	80007cc <__aeabi_ddiv>
 80049ce:	f7fb ffe5 	bl	800099c <__aeabi_d2iz>
 80049d2:	2301      	movs	r3, #1
 80049d4:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
      BSP_LED_On(LED3);
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff faa5 	bl	8003f28 <BSP_LED_On>
      midi_note.note = (button == KEY_BUTTON_PIN) ? song[index] : keyboard[indexes[(int)log2(button)]];
 80049de:	8823      	ldrh	r3, [r4, #0]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d114      	bne.n	8004a10 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80049e6:	4b56      	ldr	r3, [pc, #344]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80049e8:	4a56      	ldr	r2, [pc, #344]	; (8004b44 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4956      	ldr	r1, [pc, #344]	; (8004b48 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80049ee:	5cd3      	ldrb	r3, [r2, r3]
 80049f0:	700b      	strb	r3, [r1, #0]
      midi_note.velocity = velocity;
 80049f2:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
      if(USBD_MIDI_SendNote(&hUSBDDevice, &midi_note) != USBD_OK)
 80049f4:	4856      	ldr	r0, [pc, #344]	; (8004b50 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
      midi_note.velocity = velocity;
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	704b      	strb	r3, [r1, #1]
      midi_note.channel = channel;
 80049fa:	4b56      	ldr	r3, [pc, #344]	; (8004b54 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	708b      	strb	r3, [r1, #2]
      midi_note.cmd = NOTE_ON;
 8004a00:	2300      	movs	r3, #0
 8004a02:	70cb      	strb	r3, [r1, #3]
      if(USBD_MIDI_SendNote(&hUSBDDevice, &midi_note) != USBD_OK)
 8004a04:	f7ff fbb4 	bl	8004170 <USBD_MIDI_SendNote>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d073      	beq.n	8004af4 <HAL_TIM_PeriodElapsedCallback+0x194>
        Error_Handler();
 8004a0c:	f7ff ffa0 	bl	8004950 <Error_Handler>
      midi_note.note = (button == KEY_BUTTON_PIN) ? song[index] : keyboard[indexes[(int)log2(button)]];
 8004a10:	8820      	ldrh	r0, [r4, #0]
 8004a12:	b280      	uxth	r0, r0
 8004a14:	f7fb fd36 	bl	8000484 <__aeabi_ui2d>
 8004a18:	ec41 0b10 	vmov	d0, r0, r1
 8004a1c:	f006 fc50 	bl	800b2c0 <log>
 8004a20:	a341      	add	r3, pc, #260	; (adr r3, 8004b28 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	ec51 0b10 	vmov	r0, r1, d0
 8004a2a:	f7fb fecf 	bl	80007cc <__aeabi_ddiv>
 8004a2e:	f7fb ffb5 	bl	800099c <__aeabi_d2iz>
 8004a32:	4b49      	ldr	r3, [pc, #292]	; (8004b58 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004a34:	4a49      	ldr	r2, [pc, #292]	; (8004b5c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004a36:	5c1b      	ldrb	r3, [r3, r0]
 8004a38:	e7d8      	b.n	80049ec <HAL_TIM_PeriodElapsedCallback+0x8c>
  } else if(!HAL_GPIO_ReadPin((button == KEY_BUTTON_PIN) ? KEY_BUTTON_GPIO_PORT : GPIOE, button)){
 8004a3a:	8820      	ldrh	r0, [r4, #0]
 8004a3c:	8821      	ldrh	r1, [r4, #0]
 8004a3e:	b280      	uxth	r0, r0
 8004a40:	2801      	cmp	r0, #1
 8004a42:	bf0c      	ite	eq
 8004a44:	4638      	moveq	r0, r7
 8004a46:	4628      	movne	r0, r5
 8004a48:	b289      	uxth	r1, r1
 8004a4a:	f7fd fbef 	bl	800222c <HAL_GPIO_ReadPin>
 8004a4e:	4605      	mov	r5, r0
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d14f      	bne.n	8004af4 <HAL_TIM_PeriodElapsedCallback+0x194>
    if(active[(int)log2(button)]) {
 8004a54:	8820      	ldrh	r0, [r4, #0]
 8004a56:	4f39      	ldr	r7, [pc, #228]	; (8004b3c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8004a58:	b280      	uxth	r0, r0
 8004a5a:	f7fb fd13 	bl	8000484 <__aeabi_ui2d>
 8004a5e:	ec41 0b10 	vmov	d0, r0, r1
 8004a62:	f006 fc2d 	bl	800b2c0 <log>
 8004a66:	a330      	add	r3, pc, #192	; (adr r3, 8004b28 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6c:	ec51 0b10 	vmov	r0, r1, d0
 8004a70:	f7fb feac 	bl	80007cc <__aeabi_ddiv>
 8004a74:	f7fb ff92 	bl	800099c <__aeabi_d2iz>
 8004a78:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d039      	beq.n	8004af4 <HAL_TIM_PeriodElapsedCallback+0x194>
      active[(int)log2(button)] = 0;
 8004a80:	8820      	ldrh	r0, [r4, #0]
 8004a82:	b280      	uxth	r0, r0
 8004a84:	f7fb fcfe 	bl	8000484 <__aeabi_ui2d>
 8004a88:	ec41 0b10 	vmov	d0, r0, r1
 8004a8c:	f006 fc18 	bl	800b2c0 <log>
 8004a90:	a325      	add	r3, pc, #148	; (adr r3, 8004b28 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a96:	ec51 0b10 	vmov	r0, r1, d0
 8004a9a:	f7fb fe97 	bl	80007cc <__aeabi_ddiv>
 8004a9e:	f7fb ff7d 	bl	800099c <__aeabi_d2iz>
 8004aa2:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
      BSP_LED_Off(LED3);
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	f7ff fa4c 	bl	8003f44 <BSP_LED_Off>
      midi_note.note = (button == KEY_BUTTON_PIN) ? song[index] : keyboard[indexes[(int)log2(button)]];
 8004aac:	8823      	ldrh	r3, [r4, #0]
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d124      	bne.n	8004afe <HAL_TIM_PeriodElapsedCallback+0x19e>
 8004ab4:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8004ab6:	4a23      	ldr	r2, [pc, #140]	; (8004b44 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4923      	ldr	r1, [pc, #140]	; (8004b48 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8004abc:	5cd3      	ldrb	r3, [r2, r3]
 8004abe:	700b      	strb	r3, [r1, #0]
      midi_note.velocity = velocity;
 8004ac0:	4b22      	ldr	r3, [pc, #136]	; (8004b4c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
      if(USBD_MIDI_SendNote(&hUSBDDevice, &midi_note) != USBD_OK)
 8004ac2:	4823      	ldr	r0, [pc, #140]	; (8004b50 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
      midi_note.velocity = velocity;
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	704b      	strb	r3, [r1, #1]
      midi_note.channel = channel;
 8004ac8:	4b22      	ldr	r3, [pc, #136]	; (8004b54 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	708b      	strb	r3, [r1, #2]
      midi_note.cmd = NOTE_OFF;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	70cb      	strb	r3, [r1, #3]
      if(USBD_MIDI_SendNote(&hUSBDDevice, &midi_note) != USBD_OK)
 8004ad2:	f7ff fb4d 	bl	8004170 <USBD_MIDI_SendNote>
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d198      	bne.n	8004a0c <HAL_TIM_PeriodElapsedCallback+0xac>
      if (button == KEY_BUTTON_PIN)
 8004ada:	8823      	ldrh	r3, [r4, #0]
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d108      	bne.n	8004af4 <HAL_TIM_PeriodElapsedCallback+0x194>
        index = (index+1) % SONG_LENGTH;
 8004ae2:	4a17      	ldr	r2, [pc, #92]	; (8004b40 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8004ae4:	6813      	ldr	r3, [r2, #0]
 8004ae6:	2184      	movs	r1, #132	; 0x84
 8004ae8:	3301      	adds	r3, #1
 8004aea:	fb93 f0f1 	sdiv	r0, r3, r1
 8004aee:	fb01 3310 	mls	r3, r1, r0, r3
 8004af2:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Stop(tim);
 8004af4:	4630      	mov	r0, r6
}
 8004af6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  HAL_TIM_Base_Stop(tim);
 8004afa:	f7fe bb13 	b.w	8003124 <HAL_TIM_Base_Stop>
      midi_note.note = (button == KEY_BUTTON_PIN) ? song[index] : keyboard[indexes[(int)log2(button)]];
 8004afe:	8820      	ldrh	r0, [r4, #0]
 8004b00:	b280      	uxth	r0, r0
 8004b02:	f7fb fcbf 	bl	8000484 <__aeabi_ui2d>
 8004b06:	ec41 0b10 	vmov	d0, r0, r1
 8004b0a:	f006 fbd9 	bl	800b2c0 <log>
 8004b0e:	a306      	add	r3, pc, #24	; (adr r3, 8004b28 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	ec51 0b10 	vmov	r0, r1, d0
 8004b18:	f7fb fe58 	bl	80007cc <__aeabi_ddiv>
 8004b1c:	f7fb ff3e 	bl	800099c <__aeabi_d2iz>
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8004b22:	4a0e      	ldr	r2, [pc, #56]	; (8004b5c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8004b24:	5c1b      	ldrb	r3, [r3, r0]
 8004b26:	e7c8      	b.n	8004aba <HAL_TIM_PeriodElapsedCallback+0x15a>
 8004b28:	fefa39ef 	.word	0xfefa39ef
 8004b2c:	3fe62e42 	.word	0x3fe62e42
 8004b30:	20000c70 	.word	0x20000c70
 8004b34:	40020000 	.word	0x40020000
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	20000c30 	.word	0x20000c30
 8004b40:	20000f8c 	.word	0x20000f8c
 8004b44:	0800b7ee 	.word	0x0800b7ee
 8004b48:	20000f90 	.word	0x20000f90
 8004b4c:	2000050c 	.word	0x2000050c
 8004b50:	20000c74 	.word	0x20000c74
 8004b54:	20000502 	.word	0x20000502
 8004b58:	0800b7d7 	.word	0x0800b7d7
 8004b5c:	0800b7e7 	.word	0x0800b7e7

08004b60 <MIDI_DataRx>:
 USBD_StatusTypeDef MIDI_DataRx(uint8_t *msg, uint16_t length){
 8004b60:	b508      	push	{r3, lr}
    timeBack = HAL_GetTick();
 8004b62:	f7fc ff8d 	bl	8001a80 <HAL_GetTick>
    diff = timeBack - timestart;
 8004b66:	4b04      	ldr	r3, [pc, #16]	; (8004b78 <MIDI_DataRx+0x18>)
 8004b68:	6819      	ldr	r1, [r3, #0]
    printf("%ld\n", diff);
 8004b6a:	1a41      	subs	r1, r0, r1
 8004b6c:	4803      	ldr	r0, [pc, #12]	; (8004b7c <MIDI_DataRx+0x1c>)
 8004b6e:	f000 ffc5 	bl	8005afc <printf>
}
 8004b72:	2000      	movs	r0, #0
 8004b74:	bd08      	pop	{r3, pc}
 8004b76:	bf00      	nop
 8004b78:	20000f98 	.word	0x20000f98
 8004b7c:	0800b7d2 	.word	0x0800b7d2

08004b80 <HAL_SYSTICK_Callback>:
}
 8004b80:	4770      	bx	lr
	...

08004b84 <HAL_GPIO_EXTI_Callback>:
{
 8004b84:	b510      	push	{r4, lr}
 8004b86:	4604      	mov	r4, r0
  timestart = HAL_GetTick();
 8004b88:	f7fc ff7a 	bl	8001a80 <HAL_GetTick>
 8004b8c:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_GPIO_EXTI_Callback+0x20>)
 8004b8e:	6018      	str	r0, [r3, #0]
  button = GPIO_Pin;
 8004b90:	4b05      	ldr	r3, [pc, #20]	; (8004ba8 <HAL_GPIO_EXTI_Callback+0x24>)
  if (HAL_TIM_Base_Start_IT(&TimHandle_5) != HAL_OK)
 8004b92:	4806      	ldr	r0, [pc, #24]	; (8004bac <HAL_GPIO_EXTI_Callback+0x28>)
  button = GPIO_Pin;
 8004b94:	801c      	strh	r4, [r3, #0]
  if (HAL_TIM_Base_Start_IT(&TimHandle_5) != HAL_OK)
 8004b96:	f7fe fad9 	bl	800314c <HAL_TIM_Base_Start_IT>
 8004b9a:	b108      	cbz	r0, 8004ba0 <HAL_GPIO_EXTI_Callback+0x1c>
    Error_Handler();
 8004b9c:	f7ff fed8 	bl	8004950 <Error_Handler>
}
 8004ba0:	bd10      	pop	{r4, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000f98 	.word	0x20000f98
 8004ba8:	20000c70 	.word	0x20000c70
 8004bac:	20000be8 	.word	0x20000be8

08004bb0 <HAL_ADC_ConvCpltCallback>:
{
 8004bb0:	b508      	push	{r3, lr}
   uhADCxConvertedValue = HAL_ADC_GetValue(AdcHandle);
 8004bb2:	f7fd f8b5 	bl	8001d20 <HAL_ADC_GetValue>
 8004bb6:	4a0e      	ldr	r2, [pc, #56]	; (8004bf0 <HAL_ADC_ConvCpltCallback+0x40>)
  if( abs (uhADCxConvertedValue - converted_old)  > 3)
 8004bb8:	490e      	ldr	r1, [pc, #56]	; (8004bf4 <HAL_ADC_ConvCpltCallback+0x44>)
   uhADCxConvertedValue = HAL_ADC_GetValue(AdcHandle);
 8004bba:	b280      	uxth	r0, r0
 8004bbc:	8010      	strh	r0, [r2, #0]
  if( abs (uhADCxConvertedValue - converted_old)  > 3)
 8004bbe:	8813      	ldrh	r3, [r2, #0]
 8004bc0:	8808      	ldrh	r0, [r1, #0]
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	1a1b      	subs	r3, r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bfb8      	it	lt
 8004bca:	425b      	neglt	r3, r3
 8004bcc:	2b03      	cmp	r3, #3
 8004bce:	dd0a      	ble.n	8004be6 <HAL_ADC_ConvCpltCallback+0x36>
      converted_old = uhADCxConvertedValue;
 8004bd0:	8813      	ldrh	r3, [r2, #0]
      USBD_MIDI_SendPitch(&hUSBDDevice, &midi_pitch);
 8004bd2:	4809      	ldr	r0, [pc, #36]	; (8004bf8 <HAL_ADC_ConvCpltCallback+0x48>)
      converted_old = uhADCxConvertedValue;
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	800b      	strh	r3, [r1, #0]
      midi_pitch.pitchBend = converted_old;
 8004bd8:	4908      	ldr	r1, [pc, #32]	; (8004bfc <HAL_ADC_ConvCpltCallback+0x4c>)
 8004bda:	700b      	strb	r3, [r1, #0]
      midi_pitch.channel = channel;
 8004bdc:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <HAL_ADC_ConvCpltCallback+0x50>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	704b      	strb	r3, [r1, #1]
      USBD_MIDI_SendPitch(&hUSBDDevice, &midi_pitch);
 8004be2:	f7ff faac 	bl	800413e <USBD_MIDI_SendPitch>
}
 8004be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  BSP_LED_On(LED5);
 8004bea:	2002      	movs	r0, #2
 8004bec:	f7ff b99c 	b.w	8003f28 <BSP_LED_On>
 8004bf0:	20000506 	.word	0x20000506
 8004bf4:	20000504 	.word	0x20000504
 8004bf8:	20000c74 	.word	0x20000c74
 8004bfc:	20000f94 	.word	0x20000f94
 8004c00:	20000502 	.word	0x20000502

08004c04 <SystemClock_Config>:
  {
  }
}

void SystemClock_Config(void)
{
 8004c04:	b530      	push	{r4, r5, lr}
 8004c06:	b095      	sub	sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c08:	2400      	movs	r4, #0
 8004c0a:	4b23      	ldr	r3, [pc, #140]	; (8004c98 <SystemClock_Config+0x94>)
 8004c0c:	9401      	str	r4, [sp, #4]
 8004c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	9301      	str	r3, [sp, #4]
 8004c1e:	9b01      	ldr	r3, [sp, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c20:	4b1e      	ldr	r3, [pc, #120]	; (8004c9c <SystemClock_Config+0x98>)
 8004c22:	9402      	str	r4, [sp, #8]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c2a:	601a      	str	r2, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c32:	9302      	str	r3, [sp, #8]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c34:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c36:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004c40:	2502      	movs	r5, #2
 8004c42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c46:	e9cd 530e 	strd	r5, r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8004c4a:	2108      	movs	r1, #8
 8004c4c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004c50:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004c54:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004c56:	2307      	movs	r3, #7
 8004c58:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004c5a:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004c5c:	f7fd ffaa 	bl	8002bb4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004c60:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004c62:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004c66:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8004c6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c6e:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8004c72:	2105      	movs	r1, #5
 8004c74:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004c76:	9405      	str	r4, [sp, #20]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8004c78:	f7fe f97a 	bl	8002f70 <HAL_RCC_ClockConfig>

  /* STM32F405x/407x/415x/417x Revision Z devices: prefetch is supported  */
  if (HAL_GetREVID() == 0x1001)
 8004c7c:	f7fc ff1a 	bl	8001ab4 <HAL_GetREVID>
 8004c80:	f241 0301 	movw	r3, #4097	; 0x1001
 8004c84:	4298      	cmp	r0, r3
  {
    /* Enable the Flash prefetch */
    __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c86:	bf01      	itttt	eq
 8004c88:	4a05      	ldreq	r2, [pc, #20]	; (8004ca0 <SystemClock_Config+0x9c>)
 8004c8a:	6813      	ldreq	r3, [r2, #0]
 8004c8c:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
 8004c90:	6013      	streq	r3, [r2, #0]
  }
}
 8004c92:	b015      	add	sp, #84	; 0x54
 8004c94:	bd30      	pop	{r4, r5, pc}
 8004c96:	bf00      	nop
 8004c98:	40023800 	.word	0x40023800
 8004c9c:	40007000 	.word	0x40007000
 8004ca0:	40023c00 	.word	0x40023c00

08004ca4 <main>:
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
  HAL_Init();
 8004ca8:	f7fc fec8 	bl	8001a3c <HAL_Init>
  SystemClock_Config();
 8004cac:	f7ff ffaa 	bl	8004c04 <SystemClock_Config>
  USBD_Init(&hUSBDDevice, &HID_Desc, 0);
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	4943      	ldr	r1, [pc, #268]	; (8004dc0 <main+0x11c>)
 8004cb4:	4843      	ldr	r0, [pc, #268]	; (8004dc4 <main+0x120>)
  htim.Instance = TIMx;
 8004cb6:	4d44      	ldr	r5, [pc, #272]	; (8004dc8 <main+0x124>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004cb8:	4f44      	ldr	r7, [pc, #272]	; (8004dcc <main+0x128>)
  USBD_Init(&hUSBDDevice, &HID_Desc, 0);
 8004cba:	f7ff fa79 	bl	80041b0 <USBD_Init>
  USBD_RegisterClass(&hUSBDDevice, USBD_MIDI_CLASS);
 8004cbe:	4944      	ldr	r1, [pc, #272]	; (8004dd0 <main+0x12c>)
 8004cc0:	4840      	ldr	r0, [pc, #256]	; (8004dc4 <main+0x120>)
 8004cc2:	f7ff fa88 	bl	80041d6 <USBD_RegisterClass>
  USBD_Start(&hUSBDDevice);
 8004cc6:	483f      	ldr	r0, [pc, #252]	; (8004dc4 <main+0x120>)
 8004cc8:	f7ff fa9b 	bl	8004202 <USBD_Start>
  htim.Instance = TIMx;
 8004ccc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cd0:	602b      	str	r3, [r5, #0]
  htim.Init.Period            = 65000;
 8004cd2:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8004cd6:	60eb      	str	r3, [r5, #12]
  htim.Init.Prescaler         = 0;
 8004cd8:	2300      	movs	r3, #0
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004cda:	9301      	str	r3, [sp, #4]
  htim.Init.Prescaler         = 0;
 8004cdc:	606b      	str	r3, [r5, #4]
  htim.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8004cde:	612b      	str	r3, [r5, #16]
  htim.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004ce0:	60ab      	str	r3, [r5, #8]
  htim.Init.RepetitionCounter = 0x0;
 8004ce2:	616b      	str	r3, [r5, #20]
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	643b      	str	r3, [r7, #64]	; 0x40
 8004cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim) != HAL_OK)
 8004cf4:	4628      	mov	r0, r5
  __HAL_RCC_TIM2_CLK_ENABLE();
 8004cf6:	9b01      	ldr	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim) != HAL_OK)
 8004cf8:	f7fe fb6e 	bl	80033d8 <HAL_TIM_Base_Init>
 8004cfc:	b108      	cbz	r0, 8004d02 <main+0x5e>
    Error_Handler();
 8004cfe:	f7ff fe27 	bl	8004950 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004d02:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d04:	e9cd 3002 	strd	r3, r0, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim, &sMasterConfig) != HAL_OK)
 8004d08:	a902      	add	r1, sp, #8
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f7fe fb90 	bl	8003430 <HAL_TIMEx_MasterConfigSynchronization>
 8004d10:	4604      	mov	r4, r0
 8004d12:	2800      	cmp	r0, #0
 8004d14:	d1f3      	bne.n	8004cfe <main+0x5a>
  TimHandle_5.Instance = TIM5;
 8004d16:	4e2f      	ldr	r6, [pc, #188]	; (8004dd4 <main+0x130>)
 8004d18:	4b2f      	ldr	r3, [pc, #188]	; (8004dd8 <main+0x134>)
 8004d1a:	6033      	str	r3, [r6, #0]
  TimHandle_5.Init.Period            = uwTimerPeriod;
 8004d1c:	4b2f      	ldr	r3, [pc, #188]	; (8004ddc <main+0x138>)
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004d1e:	9000      	str	r0, [sp, #0]
  TimHandle_5.Init.Period            = uwTimerPeriod;
 8004d20:	681b      	ldr	r3, [r3, #0]
  TimHandle_5.Init.RepetitionCounter = 0;
 8004d22:	6170      	str	r0, [r6, #20]
  TimHandle_5.Init.Prescaler         = 0;
 8004d24:	6070      	str	r0, [r6, #4]
  TimHandle_5.Init.ClockDivision     = 0;
 8004d26:	6130      	str	r0, [r6, #16]
  TimHandle_5.Init.CounterMode       = TIM_COUNTERMODE_UP;
 8004d28:	60b0      	str	r0, [r6, #8]
  TimHandle_5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004d2a:	61b0      	str	r0, [r6, #24]
  TimHandle_5.Init.Period            = uwTimerPeriod;
 8004d2c:	60f3      	str	r3, [r6, #12]
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d30:	f043 0308 	orr.w	r3, r3, #8
 8004d34:	643b      	str	r3, [r7, #64]	; 0x40
 8004d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	9300      	str	r3, [sp, #0]
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004d3e:	2032      	movs	r0, #50	; 0x32
  __HAL_RCC_TIM5_CLK_ENABLE();
 8004d40:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004d42:	f7fd f95f 	bl	8002004 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004d46:	2032      	movs	r0, #50	; 0x32
 8004d48:	4622      	mov	r2, r4
 8004d4a:	4621      	mov	r1, r4
 8004d4c:	f7fd f928 	bl	8001fa0 <HAL_NVIC_SetPriority>
  if (HAL_TIM_Base_Init(&TimHandle_5) != HAL_OK)
 8004d50:	4630      	mov	r0, r6
 8004d52:	f7fe fb41 	bl	80033d8 <HAL_TIM_Base_Init>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d1d1      	bne.n	8004cfe <main+0x5a>
  AdcHandle.Instance          = ADCx;
 8004d5a:	4c21      	ldr	r4, [pc, #132]	; (8004de0 <main+0x13c>)
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8004d5c:	4a21      	ldr	r2, [pc, #132]	; (8004de4 <main+0x140>)
  AdcHandle.Init.ContinuousConvMode    = DISABLE;                       /* Continuous mode disabled to have only 1 conversion at each conversion trig */
 8004d5e:	7620      	strb	r0, [r4, #24]
  AdcHandle.Init.ClockPrescaler        = ADC_CLOCKPRESCALER_PCLK_DIV4;
 8004d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d64:	e9c4 2300 	strd	r2, r3, [r4]
  AdcHandle.Init.Resolution            = ADC_RESOLUTION8b;
 8004d68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8004d6c:	e9c4 3002 	strd	r3, r0, [r4, #8]
  AdcHandle.Init.EOCSelection          = ADC_EOC_SEQ_CONV;
 8004d70:	e9c4 0004 	strd	r0, r0, [r4, #16]
  AdcHandle.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
 8004d74:	f884 0020 	strb.w	r0, [r4, #32]
  AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004d78:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 8004d7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  AdcHandle.Init.DMAContinuousRequests = ENABLE;
 8004d80:	2601      	movs	r6, #1
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8004d82:	4620      	mov	r0, r4
  AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8004d84:	e9c4 130a 	strd	r1, r3, [r4, #40]	; 0x28
  AdcHandle.Init.DMAContinuousRequests = ENABLE;
 8004d88:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&AdcHandle) != HAL_OK)
 8004d8c:	f7fc fe98 	bl	8001ac0 <HAL_ADC_Init>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	d1b4      	bne.n	8004cfe <main+0x5a>
  sConfig.Channel      = ADCx_CHANNEL;
 8004d94:	2304      	movs	r3, #4
  sConfig.Rank         = 1;
 8004d96:	e9cd 3604 	strd	r3, r6, [sp, #16]
  if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8004d9a:	a904      	add	r1, sp, #16
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8004d9c:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8004d9e:	4620      	mov	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8004da0:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&AdcHandle, &sConfig) != HAL_OK)
 8004da2:	f7fd f857 	bl	8001e54 <HAL_ADC_ConfigChannel>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d1a9      	bne.n	8004cfe <main+0x5a>
  if (HAL_ADC_Start_IT(&AdcHandle) != HAL_OK)
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7fc ff2e 	bl	8001c0c <HAL_ADC_Start_IT>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	d1a4      	bne.n	8004cfe <main+0x5a>
  if (HAL_TIM_Base_Start(&htim) != HAL_OK)
 8004db4:	4628      	mov	r0, r5
 8004db6:	f7fe f97f 	bl	80030b8 <HAL_TIM_Base_Start>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d19f      	bne.n	8004cfe <main+0x5a>
  while (1)
 8004dbe:	e7fe      	b.n	8004dbe <main+0x11a>
 8004dc0:	20000514 	.word	0x20000514
 8004dc4:	20000c74 	.word	0x20000c74
 8004dc8:	20000f44 	.word	0x20000f44
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	20000458 	.word	0x20000458
 8004dd4:	20000be8 	.word	0x20000be8
 8004dd8:	40000c00 	.word	0x40000c00
 8004ddc:	20000508 	.word	0x20000508
 8004de0:	20000ba0 	.word	0x20000ba0
 8004de4:	40012000 	.word	0x40012000

08004de8 <HAL_MspInit>:
/** @defgroup HAL_MSP_Private_Functions
  * @{
  */

void HAL_MspInit(void)
{
 8004de8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Configure LED3, LED4, LED5 and LED6 */
  BSP_LED_Init(LED3);
 8004dea:	2001      	movs	r0, #1
{
 8004dec:	b089      	sub	sp, #36	; 0x24
  BSP_LED_Init(LED3);
 8004dee:	f7ff f841 	bl	8003e74 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8004df2:	2000      	movs	r0, #0
 8004df4:	f7ff f83e 	bl	8003e74 <BSP_LED_Init>
  BSP_LED_Init(LED5);
 8004df8:	2002      	movs	r0, #2
  /* Configure USER Button */
  // BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
  //we don't use BSP_BP_Init since it just activates rising edge interrupts
  /*start setup button */
  GPIO_InitTypeDef GPIO_InitStruct;
  BUTTONx_GPIO_CLK_ENABLE(BUTTON_KEY);
 8004dfa:	4e4d      	ldr	r6, [pc, #308]	; (8004f30 <HAL_MspInit+0x148>)
  GPIO_InitStruct.Pin = KEY_BUTTON_PIN;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004dfc:	4d4d      	ldr	r5, [pc, #308]	; (8004f34 <HAL_MspInit+0x14c>)
  BUTTONx_GPIO_CLK_ENABLE(BUTTON_KEY);
 8004dfe:	2700      	movs	r7, #0
  BSP_LED_Init(LED5);
 8004e00:	f7ff f838 	bl	8003e74 <BSP_LED_Init>
  BSP_LED_Init(LED6);
 8004e04:	2003      	movs	r0, #3
 8004e06:	f7ff f835 	bl	8003e74 <BSP_LED_Init>
  BUTTONx_GPIO_CLK_ENABLE(BUTTON_KEY);
 8004e0a:	9701      	str	r7, [sp, #4]
 8004e0c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_Init(KEY_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004e0e:	484a      	ldr	r0, [pc, #296]	; (8004f38 <HAL_MspInit+0x150>)
  BUTTONx_GPIO_CLK_ENABLE(BUTTON_KEY);
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6333      	str	r3, [r6, #48]	; 0x30
 8004e16:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e18:	9705      	str	r7, [sp, #20]
  BUTTONx_GPIO_CLK_ENABLE(BUTTON_KEY);
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004e20:	2402      	movs	r4, #2
  BUTTONx_GPIO_CLK_ENABLE(BUTTON_KEY);
 8004e22:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004e24:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = KEY_BUTTON_PIN;
 8004e26:	2301      	movs	r3, #1
  HAL_GPIO_Init(KEY_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004e28:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = KEY_BUTTON_PIN;
 8004e2a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004e2c:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(KEY_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8004e2e:	f7fd f923 	bl	8002078 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(KEY_BUTTON_EXTI_IRQn), 0x0e, 0);
 8004e32:	463a      	mov	r2, r7
 8004e34:	210e      	movs	r1, #14
 8004e36:	2006      	movs	r0, #6
 8004e38:	f7fd f8b2 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(KEY_BUTTON_EXTI_IRQn));
 8004e3c:	2006      	movs	r0, #6
 8004e3e:	f7fd f8e1 	bl	8002004 <HAL_NVIC_EnableIRQ>
  /* end setup button */

  // Configure breadboard buttons
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e42:	9702      	str	r7, [sp, #8]
 8004e44:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8004e46:	f043 0310 	orr.w	r3, r3, #16
 8004e4a:	6333      	str	r3, [r6, #48]	; 0x30
 8004e4c:	6b33      	ldr	r3, [r6, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004e4e:	9504      	str	r5, [sp, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e50:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e54:	f5a6 5620 	sub.w	r6, r6, #10240	; 0x2800
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e58:	9302      	str	r3, [sp, #8]
 8004e5a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e5c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004e5e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e60:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004e62:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004e64:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e68:	f7fd f906 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e6c:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e70:	a903      	add	r1, sp, #12
 8004e72:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e74:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004e76:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004e7a:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e7c:	f7fd f8fc 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e80:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e84:	a903      	add	r1, sp, #12
 8004e86:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e88:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004e8a:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004e8e:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e90:	f7fd f8f2 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004e98:	a903      	add	r1, sp, #12
 8004e9a:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004e9c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004e9e:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004ea2:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ea4:	f7fd f8e8 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004eac:	a903      	add	r1, sp, #12
 8004eae:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004eb0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004eb2:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004eb6:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004eb8:	f7fd f8de 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ec0:	a903      	add	r1, sp, #12
 8004ec2:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004ec4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004ec6:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004eca:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ecc:	f7fd f8d4 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004ed0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ed4:	a903      	add	r1, sp, #12
 8004ed6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004ed8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004eda:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004ede:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ee0:	f7fd f8ca 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004ee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ee8:	a903      	add	r1, sp, #12
 8004eea:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004eec:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004eee:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004ef2:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ef4:	f7fd f8c0 	bl	8002078 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004efc:	a903      	add	r1, sp, #12
 8004efe:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004f00:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8004f02:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8004f06:	9504      	str	r5, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f08:	f7fd f8b6 	bl	8002078 <HAL_GPIO_Init>

  HAL_NVIC_SetPriority((IRQn_Type)(EXTI9_5_IRQn), 0x0e, 0);
 8004f0c:	463a      	mov	r2, r7
 8004f0e:	210e      	movs	r1, #14
 8004f10:	2017      	movs	r0, #23
 8004f12:	f7fd f845 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI9_5_IRQn));
 8004f16:	2017      	movs	r0, #23
 8004f18:	f7fd f874 	bl	8002004 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority((IRQn_Type)(EXTI15_10_IRQn), 0x0e, 0);
 8004f1c:	463a      	mov	r2, r7
 8004f1e:	210e      	movs	r1, #14
 8004f20:	2028      	movs	r0, #40	; 0x28
 8004f22:	f7fd f83d 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI15_10_IRQn));
 8004f26:	2028      	movs	r0, #40	; 0x28
 8004f28:	f7fd f86c 	bl	8002004 <HAL_NVIC_EnableIRQ>

}
 8004f2c:	b009      	add	sp, #36	; 0x24
 8004f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f30:	40023800 	.word	0x40023800
 8004f34:	10310000 	.word	0x10310000
 8004f38:	40020000 	.word	0x40020000

08004f3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	b088      	sub	sp, #32
  GPIO_InitTypeDef          GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks */
  /* Enable GPIO clock*/
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8004f40:	4b14      	ldr	r3, [pc, #80]	; (8004f94 <HAL_ADC_MspInit+0x58>)
  /*##-2- Configure peripheral GPIO */
  /* ADC Channel GPIO pin configuration */
  GPIO_InitStruct.Pin = ADCx_CHANNEL_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8004f42:	4815      	ldr	r0, [pc, #84]	; (8004f98 <HAL_ADC_MspInit+0x5c>)
  ADCx_CHANNEL_GPIO_CLK_ENABLE();
 8004f44:	2400      	movs	r4, #0
 8004f46:	9401      	str	r4, [sp, #4]
 8004f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8004f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f52:	f002 0201 	and.w	r2, r2, #1
 8004f56:	9201      	str	r2, [sp, #4]
 8004f58:	9a01      	ldr	r2, [sp, #4]
  ADCx_CLK_ENABLE();
 8004f5a:	9402      	str	r4, [sp, #8]
 8004f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f62:	645a      	str	r2, [r3, #68]	; 0x44
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f66:	9405      	str	r4, [sp, #20]
  ADCx_CLK_ENABLE();
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	9302      	str	r3, [sp, #8]
 8004f6e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f70:	2210      	movs	r2, #16
 8004f72:	2303      	movs	r3, #3
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8004f74:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f76:	e9cd 2303 	strd	r2, r3, [sp, #12]
  HAL_GPIO_Init(ADCx_CHANNEL_GPIO_PORT, &GPIO_InitStruct);
 8004f7a:	f7fd f87d 	bl	8002078 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC */
  HAL_NVIC_SetPriority(ADCx_IRQn, 15, 0);
 8004f7e:	4622      	mov	r2, r4
 8004f80:	210f      	movs	r1, #15
 8004f82:	2012      	movs	r0, #18
 8004f84:	f7fd f80c 	bl	8001fa0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_IRQn);
 8004f88:	2012      	movs	r0, #18
 8004f8a:	f7fd f83b 	bl	8002004 <HAL_NVIC_EnableIRQ>
}
 8004f8e:	b008      	add	sp, #32
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	40020000 	.word	0x40020000

08004f9c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004f9c:	4770      	bx	lr

08004f9e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004f9e:	e7fe      	b.n	8004f9e <HardFault_Handler>

08004fa0 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004fa0:	e7fe      	b.n	8004fa0 <MemManage_Handler>

08004fa2 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004fa2:	e7fe      	b.n	8004fa2 <BusFault_Handler>

08004fa4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004fa4:	e7fe      	b.n	8004fa4 <UsageFault_Handler>

08004fa6 <SVC_Handler>:
 8004fa6:	4770      	bx	lr

08004fa8 <DebugMon_Handler>:
 8004fa8:	4770      	bx	lr

08004faa <PendSV_Handler>:
 8004faa:	4770      	bx	lr

08004fac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004fac:	b508      	push	{r3, lr}
  HAL_IncTick();
 8004fae:	f7fc fd5b 	bl	8001a68 <HAL_IncTick>
  
  /* Call user callback */
  HAL_SYSTICK_IRQHandler();
  
}
 8004fb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8004fb6:	f7fd b85b 	b.w	8002070 <HAL_SYSTICK_IRQHandler>

08004fba <EXTI0_IRQHandler>:
  * @brief  This function handles External line 0 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8004fba:	b508      	push	{r3, lr}
  HAL_NVIC_DisableIRQ((IRQn_Type)(KEY_BUTTON_EXTI_IRQn));
 8004fbc:	2006      	movs	r0, #6
 8004fbe:	f7fd f82f 	bl	8002020 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
}
 8004fc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 8004fc6:	2001      	movs	r0, #1
 8004fc8:	f7fd b93c 	b.w	8002244 <HAL_GPIO_EXTI_IRQHandler>

08004fcc <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8004fcc:	b508      	push	{r3, lr}
  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI15_10_IRQn));
 8004fce:	2028      	movs	r0, #40	; 0x28
 8004fd0:	f7fd f826 	bl	8002020 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI9_5_IRQn));
 8004fd4:	2017      	movs	r0, #23
 8004fd6:	f7fd f823 	bl	8002020 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004fda:	2080      	movs	r0, #128	; 0x80
 8004fdc:	f7fd f932 	bl	8002244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004fe0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004fe4:	f7fd f92e 	bl	8002244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
}
 8004fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004fec:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004ff0:	f7fd b928 	b.w	8002244 <HAL_GPIO_EXTI_IRQHandler>

08004ff4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8004ff4:	b508      	push	{r3, lr}
  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI9_5_IRQn));
 8004ff6:	2017      	movs	r0, #23
 8004ff8:	f7fd f812 	bl	8002020 <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ((IRQn_Type)(EXTI15_10_IRQn));
 8004ffc:	2028      	movs	r0, #40	; 0x28
 8004ffe:	f7fd f80f 	bl	8002020 <HAL_NVIC_DisableIRQ>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8005002:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005006:	f7fd f91d 	bl	8002244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800500a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800500e:	f7fd f919 	bl	8002244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8005012:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005016:	f7fd f915 	bl	8002244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800501a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800501e:	f7fd f911 	bl	8002244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8005022:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005026:	f7fd f90d 	bl	8002244 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
}
 800502a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800502e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005032:	f7fd b907 	b.w	8002244 <HAL_GPIO_EXTI_IRQHandler>
	...

08005038 <OTG_FS_IRQHandler>:
  * @param  None
  * @retval None
  */
void OTG_FS_IRQHandler(void)
{  
   HAL_PCD_IRQHandler(&hpcd);
 8005038:	4801      	ldr	r0, [pc, #4]	; (8005040 <OTG_FS_IRQHandler+0x8>)
 800503a:	f7fd b9b3 	b.w	80023a4 <HAL_PCD_IRQHandler>
 800503e:	bf00      	nop
 8005040:	20000f9c 	.word	0x20000f9c

08005044 <OTG_FS_WKUP_IRQHandler>:
}

void OTG_FS_WKUP_IRQHandler(void)
{
 8005044:	b510      	push	{r4, lr}
  if ((&hpcd)->Init.low_power_enable)
 8005046:	4c0b      	ldr	r4, [pc, #44]	; (8005074 <OTG_FS_WKUP_IRQHandler+0x30>)
 8005048:	6a23      	ldr	r3, [r4, #32]
 800504a:	b16b      	cbz	r3, 8005068 <OTG_FS_WKUP_IRQHandler+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register */
    SCB->SCR &=
 800504c:	4a0a      	ldr	r2, [pc, #40]	; (8005078 <OTG_FS_WKUP_IRQHandler+0x34>)
 800504e:	6913      	ldr	r3, [r2, #16]
 8005050:	f023 0306 	bic.w	r3, r3, #6
 8005054:	6113      	str	r3, [r2, #16]
      ((uint32_t) (SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));

    /* Configures system clock after wake-up from STOP: enable HSE, PLL and
     * select PLL as system clock source (HSE and PLL are disabled in STOP
     * mode) */
    SystemClock_Config();
 8005056:	f7ff fdd5 	bl	8004c04 <SystemClock_Config>

    /* ungate PHY clock */
    __HAL_PCD_UNGATE_PHYCLOCK((&hpcd));
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8005060:	f023 0301 	bic.w	r3, r3, #1
 8005064:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  }
  /* Clear EXTI pending Bit */
  __HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG();
 8005068:	4b04      	ldr	r3, [pc, #16]	; (800507c <OTG_FS_WKUP_IRQHandler+0x38>)
 800506a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800506e:	615a      	str	r2, [r3, #20]
}
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	20000f9c 	.word	0x20000f9c
 8005078:	e000ed00 	.word	0xe000ed00
 800507c:	40013c00 	.word	0x40013c00

08005080 <ADC_IRQHandler>:


void ADCx_IRQHandler(void)
{
  HAL_ADC_IRQHandler(&AdcHandle);
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <ADC_IRQHandler+0x8>)
 8005082:	f7fc be52 	b.w	8001d2a <HAL_ADC_IRQHandler>
 8005086:	bf00      	nop
 8005088:	20000ba0 	.word	0x20000ba0

0800508c <TIM5_IRQHandler>:
}

void TIM5_IRQHandler(void)
{
 800508c:	b508      	push	{r3, lr}
    HAL_TIM_IRQHandler(&TimHandle_5);
 800508e:	4807      	ldr	r0, [pc, #28]	; (80050ac <TIM5_IRQHandler+0x20>)
 8005090:	f7fe f89a 	bl	80031c8 <HAL_TIM_IRQHandler>
    HAL_NVIC_EnableIRQ((IRQn_Type)(KEY_BUTTON_EXTI_IRQn));
 8005094:	2006      	movs	r0, #6
 8005096:	f7fc ffb5 	bl	8002004 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI9_5_IRQn));
 800509a:	2017      	movs	r0, #23
 800509c:	f7fc ffb2 	bl	8002004 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI15_10_IRQn));
}
 80050a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_EnableIRQ((IRQn_Type)(EXTI15_10_IRQn));
 80050a4:	2028      	movs	r0, #40	; 0x28
 80050a6:	f7fc bfad 	b.w	8002004 <HAL_NVIC_EnableIRQ>
 80050aa:	bf00      	nop
 80050ac:	20000be8 	.word	0x20000be8

080050b0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80050b0:	490f      	ldr	r1, [pc, #60]	; (80050f0 <SystemInit+0x40>)
 80050b2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80050b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80050be:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <SystemInit+0x44>)
 80050c0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80050c2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80050ca:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80050d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050d6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80050d8:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <SystemInit+0x48>)
 80050da:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80050e2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80050e4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80050e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80050ea:	608b      	str	r3, [r1, #8]
#endif
}
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	e000ed00 	.word	0xe000ed00
 80050f4:	40023800 	.word	0x40023800
 80050f8:	24003010 	.word	0x24003010

080050fc <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 80050fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Note: On STM32F4-Discovery board only USB OTG FS core is supported. */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  if(hpcd->Instance == USB_OTG_FS)
 80050fe:	6803      	ldr	r3, [r0, #0]
 8005100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8005104:	b089      	sub	sp, #36	; 0x24
  if(hpcd->Instance == USB_OTG_FS)
 8005106:	d145      	bne.n	8005194 <HAL_PCD_MspInit+0x98>
  {
    /* Configure USB FS GPIOs */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005108:	4c23      	ldr	r4, [pc, #140]	; (8005198 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800510a:	4824      	ldr	r0, [pc, #144]	; (800519c <HAL_PCD_MspInit+0xa0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800510c:	2500      	movs	r5, #0
 800510e:	9501      	str	r5, [sp, #4]
 8005110:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6323      	str	r3, [r4, #48]	; 0x30
 8005118:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	9301      	str	r3, [sp, #4]
 8005120:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8005122:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005126:	2603      	movs	r6, #3
    GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8005128:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800512a:	270a      	movs	r7, #10
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800512e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005130:	e9cd 3504 	strd	r3, r5, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005134:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005136:	9707      	str	r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005138:	f7fc ff9e 	bl	8002078 <HAL_GPIO_Init>
    
	/* Configure VBUS Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800513c:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005140:	4816      	ldr	r0, [pc, #88]	; (800519c <HAL_PCD_MspInit+0xa0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005142:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005144:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005146:	e9cd 3503 	strd	r3, r5, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514a:	f7fc ff95 	bl	8002078 <HAL_GPIO_Init>
    
    /* This for ID line debug */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800514e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005152:	2312      	movs	r3, #18
 8005154:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005158:	4810      	ldr	r0, [pc, #64]	; (800519c <HAL_PCD_MspInit+0xa0>)
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800515a:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800515c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 800515e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8005160:	e9cd 3605 	strd	r3, r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8005164:	f7fc ff88 	bl	8002078 <HAL_GPIO_Init>
    
    /* Enable USB FS Clocks */ 
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005168:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800516a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800516e:	6363      	str	r3, [r4, #52]	; 0x34
 8005170:	9502      	str	r5, [sp, #8]
 8005172:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005178:	6463      	str	r3, [r4, #68]	; 0x44
 800517a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800517c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005180:	9302      	str	r3, [sp, #8]
    
    /* Set USBFS Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 3, 0);
 8005182:	2043      	movs	r0, #67	; 0x43
 8005184:	462a      	mov	r2, r5
 8005186:	4631      	mov	r1, r6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005188:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 3, 0);
 800518a:	f7fc ff09 	bl	8001fa0 <HAL_NVIC_SetPriority>
    
    /* Enable USBFS Interrupt */
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800518e:	2043      	movs	r0, #67	; 0x43
 8005190:	f7fc ff38 	bl	8002004 <HAL_NVIC_EnableIRQ>
  } 
}
 8005194:	b009      	add	sp, #36	; 0x24
 8005196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005198:	40023800 	.word	0x40023800
 800519c:	40020000 	.word	0x40020000

080051a0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80051a0:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 80051a4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80051a8:	f7ff b83c 	b.w	8004224 <USBD_LL_SetupStage>

080051ac <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80051ac:	231c      	movs	r3, #28
 80051ae:	fb03 0301 	mla	r3, r3, r1, r0
 80051b2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80051b6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80051ba:	f7ff b863 	b.w	8004284 <USBD_LL_DataOutStage>

080051be <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80051be:	231c      	movs	r3, #28
 80051c0:	fb03 0301 	mla	r3, r3, r1, r0
 80051c4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80051c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051ca:	f7ff b88b 	b.w	80042e4 <USBD_LL_DataInStage>

080051ce <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 80051ce:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80051d2:	f7ff b91d 	b.w	8004410 <USBD_LL_SOF>

080051d6 <HAL_PCD_ResetCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80051d6:	b510      	push	{r4, lr}
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  /*Set USB Current Speed*/
  switch (hpcd->Init.speed)
 80051d8:	68c1      	ldr	r1, [r0, #12]
{ 
 80051da:	4604      	mov	r4, r0
    
  default:
    speed = USBD_SPEED_FULL;
    break;
  }
  USBD_LL_SetSpeed(hpcd->pData, speed);  
 80051dc:	3900      	subs	r1, #0
 80051de:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80051e2:	bf18      	it	ne
 80051e4:	2101      	movne	r1, #1
 80051e6:	f7ff f8fb 	bl	80043e0 <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset(hpcd->pData);
 80051ea:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80051ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset(hpcd->pData);
 80051f2:	f7ff b8c9 	b.w	8004388 <USBD_LL_Reset>

080051f6 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Suspend(hpcd->pData);
 80051f6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80051fa:	f7ff b8f4 	b.w	80043e6 <USBD_LL_Suspend>

080051fe <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_Resume(hpcd->pData);
 80051fe:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005202:	f7ff b8fa 	b.w	80043fa <USBD_LL_Resume>

08005206 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoOUTIncomplete(hpcd->pData, epnum);
 8005206:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800520a:	f7ff b923 	b.w	8004454 <USBD_LL_IsoOUTIncomplete>

0800520e <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_IsoINIncomplete(hpcd->pData, epnum);
 800520e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005212:	f7ff b90e 	b.w	8004432 <USBD_LL_IsoINIncomplete>

08005216 <HAL_PCD_ConnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevConnected(hpcd->pData);
 8005216:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 800521a:	f7ff b92c 	b.w	8004476 <USBD_LL_DevConnected>

0800521e <HAL_PCD_DisconnectCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_DevDisconnected(hpcd->pData);
 800521e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8005222:	f7ff b92a 	b.w	800447a <USBD_LL_DevDisconnected>
	...

08005228 <USBD_LL_Init>:
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005228:	4b15      	ldr	r3, [pc, #84]	; (8005280 <USBD_LL_Init+0x58>)
  *         Initialize the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{
 800522a:	b570      	push	{r4, r5, r6, lr}
   /* Change Systick prioity */
  NVIC_SetPriority (SysTick_IRQn, 0);  
  
  /*Set LL Driver parameters */
  hpcd.Instance = USB_OTG_FS;
 800522c:	4c15      	ldr	r4, [pc, #84]	; (8005284 <USBD_LL_Init+0x5c>)
 800522e:	2500      	movs	r5, #0
 8005230:	f883 5023 	strb.w	r5, [r3, #35]	; 0x23
  hpcd.Init.dev_endpoints = 4; 
 8005234:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005238:	2304      	movs	r3, #4
 800523a:	e9c4 2300 	strd	r2, r3, [r4]
  hpcd.Init.use_dedicated_ep1 = 0;  
  hpcd.Init.dma_enable = 0;
  hpcd.Init.low_power_enable = 0;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED; 
  hpcd.Init.Sof_enable = 1;
 800523e:	2601      	movs	r6, #1
 8005240:	2302      	movs	r3, #2
  hpcd.Init.speed = PCD_SPEED_FULL;
  hpcd.Init.vbus_sensing_enable = 1;
  /* Link The driver to the stack */
   hpcd.pData = pdev;
 8005242:	f8c4 0404 	str.w	r0, [r4, #1028]	; 0x404
  pdev->pData = &hpcd;
 8005246:	f8c0 42c4 	str.w	r4, [r0, #708]	; 0x2c4
  /*Initialize LL Driver */
  HAL_PCD_Init(&hpcd);
 800524a:	4620      	mov	r0, r4
  hpcd.Init.Sof_enable = 1;
 800524c:	e9c4 3606 	strd	r3, r6, [r4, #24]
  hpcd.Init.speed = PCD_SPEED_FULL;
 8005250:	60e3      	str	r3, [r4, #12]
  hpcd.Init.use_dedicated_ep1 = 0;  
 8005252:	6325      	str	r5, [r4, #48]	; 0x30
  hpcd.Init.dma_enable = 0;
 8005254:	6125      	str	r5, [r4, #16]
  hpcd.Init.low_power_enable = 0;
 8005256:	6225      	str	r5, [r4, #32]
  hpcd.Init.vbus_sensing_enable = 1;
 8005258:	62e6      	str	r6, [r4, #44]	; 0x2c
  HAL_PCD_Init(&hpcd);
 800525a:	f7fc ffff 	bl	800225c <HAL_PCD_Init>
  
  HAL_PCDEx_SetRxFiFo(&hpcd, 0x80);
 800525e:	2180      	movs	r1, #128	; 0x80
 8005260:	4620      	mov	r0, r4
 8005262:	f7fd fca2 	bl	8002baa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd, 0, 0x40);
 8005266:	4629      	mov	r1, r5
 8005268:	2240      	movs	r2, #64	; 0x40
 800526a:	4620      	mov	r0, r4
 800526c:	f7fd fc7d 	bl	8002b6a <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd, 1, 0x80); 
 8005270:	2280      	movs	r2, #128	; 0x80
 8005272:	4631      	mov	r1, r6
 8005274:	4620      	mov	r0, r4
 8005276:	f7fd fc78 	bl	8002b6a <HAL_PCDEx_SetTxFiFo>
 
  return USBD_OK;
}
 800527a:	4628      	mov	r0, r5
 800527c:	bd70      	pop	{r4, r5, r6, pc}
 800527e:	bf00      	nop
 8005280:	e000ed00 	.word	0xe000ed00
 8005284:	20000f9c 	.word	0x20000f9c

08005288 <USBD_LL_Start>:
  *         Start the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005288:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 800528a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800528e:	f7fd f86a 	bl	8002366 <HAL_PCD_Start>
  return USBD_OK; 
}
 8005292:	2000      	movs	r0, #0
 8005294:	bd08      	pop	{r3, pc}

08005296 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8005296:	b510      	push	{r4, lr}
 8005298:	4614      	mov	r4, r2
    
  HAL_PCD_EP_Open(pdev->pData, 
 800529a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 800529e:	461a      	mov	r2, r3
  HAL_PCD_EP_Open(pdev->pData, 
 80052a0:	4623      	mov	r3, r4
 80052a2:	f7fd fb41 	bl	8002928 <HAL_PCD_EP_Open>
                  ep_addr, 
                  ep_mps, 
                  ep_type);
    
  return USBD_OK; 
}
 80052a6:	2000      	movs	r0, #0
 80052a8:	bd10      	pop	{r4, pc}

080052aa <USBD_LL_CloseEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number      
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80052aa:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80052ac:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80052b0:	f7fd fb72 	bl	8002998 <HAL_PCD_EP_Close>
  return USBD_OK; 
}
 80052b4:	2000      	movs	r0, #0
 80052b6:	bd08      	pop	{r3, pc}

080052b8 <USBD_LL_StallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number      
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80052b8:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80052ba:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80052be:	f7fd fbe6 	bl	8002a8e <HAL_PCD_EP_SetStall>
  return USBD_OK; 
}
 80052c2:	2000      	movs	r0, #0
 80052c4:	bd08      	pop	{r3, pc}

080052c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number      
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 80052c6:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80052c8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80052cc:	f7fd fc17 	bl	8002afe <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 80052d0:	2000      	movs	r0, #0
 80052d2:	bd08      	pop	{r3, pc}

080052d4 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = pdev->pData; 
  
  if((ep_addr & 0x80) == 0x80)
 80052d4:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = pdev->pData; 
 80052d8:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 80052dc:	f04f 021c 	mov.w	r2, #28
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80052e0:	bf1b      	ittet	ne
 80052e2:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 80052e6:	fb02 3101 	mlane	r1, r2, r1, r3
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80052ea:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80052ee:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80052f2:	bf08      	it	eq
 80052f4:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
  }
}
 80052f8:	4770      	bx	lr

080052fa <USBD_LL_SetUSBAddress>:
  * @param  pdev: device handle
  * @param  ep_addr: Endpoint Number      
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 80052fa:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80052fc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005300:	f7fd fafe 	bl	8002900 <HAL_PCD_SetAddress>
  return USBD_OK; 
  }
 8005304:	2000      	movs	r0, #0
 8005306:	bd08      	pop	{r3, pc}

08005308 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint32_t  size)
  {
 8005308:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800530a:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800530e:	f7fd fb9e 	bl	8002a4e <HAL_PCD_EP_Transmit>
  return USBD_OK;   
}
 8005312:	2000      	movs	r0, #0
 8005314:	bd08      	pop	{r3, pc}

08005316 <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint32_t  size)
{
 8005316:	b508      	push	{r3, lr}
  
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005318:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 800531c:	f7fd fb6b 	bl	80029f6 <HAL_PCD_EP_Receive>
  return USBD_OK;   
  }
 8005320:	2000      	movs	r0, #0
 8005322:	bd08      	pop	{r3, pc}

08005324 <USBD_LL_GetRxDataSize>:
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize  (USBD_HandleTypeDef *pdev, uint8_t  ep_addr)  
  {
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 8005324:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8005328:	f7fd bb89 	b.w	8002a3e <HAL_PCD_EP_GetRxCount>

0800532c <USBD_HID_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HID_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 800532c:	2312      	movs	r3, #18
  return hUSBDDeviceDesc;
}
 800532e:	4801      	ldr	r0, [pc, #4]	; (8005334 <USBD_HID_DeviceDescriptor+0x8>)
  *length = sizeof(hUSBDDeviceDesc);
 8005330:	800b      	strh	r3, [r1, #0]
}
 8005332:	4770      	bx	lr
 8005334:	20000534 	.word	0x20000534

08005338 <USBD_HID_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HID_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8005338:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 800533a:	4801      	ldr	r0, [pc, #4]	; (8005340 <USBD_HID_LangIDStrDescriptor+0x8>)
  *length =  sizeof(USBD_LangIDDesc);  
 800533c:	800b      	strh	r3, [r1, #0]
}
 800533e:	4770      	bx	lr
 8005340:	20000530 	.word	0x20000530

08005344 <USBD_HID_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HID_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005344:	b510      	push	{r4, lr}
  USBD_GetString ((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005346:	4c04      	ldr	r4, [pc, #16]	; (8005358 <USBD_HID_ManufacturerStrDescriptor+0x14>)
 8005348:	4804      	ldr	r0, [pc, #16]	; (800535c <USBD_HID_ManufacturerStrDescriptor+0x18>)
{
 800534a:	460a      	mov	r2, r1
  USBD_GetString ((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800534c:	4621      	mov	r1, r4
 800534e:	f7ff fab0 	bl	80048b2 <USBD_GetString>
  return USBD_StrDesc;
}
 8005352:	4620      	mov	r0, r4
 8005354:	bd10      	pop	{r4, pc}
 8005356:	bf00      	nop
 8005358:	200013a4 	.word	0x200013a4
 800535c:	0800b882 	.word	0x0800b882

08005360 <USBD_HID_ProductStrDescriptor>:
{
 8005360:	460a      	mov	r2, r1
 8005362:	b508      	push	{r3, lr}
    USBD_GetString ((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8005364:	4904      	ldr	r1, [pc, #16]	; (8005378 <USBD_HID_ProductStrDescriptor+0x18>)
  if(speed == 0)
 8005366:	b920      	cbnz	r0, 8005372 <USBD_HID_ProductStrDescriptor+0x12>
    USBD_GetString ((uint8_t *)USBD_PRODUCT_HS_STRING, USBD_StrDesc, length);
 8005368:	4804      	ldr	r0, [pc, #16]	; (800537c <USBD_HID_ProductStrDescriptor+0x1c>)
    USBD_GetString ((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 800536a:	f7ff faa2 	bl	80048b2 <USBD_GetString>
}
 800536e:	4802      	ldr	r0, [pc, #8]	; (8005378 <USBD_HID_ProductStrDescriptor+0x18>)
 8005370:	bd08      	pop	{r3, pc}
    USBD_GetString ((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);
 8005372:	4803      	ldr	r0, [pc, #12]	; (8005380 <USBD_HID_ProductStrDescriptor+0x20>)
 8005374:	e7f9      	b.n	800536a <USBD_HID_ProductStrDescriptor+0xa>
 8005376:	bf00      	nop
 8005378:	200013a4 	.word	0x200013a4
 800537c:	0800b895 	.word	0x0800b895
 8005380:	0800b8b2 	.word	0x0800b8b2

08005384 <USBD_HID_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HID_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8005384:	460a      	mov	r2, r1
 8005386:	b508      	push	{r3, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 8005388:	4904      	ldr	r1, [pc, #16]	; (800539c <USBD_HID_SerialStrDescriptor+0x18>)
  if(speed  == USBD_SPEED_HIGH)
 800538a:	b920      	cbnz	r0, 8005396 <USBD_HID_SerialStrDescriptor+0x12>
    USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_HS_STRING, USBD_StrDesc, length);
 800538c:	4804      	ldr	r0, [pc, #16]	; (80053a0 <USBD_HID_SerialStrDescriptor+0x1c>)
  }
  else
  {
    USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 800538e:	f7ff fa90 	bl	80048b2 <USBD_GetString>
  }
  return USBD_StrDesc;
}
 8005392:	4802      	ldr	r0, [pc, #8]	; (800539c <USBD_HID_SerialStrDescriptor+0x18>)
 8005394:	bd08      	pop	{r3, pc}
    USBD_GetString ((uint8_t *)USBD_SERIALNUMBER_FS_STRING, USBD_StrDesc, length);
 8005396:	4803      	ldr	r0, [pc, #12]	; (80053a4 <USBD_HID_SerialStrDescriptor+0x20>)
 8005398:	e7f9      	b.n	800538e <USBD_HID_SerialStrDescriptor+0xa>
 800539a:	bf00      	nop
 800539c:	200013a4 	.word	0x200013a4
 80053a0:	0800b8cf 	.word	0x0800b8cf
 80053a4:	0800b8dc 	.word	0x0800b8dc

080053a8 <USBD_HID_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HID_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80053a8:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString ((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80053aa:	4c04      	ldr	r4, [pc, #16]	; (80053bc <USBD_HID_ConfigStrDescriptor+0x14>)
 80053ac:	4804      	ldr	r0, [pc, #16]	; (80053c0 <USBD_HID_ConfigStrDescriptor+0x18>)
{
 80053ae:	460a      	mov	r2, r1
    USBD_GetString ((uint8_t *)USBD_CONFIGURATION_HS_STRING, USBD_StrDesc, length);
 80053b0:	4621      	mov	r1, r4
 80053b2:	f7ff fa7e 	bl	80048b2 <USBD_GetString>
  else
  {
    USBD_GetString ((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 80053b6:	4620      	mov	r0, r4
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	bf00      	nop
 80053bc:	200013a4 	.word	0x200013a4
 80053c0:	0800b8e9 	.word	0x0800b8e9

080053c4 <USBD_HID_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_HID_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 80053c4:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString ((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80053c6:	4c04      	ldr	r4, [pc, #16]	; (80053d8 <USBD_HID_InterfaceStrDescriptor+0x14>)
 80053c8:	4804      	ldr	r0, [pc, #16]	; (80053dc <USBD_HID_InterfaceStrDescriptor+0x18>)
{
 80053ca:	460a      	mov	r2, r1
    USBD_GetString ((uint8_t *)USBD_INTERFACE_HS_STRING, USBD_StrDesc, length);
 80053cc:	4621      	mov	r1, r4
 80053ce:	f7ff fa70 	bl	80048b2 <USBD_GetString>
  else
  {
    USBD_GetString ((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 80053d2:	4620      	mov	r0, r4
 80053d4:	bd10      	pop	{r4, pc}
 80053d6:	bf00      	nop
 80053d8:	200013a4 	.word	0x200013a4
 80053dc:	0800b8f5 	.word	0x0800b8f5

080053e0 <__errno>:
 80053e0:	4b01      	ldr	r3, [pc, #4]	; (80053e8 <__errno+0x8>)
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20000000 	.word	0x20000000

080053ec <_cleanup_r>:
 80053ec:	4901      	ldr	r1, [pc, #4]	; (80053f4 <_cleanup_r+0x8>)
 80053ee:	f000 b895 	b.w	800551c <_fwalk_reent>
 80053f2:	bf00      	nop
 80053f4:	08008979 	.word	0x08008979

080053f8 <__sinit>:
 80053f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053fc:	4682      	mov	sl, r0
 80053fe:	4839      	ldr	r0, [pc, #228]	; (80054e4 <__sinit+0xec>)
 8005400:	f7fb ff16 	bl	8001230 <__retarget_lock_acquire_recursive>
 8005404:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8005408:	2c00      	cmp	r4, #0
 800540a:	d166      	bne.n	80054da <__sinit+0xe2>
 800540c:	f8da 5004 	ldr.w	r5, [sl, #4]
 8005410:	4a35      	ldr	r2, [pc, #212]	; (80054e8 <__sinit+0xf0>)
 8005412:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
 8005416:	2303      	movs	r3, #3
 8005418:	e9ca 43b8 	strd	r4, r3, [sl, #736]	; 0x2e0
 800541c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80054fc <__sinit+0x104>
 8005420:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8005500 <__sinit+0x108>
 8005424:	4f31      	ldr	r7, [pc, #196]	; (80054ec <__sinit+0xf4>)
 8005426:	4e32      	ldr	r6, [pc, #200]	; (80054f0 <__sinit+0xf8>)
 8005428:	2304      	movs	r3, #4
 800542a:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
 800542e:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
 8005432:	4621      	mov	r1, r4
 8005434:	e9c5 4302 	strd	r4, r3, [r5, #8]
 8005438:	e9c5 4400 	strd	r4, r4, [r5]
 800543c:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8005440:	666c      	str	r4, [r5, #100]	; 0x64
 8005442:	2208      	movs	r2, #8
 8005444:	61ac      	str	r4, [r5, #24]
 8005446:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800544a:	f7fb fe75 	bl	8001138 <memset>
 800544e:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8005452:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8005456:	62ee      	str	r6, [r5, #44]	; 0x2c
 8005458:	f105 0058 	add.w	r0, r5, #88	; 0x58
 800545c:	f7fb fee4 	bl	8001228 <__retarget_lock_init_recursive>
 8005460:	f8da 5008 	ldr.w	r5, [sl, #8]
 8005464:	4b23      	ldr	r3, [pc, #140]	; (80054f4 <__sinit+0xfc>)
 8005466:	60eb      	str	r3, [r5, #12]
 8005468:	4621      	mov	r1, r4
 800546a:	e9c5 4400 	strd	r4, r4, [r5]
 800546e:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8005472:	666c      	str	r4, [r5, #100]	; 0x64
 8005474:	60ac      	str	r4, [r5, #8]
 8005476:	61ac      	str	r4, [r5, #24]
 8005478:	2208      	movs	r2, #8
 800547a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 800547e:	f7fb fe5b 	bl	8001138 <memset>
 8005482:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8005486:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 800548a:	62ee      	str	r6, [r5, #44]	; 0x2c
 800548c:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8005490:	f7fb feca 	bl	8001228 <__retarget_lock_init_recursive>
 8005494:	f8da 500c 	ldr.w	r5, [sl, #12]
 8005498:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <__sinit+0x100>)
 800549a:	60eb      	str	r3, [r5, #12]
 800549c:	4621      	mov	r1, r4
 800549e:	e9c5 4400 	strd	r4, r4, [r5]
 80054a2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 80054a6:	666c      	str	r4, [r5, #100]	; 0x64
 80054a8:	60ac      	str	r4, [r5, #8]
 80054aa:	61ac      	str	r4, [r5, #24]
 80054ac:	2208      	movs	r2, #8
 80054ae:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 80054b2:	f7fb fe41 	bl	8001138 <memset>
 80054b6:	f105 0058 	add.w	r0, r5, #88	; 0x58
 80054ba:	e9c5 5907 	strd	r5, r9, [r5, #28]
 80054be:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
 80054c2:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
 80054c6:	f7fb feaf 	bl	8001228 <__retarget_lock_init_recursive>
 80054ca:	2301      	movs	r3, #1
 80054cc:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 80054d0:	4804      	ldr	r0, [pc, #16]	; (80054e4 <__sinit+0xec>)
 80054d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054d6:	f7fb bead 	b.w	8001234 <__retarget_lock_release_recursive>
 80054da:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80054de:	4801      	ldr	r0, [pc, #4]	; (80054e4 <__sinit+0xec>)
 80054e0:	f7fb bea8 	b.w	8001234 <__retarget_lock_release_recursive>
 80054e4:	20000af0 	.word	0x20000af0
 80054e8:	080053ed 	.word	0x080053ed
 80054ec:	08005bad 	.word	0x08005bad
 80054f0:	08005bcd 	.word	0x08005bcd
 80054f4:	00010009 	.word	0x00010009
 80054f8:	00020012 	.word	0x00020012
 80054fc:	08005b49 	.word	0x08005b49
 8005500:	08005b6d 	.word	0x08005b6d

08005504 <__sfp_lock_acquire>:
 8005504:	4801      	ldr	r0, [pc, #4]	; (800550c <__sfp_lock_acquire+0x8>)
 8005506:	f7fb be93 	b.w	8001230 <__retarget_lock_acquire_recursive>
 800550a:	bf00      	nop
 800550c:	20000aec 	.word	0x20000aec

08005510 <__sfp_lock_release>:
 8005510:	4801      	ldr	r0, [pc, #4]	; (8005518 <__sfp_lock_release+0x8>)
 8005512:	f7fb be8f 	b.w	8001234 <__retarget_lock_release_recursive>
 8005516:	bf00      	nop
 8005518:	20000aec 	.word	0x20000aec

0800551c <_fwalk_reent>:
 800551c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005520:	4607      	mov	r7, r0
 8005522:	4688      	mov	r8, r1
 8005524:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
 8005528:	f04f 0900 	mov.w	r9, #0
 800552c:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
 8005530:	3d01      	subs	r5, #1
 8005532:	d411      	bmi.n	8005558 <_fwalk_reent+0x3c>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	2b01      	cmp	r3, #1
 8005538:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800553c:	d908      	bls.n	8005550 <_fwalk_reent+0x34>
 800553e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8005542:	3301      	adds	r3, #1
 8005544:	4621      	mov	r1, r4
 8005546:	d003      	beq.n	8005550 <_fwalk_reent+0x34>
 8005548:	4638      	mov	r0, r7
 800554a:	47c0      	blx	r8
 800554c:	ea49 0900 	orr.w	r9, r9, r0
 8005550:	1c6b      	adds	r3, r5, #1
 8005552:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8005556:	d1ed      	bne.n	8005534 <_fwalk_reent+0x18>
 8005558:	6836      	ldr	r6, [r6, #0]
 800555a:	2e00      	cmp	r6, #0
 800555c:	d1e6      	bne.n	800552c <_fwalk_reent+0x10>
 800555e:	4648      	mov	r0, r9
 8005560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005564 <malloc>:
 8005564:	4b02      	ldr	r3, [pc, #8]	; (8005570 <malloc+0xc>)
 8005566:	4601      	mov	r1, r0
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	f000 b80b 	b.w	8005584 <_malloc_r>
 800556e:	bf00      	nop
 8005570:	20000000 	.word	0x20000000

08005574 <free>:
 8005574:	4b02      	ldr	r3, [pc, #8]	; (8005580 <free+0xc>)
 8005576:	4601      	mov	r1, r0
 8005578:	6818      	ldr	r0, [r3, #0]
 800557a:	f003 bb79 	b.w	8008c70 <_free_r>
 800557e:	bf00      	nop
 8005580:	20000000 	.word	0x20000000

08005584 <_malloc_r>:
 8005584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005588:	f101 060b 	add.w	r6, r1, #11
 800558c:	2e16      	cmp	r6, #22
 800558e:	b083      	sub	sp, #12
 8005590:	4604      	mov	r4, r0
 8005592:	d824      	bhi.n	80055de <_malloc_r+0x5a>
 8005594:	2910      	cmp	r1, #16
 8005596:	f200 80ba 	bhi.w	800570e <_malloc_r+0x18a>
 800559a:	f000 faa3 	bl	8005ae4 <__malloc_lock>
 800559e:	2610      	movs	r6, #16
 80055a0:	2218      	movs	r2, #24
 80055a2:	2002      	movs	r0, #2
 80055a4:	4fb5      	ldr	r7, [pc, #724]	; (800587c <_malloc_r+0x2f8>)
 80055a6:	443a      	add	r2, r7
 80055a8:	f1a2 0108 	sub.w	r1, r2, #8
 80055ac:	6853      	ldr	r3, [r2, #4]
 80055ae:	428b      	cmp	r3, r1
 80055b0:	f000 80ba 	beq.w	8005728 <_malloc_r+0x1a4>
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	68d9      	ldr	r1, [r3, #12]
 80055b8:	f022 0203 	bic.w	r2, r2, #3
 80055bc:	441a      	add	r2, r3
 80055be:	689d      	ldr	r5, [r3, #8]
 80055c0:	60e9      	str	r1, [r5, #12]
 80055c2:	608d      	str	r5, [r1, #8]
 80055c4:	6851      	ldr	r1, [r2, #4]
 80055c6:	f041 0101 	orr.w	r1, r1, #1
 80055ca:	4620      	mov	r0, r4
 80055cc:	6051      	str	r1, [r2, #4]
 80055ce:	f103 0508 	add.w	r5, r3, #8
 80055d2:	f000 fa8d 	bl	8005af0 <__malloc_unlock>
 80055d6:	4628      	mov	r0, r5
 80055d8:	b003      	add	sp, #12
 80055da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055de:	f036 0607 	bics.w	r6, r6, #7
 80055e2:	f100 8094 	bmi.w	800570e <_malloc_r+0x18a>
 80055e6:	42b1      	cmp	r1, r6
 80055e8:	f200 8091 	bhi.w	800570e <_malloc_r+0x18a>
 80055ec:	f000 fa7a 	bl	8005ae4 <__malloc_lock>
 80055f0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
 80055f4:	f0c0 819a 	bcc.w	800592c <_malloc_r+0x3a8>
 80055f8:	0a73      	lsrs	r3, r6, #9
 80055fa:	f000 808f 	beq.w	800571c <_malloc_r+0x198>
 80055fe:	2b04      	cmp	r3, #4
 8005600:	f200 816f 	bhi.w	80058e2 <_malloc_r+0x35e>
 8005604:	09b3      	lsrs	r3, r6, #6
 8005606:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800560a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 800560e:	00c3      	lsls	r3, r0, #3
 8005610:	4f9a      	ldr	r7, [pc, #616]	; (800587c <_malloc_r+0x2f8>)
 8005612:	443b      	add	r3, r7
 8005614:	f1a3 0508 	sub.w	r5, r3, #8
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	429d      	cmp	r5, r3
 800561c:	d106      	bne.n	800562c <_malloc_r+0xa8>
 800561e:	e00c      	b.n	800563a <_malloc_r+0xb6>
 8005620:	2900      	cmp	r1, #0
 8005622:	f280 8127 	bge.w	8005874 <_malloc_r+0x2f0>
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	429d      	cmp	r5, r3
 800562a:	d006      	beq.n	800563a <_malloc_r+0xb6>
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	f022 0203 	bic.w	r2, r2, #3
 8005632:	1b91      	subs	r1, r2, r6
 8005634:	290f      	cmp	r1, #15
 8005636:	ddf3      	ble.n	8005620 <_malloc_r+0x9c>
 8005638:	4660      	mov	r0, ip
 800563a:	693d      	ldr	r5, [r7, #16]
 800563c:	f8df c250 	ldr.w	ip, [pc, #592]	; 8005890 <_malloc_r+0x30c>
 8005640:	4565      	cmp	r5, ip
 8005642:	d07c      	beq.n	800573e <_malloc_r+0x1ba>
 8005644:	686a      	ldr	r2, [r5, #4]
 8005646:	f022 0203 	bic.w	r2, r2, #3
 800564a:	1b93      	subs	r3, r2, r6
 800564c:	2b0f      	cmp	r3, #15
 800564e:	f300 817b 	bgt.w	8005948 <_malloc_r+0x3c4>
 8005652:	2b00      	cmp	r3, #0
 8005654:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8005658:	f280 816c 	bge.w	8005934 <_malloc_r+0x3b0>
 800565c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005660:	f080 811a 	bcs.w	8005898 <_malloc_r+0x314>
 8005664:	08d3      	lsrs	r3, r2, #3
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	3301      	adds	r3, #1
 800566a:	ea4f 1e52 	mov.w	lr, r2, lsr #5
 800566e:	2201      	movs	r2, #1
 8005670:	fa02 f20e 	lsl.w	r2, r2, lr
 8005674:	430a      	orrs	r2, r1
 8005676:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
 800567a:	f8c5 e008 	str.w	lr, [r5, #8]
 800567e:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8005682:	3908      	subs	r1, #8
 8005684:	60e9      	str	r1, [r5, #12]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 800568c:	f8ce 500c 	str.w	r5, [lr, #12]
 8005690:	1083      	asrs	r3, r0, #2
 8005692:	2101      	movs	r1, #1
 8005694:	4099      	lsls	r1, r3
 8005696:	4291      	cmp	r1, r2
 8005698:	d857      	bhi.n	800574a <_malloc_r+0x1c6>
 800569a:	4211      	tst	r1, r2
 800569c:	d106      	bne.n	80056ac <_malloc_r+0x128>
 800569e:	f020 0003 	bic.w	r0, r0, #3
 80056a2:	0049      	lsls	r1, r1, #1
 80056a4:	4211      	tst	r1, r2
 80056a6:	f100 0004 	add.w	r0, r0, #4
 80056aa:	d0fa      	beq.n	80056a2 <_malloc_r+0x11e>
 80056ac:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 80056b0:	464d      	mov	r5, r9
 80056b2:	4686      	mov	lr, r0
 80056b4:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80056b8:	4545      	cmp	r5, r8
 80056ba:	d108      	bne.n	80056ce <_malloc_r+0x14a>
 80056bc:	e11d      	b.n	80058fa <_malloc_r+0x376>
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f280 8124 	bge.w	800590c <_malloc_r+0x388>
 80056c4:	f8d8 800c 	ldr.w	r8, [r8, #12]
 80056c8:	4545      	cmp	r5, r8
 80056ca:	f000 8116 	beq.w	80058fa <_malloc_r+0x376>
 80056ce:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80056d2:	f022 0203 	bic.w	r2, r2, #3
 80056d6:	1b93      	subs	r3, r2, r6
 80056d8:	2b0f      	cmp	r3, #15
 80056da:	ddf0      	ble.n	80056be <_malloc_r+0x13a>
 80056dc:	4620      	mov	r0, r4
 80056de:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
 80056e2:	eb08 0106 	add.w	r1, r8, r6
 80056e6:	f046 0601 	orr.w	r6, r6, #1
 80056ea:	f8c8 6004 	str.w	r6, [r8, #4]
 80056ee:	60ec      	str	r4, [r5, #12]
 80056f0:	60a5      	str	r5, [r4, #8]
 80056f2:	f043 0401 	orr.w	r4, r3, #1
 80056f6:	e9c7 1104 	strd	r1, r1, [r7, #16]
 80056fa:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 80056fe:	604c      	str	r4, [r1, #4]
 8005700:	f848 3002 	str.w	r3, [r8, r2]
 8005704:	f000 f9f4 	bl	8005af0 <__malloc_unlock>
 8005708:	f108 0508 	add.w	r5, r8, #8
 800570c:	e002      	b.n	8005714 <_malloc_r+0x190>
 800570e:	230c      	movs	r3, #12
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	2500      	movs	r5, #0
 8005714:	4628      	mov	r0, r5
 8005716:	b003      	add	sp, #12
 8005718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005720:	2040      	movs	r0, #64	; 0x40
 8005722:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8005726:	e773      	b.n	8005610 <_malloc_r+0x8c>
 8005728:	68d3      	ldr	r3, [r2, #12]
 800572a:	429a      	cmp	r2, r3
 800572c:	bf08      	it	eq
 800572e:	3002      	addeq	r0, #2
 8005730:	f47f af40 	bne.w	80055b4 <_malloc_r+0x30>
 8005734:	693d      	ldr	r5, [r7, #16]
 8005736:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005890 <_malloc_r+0x30c>
 800573a:	4565      	cmp	r5, ip
 800573c:	d182      	bne.n	8005644 <_malloc_r+0xc0>
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	1083      	asrs	r3, r0, #2
 8005742:	2101      	movs	r1, #1
 8005744:	4099      	lsls	r1, r3
 8005746:	4291      	cmp	r1, r2
 8005748:	d9a7      	bls.n	800569a <_malloc_r+0x116>
 800574a:	68bd      	ldr	r5, [r7, #8]
 800574c:	686b      	ldr	r3, [r5, #4]
 800574e:	f023 0903 	bic.w	r9, r3, #3
 8005752:	454e      	cmp	r6, r9
 8005754:	d803      	bhi.n	800575e <_malloc_r+0x1da>
 8005756:	eba9 0306 	sub.w	r3, r9, r6
 800575a:	2b0f      	cmp	r3, #15
 800575c:	dc7a      	bgt.n	8005854 <_malloc_r+0x2d0>
 800575e:	f8df b134 	ldr.w	fp, [pc, #308]	; 8005894 <_malloc_r+0x310>
 8005762:	4b47      	ldr	r3, [pc, #284]	; (8005880 <_malloc_r+0x2fc>)
 8005764:	f8db 2000 	ldr.w	r2, [fp]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	3201      	adds	r2, #1
 800576c:	4433      	add	r3, r6
 800576e:	eb05 0a09 	add.w	sl, r5, r9
 8005772:	f000 8133 	beq.w	80059dc <_malloc_r+0x458>
 8005776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800577a:	330f      	adds	r3, #15
 800577c:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
 8005780:	f028 080f 	bic.w	r8, r8, #15
 8005784:	4641      	mov	r1, r8
 8005786:	4620      	mov	r0, r4
 8005788:	f000 f9cc 	bl	8005b24 <_sbrk_r>
 800578c:	1c41      	adds	r1, r0, #1
 800578e:	4602      	mov	r2, r0
 8005790:	f000 80f3 	beq.w	800597a <_malloc_r+0x3f6>
 8005794:	4582      	cmp	sl, r0
 8005796:	f200 80ee 	bhi.w	8005976 <_malloc_r+0x3f2>
 800579a:	4b3a      	ldr	r3, [pc, #232]	; (8005884 <_malloc_r+0x300>)
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	4441      	add	r1, r8
 80057a0:	6019      	str	r1, [r3, #0]
 80057a2:	4608      	mov	r0, r1
 80057a4:	f000 814e 	beq.w	8005a44 <_malloc_r+0x4c0>
 80057a8:	f8db 1000 	ldr.w	r1, [fp]
 80057ac:	9301      	str	r3, [sp, #4]
 80057ae:	3101      	adds	r1, #1
 80057b0:	bf1b      	ittet	ne
 80057b2:	eba2 0a0a 	subne.w	sl, r2, sl
 80057b6:	4450      	addne	r0, sl
 80057b8:	f8cb 2000 	streq.w	r2, [fp]
 80057bc:	6018      	strne	r0, [r3, #0]
 80057be:	f012 0b07 	ands.w	fp, r2, #7
 80057c2:	f000 8117 	beq.w	80059f4 <_malloc_r+0x470>
 80057c6:	f1cb 0108 	rsb	r1, fp, #8
 80057ca:	440a      	add	r2, r1
 80057cc:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
 80057d0:	4490      	add	r8, r2
 80057d2:	3108      	adds	r1, #8
 80057d4:	eba1 0108 	sub.w	r1, r1, r8
 80057d8:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80057dc:	4651      	mov	r1, sl
 80057de:	4620      	mov	r0, r4
 80057e0:	9200      	str	r2, [sp, #0]
 80057e2:	f000 f99f 	bl	8005b24 <_sbrk_r>
 80057e6:	1c42      	adds	r2, r0, #1
 80057e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057ec:	f000 814f 	beq.w	8005a8e <_malloc_r+0x50a>
 80057f0:	1a80      	subs	r0, r0, r2
 80057f2:	eb00 080a 	add.w	r8, r0, sl
 80057f6:	6819      	ldr	r1, [r3, #0]
 80057f8:	60ba      	str	r2, [r7, #8]
 80057fa:	f048 0001 	orr.w	r0, r8, #1
 80057fe:	4451      	add	r1, sl
 8005800:	42bd      	cmp	r5, r7
 8005802:	6050      	str	r0, [r2, #4]
 8005804:	6019      	str	r1, [r3, #0]
 8005806:	f000 8129 	beq.w	8005a5c <_malloc_r+0x4d8>
 800580a:	f1b9 0f0f 	cmp.w	r9, #15
 800580e:	f240 8127 	bls.w	8005a60 <_malloc_r+0x4dc>
 8005812:	6868      	ldr	r0, [r5, #4]
 8005814:	f1a9 0c0c 	sub.w	ip, r9, #12
 8005818:	f02c 0c07 	bic.w	ip, ip, #7
 800581c:	f000 0001 	and.w	r0, r0, #1
 8005820:	ea40 000c 	orr.w	r0, r0, ip
 8005824:	6068      	str	r0, [r5, #4]
 8005826:	f04f 0e05 	mov.w	lr, #5
 800582a:	eb05 000c 	add.w	r0, r5, ip
 800582e:	f1bc 0f0f 	cmp.w	ip, #15
 8005832:	e9c0 ee01 	strd	lr, lr, [r0, #4]
 8005836:	f200 8132 	bhi.w	8005a9e <_malloc_r+0x51a>
 800583a:	6850      	ldr	r0, [r2, #4]
 800583c:	4615      	mov	r5, r2
 800583e:	4b12      	ldr	r3, [pc, #72]	; (8005888 <_malloc_r+0x304>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	428a      	cmp	r2, r1
 8005844:	bf38      	it	cc
 8005846:	6019      	strcc	r1, [r3, #0]
 8005848:	4b10      	ldr	r3, [pc, #64]	; (800588c <_malloc_r+0x308>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	428a      	cmp	r2, r1
 800584e:	bf38      	it	cc
 8005850:	6019      	strcc	r1, [r3, #0]
 8005852:	e094      	b.n	800597e <_malloc_r+0x3fa>
 8005854:	19aa      	adds	r2, r5, r6
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	f046 0601 	orr.w	r6, r6, #1
 800585e:	606e      	str	r6, [r5, #4]
 8005860:	4620      	mov	r0, r4
 8005862:	60ba      	str	r2, [r7, #8]
 8005864:	6053      	str	r3, [r2, #4]
 8005866:	f000 f943 	bl	8005af0 <__malloc_unlock>
 800586a:	3508      	adds	r5, #8
 800586c:	4628      	mov	r0, r5
 800586e:	b003      	add	sp, #12
 8005870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005874:	68d9      	ldr	r1, [r3, #12]
 8005876:	441a      	add	r2, r3
 8005878:	e6a1      	b.n	80055be <_malloc_r+0x3a>
 800587a:	bf00      	nop
 800587c:	20000548 	.word	0x20000548
 8005880:	200014d4 	.word	0x200014d4
 8005884:	200014a4 	.word	0x200014a4
 8005888:	200014cc 	.word	0x200014cc
 800588c:	200014d0 	.word	0x200014d0
 8005890:	20000550 	.word	0x20000550
 8005894:	20000950 	.word	0x20000950
 8005898:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
 800589c:	ea4f 2352 	mov.w	r3, r2, lsr #9
 80058a0:	d363      	bcc.n	800596a <_malloc_r+0x3e6>
 80058a2:	2b14      	cmp	r3, #20
 80058a4:	f200 80b7 	bhi.w	8005a16 <_malloc_r+0x492>
 80058a8:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 80058ac:	00c9      	lsls	r1, r1, #3
 80058ae:	335b      	adds	r3, #91	; 0x5b
 80058b0:	eb07 0e01 	add.w	lr, r7, r1
 80058b4:	5879      	ldr	r1, [r7, r1]
 80058b6:	f1ae 0e08 	sub.w	lr, lr, #8
 80058ba:	458e      	cmp	lr, r1
 80058bc:	f000 8091 	beq.w	80059e2 <_malloc_r+0x45e>
 80058c0:	684b      	ldr	r3, [r1, #4]
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d902      	bls.n	80058d0 <_malloc_r+0x34c>
 80058ca:	6889      	ldr	r1, [r1, #8]
 80058cc:	458e      	cmp	lr, r1
 80058ce:	d1f7      	bne.n	80058c0 <_malloc_r+0x33c>
 80058d0:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	e9c5 1e02 	strd	r1, lr, [r5, #8]
 80058da:	f8ce 5008 	str.w	r5, [lr, #8]
 80058de:	60cd      	str	r5, [r1, #12]
 80058e0:	e6d6      	b.n	8005690 <_malloc_r+0x10c>
 80058e2:	2b14      	cmp	r3, #20
 80058e4:	d959      	bls.n	800599a <_malloc_r+0x416>
 80058e6:	2b54      	cmp	r3, #84	; 0x54
 80058e8:	f200 809d 	bhi.w	8005a26 <_malloc_r+0x4a2>
 80058ec:	0b33      	lsrs	r3, r6, #12
 80058ee:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80058f2:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 80058f6:	00c3      	lsls	r3, r0, #3
 80058f8:	e68a      	b.n	8005610 <_malloc_r+0x8c>
 80058fa:	f10e 0e01 	add.w	lr, lr, #1
 80058fe:	f01e 0f03 	tst.w	lr, #3
 8005902:	f105 0508 	add.w	r5, r5, #8
 8005906:	f47f aed5 	bne.w	80056b4 <_malloc_r+0x130>
 800590a:	e051      	b.n	80059b0 <_malloc_r+0x42c>
 800590c:	4442      	add	r2, r8
 800590e:	4645      	mov	r5, r8
 8005910:	6853      	ldr	r3, [r2, #4]
 8005912:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	6053      	str	r3, [r2, #4]
 800591c:	f855 3f08 	ldr.w	r3, [r5, #8]!
 8005920:	4620      	mov	r0, r4
 8005922:	60d9      	str	r1, [r3, #12]
 8005924:	608b      	str	r3, [r1, #8]
 8005926:	f000 f8e3 	bl	8005af0 <__malloc_unlock>
 800592a:	e6f3      	b.n	8005714 <_malloc_r+0x190>
 800592c:	08f0      	lsrs	r0, r6, #3
 800592e:	f106 0208 	add.w	r2, r6, #8
 8005932:	e637      	b.n	80055a4 <_malloc_r+0x20>
 8005934:	442a      	add	r2, r5
 8005936:	4620      	mov	r0, r4
 8005938:	6853      	ldr	r3, [r2, #4]
 800593a:	f043 0301 	orr.w	r3, r3, #1
 800593e:	6053      	str	r3, [r2, #4]
 8005940:	3508      	adds	r5, #8
 8005942:	f000 f8d5 	bl	8005af0 <__malloc_unlock>
 8005946:	e6e5      	b.n	8005714 <_malloc_r+0x190>
 8005948:	19a9      	adds	r1, r5, r6
 800594a:	4620      	mov	r0, r4
 800594c:	f046 0601 	orr.w	r6, r6, #1
 8005950:	f043 0401 	orr.w	r4, r3, #1
 8005954:	606e      	str	r6, [r5, #4]
 8005956:	e9c7 1104 	strd	r1, r1, [r7, #16]
 800595a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 800595e:	604c      	str	r4, [r1, #4]
 8005960:	50ab      	str	r3, [r5, r2]
 8005962:	f000 f8c5 	bl	8005af0 <__malloc_unlock>
 8005966:	3508      	adds	r5, #8
 8005968:	e6d4      	b.n	8005714 <_malloc_r+0x190>
 800596a:	0993      	lsrs	r3, r2, #6
 800596c:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8005970:	00c9      	lsls	r1, r1, #3
 8005972:	3338      	adds	r3, #56	; 0x38
 8005974:	e79c      	b.n	80058b0 <_malloc_r+0x32c>
 8005976:	42bd      	cmp	r5, r7
 8005978:	d05f      	beq.n	8005a3a <_malloc_r+0x4b6>
 800597a:	68bd      	ldr	r5, [r7, #8]
 800597c:	6868      	ldr	r0, [r5, #4]
 800597e:	f020 0803 	bic.w	r8, r0, #3
 8005982:	4546      	cmp	r6, r8
 8005984:	eba8 0306 	sub.w	r3, r8, r6
 8005988:	d802      	bhi.n	8005990 <_malloc_r+0x40c>
 800598a:	2b0f      	cmp	r3, #15
 800598c:	f73f af62 	bgt.w	8005854 <_malloc_r+0x2d0>
 8005990:	4620      	mov	r0, r4
 8005992:	f000 f8ad 	bl	8005af0 <__malloc_unlock>
 8005996:	2500      	movs	r5, #0
 8005998:	e6bc      	b.n	8005714 <_malloc_r+0x190>
 800599a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800599e:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 80059a2:	00c3      	lsls	r3, r0, #3
 80059a4:	e634      	b.n	8005610 <_malloc_r+0x8c>
 80059a6:	f859 3908 	ldr.w	r3, [r9], #-8
 80059aa:	454b      	cmp	r3, r9
 80059ac:	f040 8096 	bne.w	8005adc <_malloc_r+0x558>
 80059b0:	f010 0f03 	tst.w	r0, #3
 80059b4:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80059b8:	d1f5      	bne.n	80059a6 <_malloc_r+0x422>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	ea23 0301 	bic.w	r3, r3, r1
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	0049      	lsls	r1, r1, #1
 80059c4:	4299      	cmp	r1, r3
 80059c6:	f63f aec0 	bhi.w	800574a <_malloc_r+0x1c6>
 80059ca:	b919      	cbnz	r1, 80059d4 <_malloc_r+0x450>
 80059cc:	e6bd      	b.n	800574a <_malloc_r+0x1c6>
 80059ce:	0049      	lsls	r1, r1, #1
 80059d0:	f10e 0e04 	add.w	lr, lr, #4
 80059d4:	4219      	tst	r1, r3
 80059d6:	d0fa      	beq.n	80059ce <_malloc_r+0x44a>
 80059d8:	4670      	mov	r0, lr
 80059da:	e667      	b.n	80056ac <_malloc_r+0x128>
 80059dc:	f103 0810 	add.w	r8, r3, #16
 80059e0:	e6d0      	b.n	8005784 <_malloc_r+0x200>
 80059e2:	109a      	asrs	r2, r3, #2
 80059e4:	f04f 0801 	mov.w	r8, #1
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	fa08 f202 	lsl.w	r2, r8, r2
 80059ee:	431a      	orrs	r2, r3
 80059f0:	607a      	str	r2, [r7, #4]
 80059f2:	e770      	b.n	80058d6 <_malloc_r+0x352>
 80059f4:	eb02 0108 	add.w	r1, r2, r8
 80059f8:	4249      	negs	r1, r1
 80059fa:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
 80059fe:	4651      	mov	r1, sl
 8005a00:	4620      	mov	r0, r4
 8005a02:	9200      	str	r2, [sp, #0]
 8005a04:	f000 f88e 	bl	8005b24 <_sbrk_r>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a0e:	f47f aeef 	bne.w	80057f0 <_malloc_r+0x26c>
 8005a12:	46da      	mov	sl, fp
 8005a14:	e6ef      	b.n	80057f6 <_malloc_r+0x272>
 8005a16:	2b54      	cmp	r3, #84	; 0x54
 8005a18:	d825      	bhi.n	8005a66 <_malloc_r+0x4e2>
 8005a1a:	0b13      	lsrs	r3, r2, #12
 8005a1c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8005a20:	00c9      	lsls	r1, r1, #3
 8005a22:	336e      	adds	r3, #110	; 0x6e
 8005a24:	e744      	b.n	80058b0 <_malloc_r+0x32c>
 8005a26:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005a2a:	d825      	bhi.n	8005a78 <_malloc_r+0x4f4>
 8005a2c:	0bf3      	lsrs	r3, r6, #15
 8005a2e:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8005a32:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8005a36:	00c3      	lsls	r3, r0, #3
 8005a38:	e5ea      	b.n	8005610 <_malloc_r+0x8c>
 8005a3a:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <_malloc_r+0x55c>)
 8005a3c:	6818      	ldr	r0, [r3, #0]
 8005a3e:	4440      	add	r0, r8
 8005a40:	6018      	str	r0, [r3, #0]
 8005a42:	e6b1      	b.n	80057a8 <_malloc_r+0x224>
 8005a44:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
 8005a48:	f1bc 0f00 	cmp.w	ip, #0
 8005a4c:	f47f aeac 	bne.w	80057a8 <_malloc_r+0x224>
 8005a50:	68bd      	ldr	r5, [r7, #8]
 8005a52:	44c8      	add	r8, r9
 8005a54:	f048 0001 	orr.w	r0, r8, #1
 8005a58:	6068      	str	r0, [r5, #4]
 8005a5a:	e6f0      	b.n	800583e <_malloc_r+0x2ba>
 8005a5c:	4615      	mov	r5, r2
 8005a5e:	e6ee      	b.n	800583e <_malloc_r+0x2ba>
 8005a60:	2301      	movs	r3, #1
 8005a62:	6053      	str	r3, [r2, #4]
 8005a64:	e794      	b.n	8005990 <_malloc_r+0x40c>
 8005a66:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005a6a:	d823      	bhi.n	8005ab4 <_malloc_r+0x530>
 8005a6c:	0bd3      	lsrs	r3, r2, #15
 8005a6e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8005a72:	00c9      	lsls	r1, r1, #3
 8005a74:	3377      	adds	r3, #119	; 0x77
 8005a76:	e71b      	b.n	80058b0 <_malloc_r+0x32c>
 8005a78:	f240 5254 	movw	r2, #1364	; 0x554
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d823      	bhi.n	8005ac8 <_malloc_r+0x544>
 8005a80:	0cb3      	lsrs	r3, r6, #18
 8005a82:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8005a86:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8005a8a:	00c3      	lsls	r3, r0, #3
 8005a8c:	e5c0      	b.n	8005610 <_malloc_r+0x8c>
 8005a8e:	f1ab 0b08 	sub.w	fp, fp, #8
 8005a92:	44d8      	add	r8, fp
 8005a94:	eba8 0802 	sub.w	r8, r8, r2
 8005a98:	f04f 0a00 	mov.w	sl, #0
 8005a9c:	e6ab      	b.n	80057f6 <_malloc_r+0x272>
 8005a9e:	f105 0108 	add.w	r1, r5, #8
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	f003 f8e3 	bl	8008c70 <_free_r>
 8005aaa:	68bd      	ldr	r5, [r7, #8]
 8005aac:	9b00      	ldr	r3, [sp, #0]
 8005aae:	6868      	ldr	r0, [r5, #4]
 8005ab0:	6819      	ldr	r1, [r3, #0]
 8005ab2:	e6c4      	b.n	800583e <_malloc_r+0x2ba>
 8005ab4:	f240 5154 	movw	r1, #1364	; 0x554
 8005ab8:	428b      	cmp	r3, r1
 8005aba:	d80b      	bhi.n	8005ad4 <_malloc_r+0x550>
 8005abc:	0c93      	lsrs	r3, r2, #18
 8005abe:	f103 017d 	add.w	r1, r3, #125	; 0x7d
 8005ac2:	00c9      	lsls	r1, r1, #3
 8005ac4:	337c      	adds	r3, #124	; 0x7c
 8005ac6:	e6f3      	b.n	80058b0 <_malloc_r+0x32c>
 8005ac8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8005acc:	207f      	movs	r0, #127	; 0x7f
 8005ace:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8005ad2:	e59d      	b.n	8005610 <_malloc_r+0x8c>
 8005ad4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8005ad8:	237e      	movs	r3, #126	; 0x7e
 8005ada:	e6e9      	b.n	80058b0 <_malloc_r+0x32c>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	e770      	b.n	80059c2 <_malloc_r+0x43e>
 8005ae0:	200014a4 	.word	0x200014a4

08005ae4 <__malloc_lock>:
 8005ae4:	4801      	ldr	r0, [pc, #4]	; (8005aec <__malloc_lock+0x8>)
 8005ae6:	f7fb bba3 	b.w	8001230 <__retarget_lock_acquire_recursive>
 8005aea:	bf00      	nop
 8005aec:	20000ae8 	.word	0x20000ae8

08005af0 <__malloc_unlock>:
 8005af0:	4801      	ldr	r0, [pc, #4]	; (8005af8 <__malloc_unlock+0x8>)
 8005af2:	f7fb bb9f 	b.w	8001234 <__retarget_lock_release_recursive>
 8005af6:	bf00      	nop
 8005af8:	20000ae8 	.word	0x20000ae8

08005afc <printf>:
 8005afc:	b40f      	push	{r0, r1, r2, r3}
 8005afe:	b500      	push	{lr}
 8005b00:	4907      	ldr	r1, [pc, #28]	; (8005b20 <printf+0x24>)
 8005b02:	b083      	sub	sp, #12
 8005b04:	ab04      	add	r3, sp, #16
 8005b06:	6808      	ldr	r0, [r1, #0]
 8005b08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b0c:	6881      	ldr	r1, [r0, #8]
 8005b0e:	9301      	str	r3, [sp, #4]
 8005b10:	f000 f862 	bl	8005bd8 <_vfprintf_r>
 8005b14:	b003      	add	sp, #12
 8005b16:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b1a:	b004      	add	sp, #16
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	20000000 	.word	0x20000000

08005b24 <_sbrk_r>:
 8005b24:	b538      	push	{r3, r4, r5, lr}
 8005b26:	4d07      	ldr	r5, [pc, #28]	; (8005b44 <_sbrk_r+0x20>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	602a      	str	r2, [r5, #0]
 8005b30:	f7fb fd30 	bl	8001594 <_sbrk>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d000      	beq.n	8005b3a <_sbrk_r+0x16>
 8005b38:	bd38      	pop	{r3, r4, r5, pc}
 8005b3a:	682b      	ldr	r3, [r5, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0fb      	beq.n	8005b38 <_sbrk_r+0x14>
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	bd38      	pop	{r3, r4, r5, pc}
 8005b44:	200014d8 	.word	0x200014d8

08005b48 <__sread>:
 8005b48:	b510      	push	{r4, lr}
 8005b4a:	460c      	mov	r4, r1
 8005b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b50:	f003 fdd4 	bl	80096fc <_read_r>
 8005b54:	2800      	cmp	r0, #0
 8005b56:	db03      	blt.n	8005b60 <__sread+0x18>
 8005b58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005b5a:	4403      	add	r3, r0
 8005b5c:	6523      	str	r3, [r4, #80]	; 0x50
 8005b5e:	bd10      	pop	{r4, pc}
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	bd10      	pop	{r4, pc}
 8005b6a:	bf00      	nop

08005b6c <__swrite>:
 8005b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b70:	460c      	mov	r4, r1
 8005b72:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 8005b76:	461f      	mov	r7, r3
 8005b78:	05cb      	lsls	r3, r1, #23
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	4616      	mov	r6, r2
 8005b7e:	d40b      	bmi.n	8005b98 <__swrite+0x2c>
 8005b80:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8005b84:	81a1      	strh	r1, [r4, #12]
 8005b86:	463b      	mov	r3, r7
 8005b88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b8c:	4632      	mov	r2, r6
 8005b8e:	4628      	mov	r0, r5
 8005b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b94:	f001 be2a 	b.w	80077ec <_write_r>
 8005b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f003 f970 	bl	8008e84 <_lseek_r>
 8005ba4:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8005ba8:	e7ea      	b.n	8005b80 <__swrite+0x14>
 8005baa:	bf00      	nop

08005bac <__sseek>:
 8005bac:	b510      	push	{r4, lr}
 8005bae:	460c      	mov	r4, r1
 8005bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb4:	f003 f966 	bl	8008e84 <_lseek_r>
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	1c42      	adds	r2, r0, #1
 8005bbc:	bf0e      	itee	eq
 8005bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bc6:	6520      	strne	r0, [r4, #80]	; 0x50
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	bd10      	pop	{r4, pc}

08005bcc <__sclose>:
 8005bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd0:	f001 be8c 	b.w	80078ec <_close_r>
 8005bd4:	0000      	movs	r0, r0
	...

08005bd8 <_vfprintf_r>:
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	ed2d 8b0a 	vpush	{d8-d12}
 8005be0:	b0cf      	sub	sp, #316	; 0x13c
 8005be2:	461c      	mov	r4, r3
 8005be4:	ee0a 1a10 	vmov	s20, r1
 8005be8:	4691      	mov	r9, r2
 8005bea:	ee0a 0a90 	vmov	s21, r0
 8005bee:	4605      	mov	r5, r0
 8005bf0:	f003 f944 	bl	8008e7c <_localeconv_r>
 8005bf4:	6803      	ldr	r3, [r0, #0]
 8005bf6:	9313      	str	r3, [sp, #76]	; 0x4c
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	9409      	str	r4, [sp, #36]	; 0x24
 8005bfc:	f7fb f880 	bl	8000d00 <strlen>
 8005c00:	9012      	str	r0, [sp, #72]	; 0x48
 8005c02:	b11d      	cbz	r5, 8005c0c <_vfprintf_r+0x34>
 8005c04:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 8248 	beq.w	800609c <_vfprintf_r+0x4c4>
 8005c0c:	ee1a 2a10 	vmov	r2, s20
 8005c10:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8005c12:	07db      	lsls	r3, r3, #31
 8005c14:	f140 8147 	bpl.w	8005ea6 <_vfprintf_r+0x2ce>
 8005c18:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	0496      	lsls	r6, r2, #18
 8005c20:	d409      	bmi.n	8005c36 <_vfprintf_r+0x5e>
 8005c22:	ee1a 1a10 	vmov	r1, s20
 8005c26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005c2a:	818b      	strh	r3, [r1, #12]
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005c30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c34:	664b      	str	r3, [r1, #100]	; 0x64
 8005c36:	0715      	lsls	r5, r2, #28
 8005c38:	f140 80cc 	bpl.w	8005dd4 <_vfprintf_r+0x1fc>
 8005c3c:	ee1a 3a10 	vmov	r3, s20
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 80c6 	beq.w	8005dd4 <_vfprintf_r+0x1fc>
 8005c48:	f002 031a 	and.w	r3, r2, #26
 8005c4c:	2b0a      	cmp	r3, #10
 8005c4e:	f000 80d2 	beq.w	8005df6 <_vfprintf_r+0x21e>
 8005c52:	464d      	mov	r5, r9
 8005c54:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 8005ec8 <_vfprintf_r+0x2f0>
 8005c58:	782b      	ldrb	r3, [r5, #0]
 8005c5a:	2400      	movs	r4, #0
 8005c5c:	aa25      	add	r2, sp, #148	; 0x94
 8005c5e:	e9cd 4423 	strd	r4, r4, [sp, #140]	; 0x8c
 8005c62:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
 8005c66:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
 8005c6a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005c6e:	ee1a 9a90 	vmov	r9, s21
 8005c72:	940e      	str	r4, [sp, #56]	; 0x38
 8005c74:	9222      	str	r2, [sp, #136]	; 0x88
 8005c76:	4690      	mov	r8, r2
 8005c78:	9414      	str	r4, [sp, #80]	; 0x50
 8005c7a:	9406      	str	r4, [sp, #24]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 81b0 	beq.w	8005fe2 <_vfprintf_r+0x40a>
 8005c82:	46ab      	mov	fp, r5
 8005c84:	e004      	b.n	8005c90 <_vfprintf_r+0xb8>
 8005c86:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80cd 	beq.w	8005e2a <_vfprintf_r+0x252>
 8005c90:	2b25      	cmp	r3, #37	; 0x25
 8005c92:	d1f8      	bne.n	8005c86 <_vfprintf_r+0xae>
 8005c94:	ebbb 0605 	subs.w	r6, fp, r5
 8005c98:	f040 80cb 	bne.w	8005e32 <_vfprintf_r+0x25a>
 8005c9c:	f89b 3000 	ldrb.w	r3, [fp]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 819e 	beq.w	8005fe2 <_vfprintf_r+0x40a>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cac:	f89b 7001 	ldrb.w	r7, [fp, #1]
 8005cb0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005cb4:	9305      	str	r3, [sp, #20]
 8005cb6:	f10b 0b01 	add.w	fp, fp, #1
 8005cba:	9204      	str	r2, [sp, #16]
 8005cbc:	469a      	mov	sl, r3
 8005cbe:	242b      	movs	r4, #43	; 0x2b
 8005cc0:	2120      	movs	r1, #32
 8005cc2:	f10b 0b01 	add.w	fp, fp, #1
 8005cc6:	f1a7 0320 	sub.w	r3, r7, #32
 8005cca:	2b5a      	cmp	r3, #90	; 0x5a
 8005ccc:	f200 8100 	bhi.w	8005ed0 <_vfprintf_r+0x2f8>
 8005cd0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005cd4:	00fe030b 	.word	0x00fe030b
 8005cd8:	030600fe 	.word	0x030600fe
 8005cdc:	00fe00fe 	.word	0x00fe00fe
 8005ce0:	006a00fe 	.word	0x006a00fe
 8005ce4:	00fe00fe 	.word	0x00fe00fe
 8005ce8:	029f0277 	.word	0x029f0277
 8005cec:	028200fe 	.word	0x028200fe
 8005cf0:	00fe02a9 	.word	0x00fe02a9
 8005cf4:	005b02a4 	.word	0x005b02a4
 8005cf8:	005b005b 	.word	0x005b005b
 8005cfc:	005b005b 	.word	0x005b005b
 8005d00:	005b005b 	.word	0x005b005b
 8005d04:	005b005b 	.word	0x005b005b
 8005d08:	00fe00fe 	.word	0x00fe00fe
 8005d0c:	00fe00fe 	.word	0x00fe00fe
 8005d10:	00fe00fe 	.word	0x00fe00fe
 8005d14:	018e00fe 	.word	0x018e00fe
 8005d18:	021600fe 	.word	0x021600fe
 8005d1c:	018e01ed 	.word	0x018e01ed
 8005d20:	018e018e 	.word	0x018e018e
 8005d24:	00fe00fe 	.word	0x00fe00fe
 8005d28:	00fe00fe 	.word	0x00fe00fe
 8005d2c:	00fe0301 	.word	0x00fe0301
 8005d30:	024500fe 	.word	0x024500fe
 8005d34:	00fe00fe 	.word	0x00fe00fe
 8005d38:	022000fe 	.word	0x022000fe
 8005d3c:	02c300fe 	.word	0x02c300fe
 8005d40:	00fe00fe 	.word	0x00fe00fe
 8005d44:	00fe079d 	.word	0x00fe079d
 8005d48:	00fe00fe 	.word	0x00fe00fe
 8005d4c:	00fe00fe 	.word	0x00fe00fe
 8005d50:	00fe00fe 	.word	0x00fe00fe
 8005d54:	018e00fe 	.word	0x018e00fe
 8005d58:	021600fe 	.word	0x021600fe
 8005d5c:	018e01ef 	.word	0x018e01ef
 8005d60:	018e018e 	.word	0x018e018e
 8005d64:	01ef02e7 	.word	0x01ef02e7
 8005d68:	00fe01e8 	.word	0x00fe01e8
 8005d6c:	00fe02f4 	.word	0x00fe02f4
 8005d70:	02470287 	.word	0x02470287
 8005d74:	01e802d5 	.word	0x01e802d5
 8005d78:	022000fe 	.word	0x022000fe
 8005d7c:	0779007d 	.word	0x0779007d
 8005d80:	00fe00fe 	.word	0x00fe00fe
 8005d84:	00fe077d 	.word	0x00fe077d
 8005d88:	007d      	.short	0x007d
 8005d8a:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8005d94:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005d98:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005d9c:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8005da0:	2b09      	cmp	r3, #9
 8005da2:	d9f5      	bls.n	8005d90 <_vfprintf_r+0x1b8>
 8005da4:	9205      	str	r2, [sp, #20]
 8005da6:	e78e      	b.n	8005cc6 <_vfprintf_r+0xee>
 8005da8:	4648      	mov	r0, r9
 8005daa:	f003 f867 	bl	8008e7c <_localeconv_r>
 8005dae:	6843      	ldr	r3, [r0, #4]
 8005db0:	9317      	str	r3, [sp, #92]	; 0x5c
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fa ffa4 	bl	8000d00 <strlen>
 8005db8:	9018      	str	r0, [sp, #96]	; 0x60
 8005dba:	4606      	mov	r6, r0
 8005dbc:	4648      	mov	r0, r9
 8005dbe:	f003 f85d 	bl	8008e7c <_localeconv_r>
 8005dc2:	6883      	ldr	r3, [r0, #8]
 8005dc4:	9315      	str	r3, [sp, #84]	; 0x54
 8005dc6:	2120      	movs	r1, #32
 8005dc8:	2e00      	cmp	r6, #0
 8005dca:	f040 86ed 	bne.w	8006ba8 <_vfprintf_r+0xfd0>
 8005dce:	f89b 7000 	ldrb.w	r7, [fp]
 8005dd2:	e776      	b.n	8005cc2 <_vfprintf_r+0xea>
 8005dd4:	ee1a 1a10 	vmov	r1, s20
 8005dd8:	ee1a 0a90 	vmov	r0, s21
 8005ddc:	ee1a 5a10 	vmov	r5, s20
 8005de0:	f001 fd1a 	bl	8007818 <__swsetup_r>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	f041 8329 	bne.w	800743c <_vfprintf_r+0x1864>
 8005dea:	89aa      	ldrh	r2, [r5, #12]
 8005dec:	f002 031a 	and.w	r3, r2, #26
 8005df0:	2b0a      	cmp	r3, #10
 8005df2:	f47f af2e 	bne.w	8005c52 <_vfprintf_r+0x7a>
 8005df6:	ee1a 1a10 	vmov	r1, s20
 8005dfa:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	f6ff af27 	blt.w	8005c52 <_vfprintf_r+0x7a>
 8005e04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8005e06:	07d9      	lsls	r1, r3, #31
 8005e08:	d402      	bmi.n	8005e10 <_vfprintf_r+0x238>
 8005e0a:	0592      	lsls	r2, r2, #22
 8005e0c:	f141 815c 	bpl.w	80070c8 <_vfprintf_r+0x14f0>
 8005e10:	ee1a 1a10 	vmov	r1, s20
 8005e14:	ee1a 0a90 	vmov	r0, s21
 8005e18:	4623      	mov	r3, r4
 8005e1a:	464a      	mov	r2, r9
 8005e1c:	b04f      	add	sp, #316	; 0x13c
 8005e1e:	ecbd 8b0a 	vpop	{d8-d12}
 8005e22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e26:	f001 bca1 	b.w	800776c <__sbprintf>
 8005e2a:	ebbb 0605 	subs.w	r6, fp, r5
 8005e2e:	f000 80d8 	beq.w	8005fe2 <_vfprintf_r+0x40a>
 8005e32:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005e34:	4433      	add	r3, r6
 8005e36:	9324      	str	r3, [sp, #144]	; 0x90
 8005e38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	2b07      	cmp	r3, #7
 8005e3e:	e9c8 5600 	strd	r5, r6, [r8]
 8005e42:	9323      	str	r3, [sp, #140]	; 0x8c
 8005e44:	dc05      	bgt.n	8005e52 <_vfprintf_r+0x27a>
 8005e46:	f108 0808 	add.w	r8, r8, #8
 8005e4a:	9b06      	ldr	r3, [sp, #24]
 8005e4c:	4433      	add	r3, r6
 8005e4e:	9306      	str	r3, [sp, #24]
 8005e50:	e724      	b.n	8005c9c <_vfprintf_r+0xc4>
 8005e52:	ee1a 1a10 	vmov	r1, s20
 8005e56:	aa22      	add	r2, sp, #136	; 0x88
 8005e58:	4648      	mov	r0, r9
 8005e5a:	f003 fd09 	bl	8009870 <__sprint_r>
 8005e5e:	b990      	cbnz	r0, 8005e86 <_vfprintf_r+0x2ae>
 8005e60:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8005e64:	e7f1      	b.n	8005e4a <_vfprintf_r+0x272>
 8005e66:	ee1a 1a10 	vmov	r1, s20
 8005e6a:	aa22      	add	r2, sp, #136	; 0x88
 8005e6c:	4648      	mov	r0, r9
 8005e6e:	f003 fcff 	bl	8009870 <__sprint_r>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	f000 80a6 	beq.w	8005fc4 <_vfprintf_r+0x3ec>
 8005e78:	9b08      	ldr	r3, [sp, #32]
 8005e7a:	b123      	cbz	r3, 8005e86 <_vfprintf_r+0x2ae>
 8005e7c:	ee1a 0a90 	vmov	r0, s21
 8005e80:	4619      	mov	r1, r3
 8005e82:	f002 fef5 	bl	8008c70 <_free_r>
 8005e86:	ee1a 2a10 	vmov	r2, s20
 8005e8a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8005e8c:	07d8      	lsls	r0, r3, #31
 8005e8e:	f140 80fa 	bpl.w	8006086 <_vfprintf_r+0x4ae>
 8005e92:	8993      	ldrh	r3, [r2, #12]
 8005e94:	065a      	lsls	r2, r3, #25
 8005e96:	f101 82da 	bmi.w	800744e <_vfprintf_r+0x1876>
 8005e9a:	9806      	ldr	r0, [sp, #24]
 8005e9c:	b04f      	add	sp, #316	; 0x13c
 8005e9e:	ecbd 8b0a 	vpop	{d8-d12}
 8005ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 8005eaa:	059f      	lsls	r7, r3, #22
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	f53f aeb6 	bmi.w	8005c1e <_vfprintf_r+0x46>
 8005eb2:	ee1a 5a10 	vmov	r5, s20
 8005eb6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005eb8:	f7fb f9ba 	bl	8001230 <__retarget_lock_acquire_recursive>
 8005ebc:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	e6ac      	b.n	8005c1e <_vfprintf_r+0x46>
 8005ec4:	f3af 8000 	nop.w
	...
 8005ed0:	2f00      	cmp	r7, #0
 8005ed2:	f000 8086 	beq.w	8005fe2 <_vfprintf_r+0x40a>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f88d 70d4 	strb.w	r7, [sp, #212]	; 0xd4
 8005edc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8005ee6:	9203      	str	r2, [sp, #12]
 8005ee8:	9304      	str	r3, [sp, #16]
 8005eea:	930c      	str	r3, [sp, #48]	; 0x30
 8005eec:	930f      	str	r3, [sp, #60]	; 0x3c
 8005eee:	930d      	str	r3, [sp, #52]	; 0x34
 8005ef0:	ad35      	add	r5, sp, #212	; 0xd4
 8005ef2:	f01a 0202 	ands.w	r2, sl, #2
 8005ef6:	920a      	str	r2, [sp, #40]	; 0x28
 8005ef8:	d002      	beq.n	8005f00 <_vfprintf_r+0x328>
 8005efa:	9a03      	ldr	r2, [sp, #12]
 8005efc:	3202      	adds	r2, #2
 8005efe:	9203      	str	r2, [sp, #12]
 8005f00:	f01a 0284 	ands.w	r2, sl, #132	; 0x84
 8005f04:	920b      	str	r2, [sp, #44]	; 0x2c
 8005f06:	d105      	bne.n	8005f14 <_vfprintf_r+0x33c>
 8005f08:	9a05      	ldr	r2, [sp, #20]
 8005f0a:	9903      	ldr	r1, [sp, #12]
 8005f0c:	1a56      	subs	r6, r2, r1
 8005f0e:	2e00      	cmp	r6, #0
 8005f10:	f300 836a 	bgt.w	80065e8 <_vfprintf_r+0xa10>
 8005f14:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8005f16:	b18b      	cbz	r3, 8005f3c <_vfprintf_r+0x364>
 8005f18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f1a:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8005f1e:	3301      	adds	r3, #1
 8005f20:	3401      	adds	r4, #1
 8005f22:	f8c8 2000 	str.w	r2, [r8]
 8005f26:	2b07      	cmp	r3, #7
 8005f28:	f04f 0201 	mov.w	r2, #1
 8005f2c:	9424      	str	r4, [sp, #144]	; 0x90
 8005f2e:	9323      	str	r3, [sp, #140]	; 0x8c
 8005f30:	f8c8 2004 	str.w	r2, [r8, #4]
 8005f34:	f300 83a1 	bgt.w	800667a <_vfprintf_r+0xaa2>
 8005f38:	f108 0808 	add.w	r8, r8, #8
 8005f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f3e:	b183      	cbz	r3, 8005f62 <_vfprintf_r+0x38a>
 8005f40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f42:	aa1b      	add	r2, sp, #108	; 0x6c
 8005f44:	3301      	adds	r3, #1
 8005f46:	3402      	adds	r4, #2
 8005f48:	f8c8 2000 	str.w	r2, [r8]
 8005f4c:	2b07      	cmp	r3, #7
 8005f4e:	f04f 0202 	mov.w	r2, #2
 8005f52:	9424      	str	r4, [sp, #144]	; 0x90
 8005f54:	9323      	str	r3, [sp, #140]	; 0x8c
 8005f56:	f8c8 2004 	str.w	r2, [r8, #4]
 8005f5a:	f300 839b 	bgt.w	8006694 <_vfprintf_r+0xabc>
 8005f5e:	f108 0808 	add.w	r8, r8, #8
 8005f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	f000 826c 	beq.w	8006442 <_vfprintf_r+0x86a>
 8005f6a:	9b04      	ldr	r3, [sp, #16]
 8005f6c:	9a07      	ldr	r2, [sp, #28]
 8005f6e:	1a9e      	subs	r6, r3, r2
 8005f70:	2e00      	cmp	r6, #0
 8005f72:	f300 82ad 	bgt.w	80064d0 <_vfprintf_r+0x8f8>
 8005f76:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005f7a:	f040 8208 	bne.w	800638e <_vfprintf_r+0x7b6>
 8005f7e:	9b07      	ldr	r3, [sp, #28]
 8005f80:	f8c8 3004 	str.w	r3, [r8, #4]
 8005f84:	441c      	add	r4, r3
 8005f86:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005f88:	f8c8 5000 	str.w	r5, [r8]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	2b07      	cmp	r3, #7
 8005f90:	9424      	str	r4, [sp, #144]	; 0x90
 8005f92:	9323      	str	r3, [sp, #140]	; 0x8c
 8005f94:	f300 831b 	bgt.w	80065ce <_vfprintf_r+0x9f6>
 8005f98:	f108 0808 	add.w	r8, r8, #8
 8005f9c:	f01a 0f04 	tst.w	sl, #4
 8005fa0:	d005      	beq.n	8005fae <_vfprintf_r+0x3d6>
 8005fa2:	9b05      	ldr	r3, [sp, #20]
 8005fa4:	9a03      	ldr	r2, [sp, #12]
 8005fa6:	1a9d      	subs	r5, r3, r2
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	f300 8387 	bgt.w	80066bc <_vfprintf_r+0xae4>
 8005fae:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8005fb2:	9903      	ldr	r1, [sp, #12]
 8005fb4:	428a      	cmp	r2, r1
 8005fb6:	bfac      	ite	ge
 8005fb8:	189b      	addge	r3, r3, r2
 8005fba:	185b      	addlt	r3, r3, r1
 8005fbc:	9306      	str	r3, [sp, #24]
 8005fbe:	2c00      	cmp	r4, #0
 8005fc0:	f47f af51 	bne.w	8005e66 <_vfprintf_r+0x28e>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9323      	str	r3, [sp, #140]	; 0x8c
 8005fc8:	9b08      	ldr	r3, [sp, #32]
 8005fca:	b11b      	cbz	r3, 8005fd4 <_vfprintf_r+0x3fc>
 8005fcc:	9908      	ldr	r1, [sp, #32]
 8005fce:	4648      	mov	r0, r9
 8005fd0:	f002 fe4e 	bl	8008c70 <_free_r>
 8005fd4:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8005fd8:	465d      	mov	r5, fp
 8005fda:	782b      	ldrb	r3, [r5, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f47f ae50 	bne.w	8005c82 <_vfprintf_r+0xaa>
 8005fe2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	f041 821d 	bne.w	8007424 <_vfprintf_r+0x184c>
 8005fea:	2300      	movs	r3, #0
 8005fec:	9323      	str	r3, [sp, #140]	; 0x8c
 8005fee:	e74a      	b.n	8005e86 <_vfprintf_r+0x2ae>
 8005ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ff2:	3307      	adds	r3, #7
 8005ff4:	f023 0307 	bic.w	r3, r3, #7
 8005ff8:	ecb3 7b02 	vldmia	r3!, {d7}
 8005ffc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006000:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8006004:	9309      	str	r3, [sp, #36]	; 0x24
 8006006:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800600a:	ee0b 1a10 	vmov	s22, r1
 800600e:	ee0b 3a90 	vmov	s23, r3
 8006012:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006016:	eeb0 9a4b 	vmov.f32	s18, s22
 800601a:	eef0 9a6b 	vmov.f32	s19, s23
 800601e:	4bb8      	ldr	r3, [pc, #736]	; (8006300 <_vfprintf_r+0x728>)
 8006020:	ec51 0b19 	vmov	r0, r1, d9
 8006024:	f7fb f84e 	bl	80010c4 <__aeabi_dcmpun>
 8006028:	2800      	cmp	r0, #0
 800602a:	f040 84ec 	bne.w	8006a06 <_vfprintf_r+0xe2e>
 800602e:	4bb4      	ldr	r3, [pc, #720]	; (8006300 <_vfprintf_r+0x728>)
 8006030:	ec51 0b19 	vmov	r0, r1, d9
 8006034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006038:	f7fb f826 	bl	8001088 <__aeabi_dcmple>
 800603c:	2800      	cmp	r0, #0
 800603e:	f040 84e2 	bne.w	8006a06 <_vfprintf_r+0xe2e>
 8006042:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006046:	2200      	movs	r2, #0
 8006048:	2300      	movs	r3, #0
 800604a:	f7fb f813 	bl	8001074 <__aeabi_dcmplt>
 800604e:	2800      	cmp	r0, #0
 8006050:	f040 8769 	bne.w	8006f26 <_vfprintf_r+0x134e>
 8006054:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006058:	4daa      	ldr	r5, [pc, #680]	; (8006304 <_vfprintf_r+0x72c>)
 800605a:	4aab      	ldr	r2, [pc, #684]	; (8006308 <_vfprintf_r+0x730>)
 800605c:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8006060:	2103      	movs	r1, #3
 8006062:	2f47      	cmp	r7, #71	; 0x47
 8006064:	bfc8      	it	gt
 8006066:	4615      	movgt	r5, r2
 8006068:	2200      	movs	r2, #0
 800606a:	9208      	str	r2, [sp, #32]
 800606c:	9103      	str	r1, [sp, #12]
 800606e:	9107      	str	r1, [sp, #28]
 8006070:	9204      	str	r2, [sp, #16]
 8006072:	920c      	str	r2, [sp, #48]	; 0x30
 8006074:	920f      	str	r2, [sp, #60]	; 0x3c
 8006076:	920d      	str	r2, [sp, #52]	; 0x34
 8006078:	2b00      	cmp	r3, #0
 800607a:	f43f af3a 	beq.w	8005ef2 <_vfprintf_r+0x31a>
 800607e:	9a03      	ldr	r2, [sp, #12]
 8006080:	3201      	adds	r2, #1
 8006082:	9203      	str	r2, [sp, #12]
 8006084:	e735      	b.n	8005ef2 <_vfprintf_r+0x31a>
 8006086:	8993      	ldrh	r3, [r2, #12]
 8006088:	0599      	lsls	r1, r3, #22
 800608a:	f53f af03 	bmi.w	8005e94 <_vfprintf_r+0x2bc>
 800608e:	ee1a 4a10 	vmov	r4, s20
 8006092:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8006094:	f7fb f8ce 	bl	8001234 <__retarget_lock_release_recursive>
 8006098:	89a3      	ldrh	r3, [r4, #12]
 800609a:	e6fb      	b.n	8005e94 <_vfprintf_r+0x2bc>
 800609c:	4628      	mov	r0, r5
 800609e:	f7ff f9ab 	bl	80053f8 <__sinit>
 80060a2:	e5b3      	b.n	8005c0c <_vfprintf_r+0x34>
 80060a4:	f89b 7000 	ldrb.w	r7, [fp]
 80060a8:	f04a 0a20 	orr.w	sl, sl, #32
 80060ac:	e609      	b.n	8005cc2 <_vfprintf_r+0xea>
 80060ae:	f04a 0a10 	orr.w	sl, sl, #16
 80060b2:	f01a 0f20 	tst.w	sl, #32
 80060b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060b8:	f000 8444 	beq.w	8006944 <_vfprintf_r+0xd6c>
 80060bc:	3307      	adds	r3, #7
 80060be:	f023 0307 	bic.w	r3, r3, #7
 80060c2:	461a      	mov	r2, r3
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f852 4b08 	ldr.w	r4, [r2], #8
 80060ca:	9209      	str	r2, [sp, #36]	; 0x24
 80060cc:	461e      	mov	r6, r3
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f2c0 8447 	blt.w	8006962 <_vfprintf_r+0xd8a>
 80060d4:	9b04      	ldr	r3, [sp, #16]
 80060d6:	3301      	adds	r3, #1
 80060d8:	f000 82be 	beq.w	8006658 <_vfprintf_r+0xa80>
 80060dc:	f02a 0380 	bic.w	r3, sl, #128	; 0x80
 80060e0:	9303      	str	r3, [sp, #12]
 80060e2:	ea54 0306 	orrs.w	r3, r4, r6
 80060e6:	f040 82b9 	bne.w	800665c <_vfprintf_r+0xa84>
 80060ea:	9b04      	ldr	r3, [sp, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f040 82ba 	bne.w	8006666 <_vfprintf_r+0xa8e>
 80060f2:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80060f6:	2300      	movs	r3, #0
 80060f8:	9304      	str	r3, [sp, #16]
 80060fa:	9307      	str	r3, [sp, #28]
 80060fc:	ad4e      	add	r5, sp, #312	; 0x138
 80060fe:	e121      	b.n	8006344 <_vfprintf_r+0x76c>
 8006100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006102:	2300      	movs	r3, #0
 8006104:	f852 1b04 	ldr.w	r1, [r2], #4
 8006108:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800610c:	f88d 10d4 	strb.w	r1, [sp, #212]	; 0xd4
 8006110:	9209      	str	r2, [sp, #36]	; 0x24
 8006112:	e6e5      	b.n	8005ee0 <_vfprintf_r+0x308>
 8006114:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006116:	9a04      	ldr	r2, [sp, #16]
 8006118:	f854 5b04 	ldr.w	r5, [r4], #4
 800611c:	2600      	movs	r6, #0
 800611e:	f88d 606b 	strb.w	r6, [sp, #107]	; 0x6b
 8006122:	2d00      	cmp	r5, #0
 8006124:	f000 8592 	beq.w	8006c4c <_vfprintf_r+0x1074>
 8006128:	4613      	mov	r3, r2
 800612a:	3301      	adds	r3, #1
 800612c:	f000 8652 	beq.w	8006dd4 <_vfprintf_r+0x11fc>
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	f7fa fe54 	bl	8000de0 <memchr>
 8006138:	9008      	str	r0, [sp, #32]
 800613a:	2800      	cmp	r0, #0
 800613c:	f001 8131 	beq.w	80073a2 <_vfprintf_r+0x17ca>
 8006140:	9b08      	ldr	r3, [sp, #32]
 8006142:	9604      	str	r6, [sp, #16]
 8006144:	1b59      	subs	r1, r3, r5
 8006146:	9107      	str	r1, [sp, #28]
 8006148:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800614c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006150:	9409      	str	r4, [sp, #36]	; 0x24
 8006152:	9103      	str	r1, [sp, #12]
 8006154:	9608      	str	r6, [sp, #32]
 8006156:	960c      	str	r6, [sp, #48]	; 0x30
 8006158:	960f      	str	r6, [sp, #60]	; 0x3c
 800615a:	960d      	str	r6, [sp, #52]	; 0x34
 800615c:	e78c      	b.n	8006078 <_vfprintf_r+0x4a0>
 800615e:	f04a 0a10 	orr.w	sl, sl, #16
 8006162:	f01a 0620 	ands.w	r6, sl, #32
 8006166:	f000 83cd 	beq.w	8006904 <_vfprintf_r+0xd2c>
 800616a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616c:	3307      	adds	r3, #7
 800616e:	f023 0307 	bic.w	r3, r3, #7
 8006172:	685e      	ldr	r6, [r3, #4]
 8006174:	f853 4b08 	ldr.w	r4, [r3], #8
 8006178:	9309      	str	r3, [sp, #36]	; 0x24
 800617a:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 800617e:	9303      	str	r3, [sp, #12]
 8006180:	2300      	movs	r3, #0
 8006182:	2200      	movs	r2, #0
 8006184:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 8006188:	9a04      	ldr	r2, [sp, #16]
 800618a:	4611      	mov	r1, r2
 800618c:	3101      	adds	r1, #1
 800618e:	f000 80c1 	beq.w	8006314 <_vfprintf_r+0x73c>
 8006192:	9903      	ldr	r1, [sp, #12]
 8006194:	f021 0a80 	bic.w	sl, r1, #128	; 0x80
 8006198:	ea54 0106 	orrs.w	r1, r4, r6
 800619c:	f040 80b8 	bne.w	8006310 <_vfprintf_r+0x738>
 80061a0:	2a00      	cmp	r2, #0
 80061a2:	f040 8608 	bne.w	8006db6 <_vfprintf_r+0x11de>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1a5      	bne.n	80060f6 <_vfprintf_r+0x51e>
 80061aa:	9b03      	ldr	r3, [sp, #12]
 80061ac:	f013 0301 	ands.w	r3, r3, #1
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	f000 8417 	beq.w	80069e4 <_vfprintf_r+0xe0c>
 80061b6:	2330      	movs	r3, #48	; 0x30
 80061b8:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 80061bc:	f20d 1537 	addw	r5, sp, #311	; 0x137
 80061c0:	e0c0      	b.n	8006344 <_vfprintf_r+0x76c>
 80061c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061c8:	9205      	str	r2, [sp, #20]
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	f280 83d8 	bge.w	8006980 <_vfprintf_r+0xda8>
 80061d0:	9a05      	ldr	r2, [sp, #20]
 80061d2:	9309      	str	r3, [sp, #36]	; 0x24
 80061d4:	4252      	negs	r2, r2
 80061d6:	9205      	str	r2, [sp, #20]
 80061d8:	f89b 7000 	ldrb.w	r7, [fp]
 80061dc:	f04a 0a04 	orr.w	sl, sl, #4
 80061e0:	e56f      	b.n	8005cc2 <_vfprintf_r+0xea>
 80061e2:	f01a 0f20 	tst.w	sl, #32
 80061e6:	f040 84d4 	bne.w	8006b92 <_vfprintf_r+0xfba>
 80061ea:	f01a 0f10 	tst.w	sl, #16
 80061ee:	f040 85e8 	bne.w	8006dc2 <_vfprintf_r+0x11ea>
 80061f2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80061f6:	f040 86aa 	bne.w	8006f4e <_vfprintf_r+0x1376>
 80061fa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80061fe:	f000 85e0 	beq.w	8006dc2 <_vfprintf_r+0x11ea>
 8006202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006204:	9906      	ldr	r1, [sp, #24]
 8006206:	f853 2b04 	ldr.w	r2, [r3], #4
 800620a:	9309      	str	r3, [sp, #36]	; 0x24
 800620c:	7011      	strb	r1, [r2, #0]
 800620e:	465d      	mov	r5, fp
 8006210:	e6e3      	b.n	8005fda <_vfprintf_r+0x402>
 8006212:	f89b 7000 	ldrb.w	r7, [fp]
 8006216:	f88d 406b 	strb.w	r4, [sp, #107]	; 0x6b
 800621a:	e552      	b.n	8005cc2 <_vfprintf_r+0xea>
 800621c:	f89b 7000 	ldrb.w	r7, [fp]
 8006220:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8006224:	e54d      	b.n	8005cc2 <_vfprintf_r+0xea>
 8006226:	465a      	mov	r2, fp
 8006228:	f812 7b01 	ldrb.w	r7, [r2], #1
 800622c:	2f2a      	cmp	r7, #42	; 0x2a
 800622e:	f001 8270 	beq.w	8007712 <_vfprintf_r+0x1b3a>
 8006232:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006236:	2b09      	cmp	r3, #9
 8006238:	4693      	mov	fp, r2
 800623a:	bf98      	it	ls
 800623c:	2200      	movls	r2, #0
 800623e:	f201 80ed 	bhi.w	800741c <_vfprintf_r+0x1844>
 8006242:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8006246:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800624a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800624e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006252:	2b09      	cmp	r3, #9
 8006254:	d9f5      	bls.n	8006242 <_vfprintf_r+0x66a>
 8006256:	9204      	str	r2, [sp, #16]
 8006258:	e535      	b.n	8005cc6 <_vfprintf_r+0xee>
 800625a:	f04a 0310 	orr.w	r3, sl, #16
 800625e:	9303      	str	r3, [sp, #12]
 8006260:	9b03      	ldr	r3, [sp, #12]
 8006262:	f013 0620 	ands.w	r6, r3, #32
 8006266:	f000 835c 	beq.w	8006922 <_vfprintf_r+0xd4a>
 800626a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800626c:	3307      	adds	r3, #7
 800626e:	f023 0307 	bic.w	r3, r3, #7
 8006272:	685e      	ldr	r6, [r3, #4]
 8006274:	f853 4b08 	ldr.w	r4, [r3], #8
 8006278:	9309      	str	r3, [sp, #36]	; 0x24
 800627a:	2301      	movs	r3, #1
 800627c:	e781      	b.n	8006182 <_vfprintf_r+0x5aa>
 800627e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006280:	f853 4b04 	ldr.w	r4, [r3], #4
 8006284:	9309      	str	r3, [sp, #36]	; 0x24
 8006286:	2330      	movs	r3, #48	; 0x30
 8006288:	f04a 0202 	orr.w	r2, sl, #2
 800628c:	2778      	movs	r7, #120	; 0x78
 800628e:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006292:	4b1e      	ldr	r3, [pc, #120]	; (800630c <_vfprintf_r+0x734>)
 8006294:	9314      	str	r3, [sp, #80]	; 0x50
 8006296:	9203      	str	r2, [sp, #12]
 8006298:	f88d 706d 	strb.w	r7, [sp, #109]	; 0x6d
 800629c:	2600      	movs	r6, #0
 800629e:	2302      	movs	r3, #2
 80062a0:	e76f      	b.n	8006182 <_vfprintf_r+0x5aa>
 80062a2:	f89b 7000 	ldrb.w	r7, [fp]
 80062a6:	2f68      	cmp	r7, #104	; 0x68
 80062a8:	bf03      	ittte	eq
 80062aa:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 80062ae:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80062b2:	f10b 0b01 	addeq.w	fp, fp, #1
 80062b6:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80062ba:	e502      	b.n	8005cc2 <_vfprintf_r+0xea>
 80062bc:	f89b 7000 	ldrb.w	r7, [fp]
 80062c0:	2f6c      	cmp	r7, #108	; 0x6c
 80062c2:	bf03      	ittte	eq
 80062c4:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 80062c8:	f04a 0a20 	orreq.w	sl, sl, #32
 80062cc:	f10b 0b01 	addeq.w	fp, fp, #1
 80062d0:	f04a 0a10 	orrne.w	sl, sl, #16
 80062d4:	e4f5      	b.n	8005cc2 <_vfprintf_r+0xea>
 80062d6:	f89b 7000 	ldrb.w	r7, [fp]
 80062da:	f04a 0a08 	orr.w	sl, sl, #8
 80062de:	e4f0      	b.n	8005cc2 <_vfprintf_r+0xea>
 80062e0:	f89b 7000 	ldrb.w	r7, [fp]
 80062e4:	f04a 0a01 	orr.w	sl, sl, #1
 80062e8:	e4eb      	b.n	8005cc2 <_vfprintf_r+0xea>
 80062ea:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f47f ad6d 	bne.w	8005dce <_vfprintf_r+0x1f6>
 80062f4:	f89b 7000 	ldrb.w	r7, [fp]
 80062f8:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 80062fc:	e4e1      	b.n	8005cc2 <_vfprintf_r+0xea>
 80062fe:	bf00      	nop
 8006300:	7fefffff 	.word	0x7fefffff
 8006304:	0800b904 	.word	0x0800b904
 8006308:	0800b908 	.word	0x0800b908
 800630c:	0800b914 	.word	0x0800b914
 8006310:	f8cd a00c 	str.w	sl, [sp, #12]
 8006314:	2b01      	cmp	r3, #1
 8006316:	f000 81a1 	beq.w	800665c <_vfprintf_r+0xa84>
 800631a:	2b02      	cmp	r3, #2
 800631c:	ad4e      	add	r5, sp, #312	; 0x138
 800631e:	d120      	bne.n	8006362 <_vfprintf_r+0x78a>
 8006320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006322:	f004 030f 	and.w	r3, r4, #15
 8006326:	0924      	lsrs	r4, r4, #4
 8006328:	5cd3      	ldrb	r3, [r2, r3]
 800632a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800632e:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 8006332:	0936      	lsrs	r6, r6, #4
 8006334:	ea54 0306 	orrs.w	r3, r4, r6
 8006338:	d1f3      	bne.n	8006322 <_vfprintf_r+0x74a>
 800633a:	ab4e      	add	r3, sp, #312	; 0x138
 800633c:	1b5b      	subs	r3, r3, r5
 800633e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006342:	9307      	str	r3, [sp, #28]
 8006344:	9904      	ldr	r1, [sp, #16]
 8006346:	9807      	ldr	r0, [sp, #28]
 8006348:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800634c:	4281      	cmp	r1, r0
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	bfb8      	it	lt
 8006354:	4601      	movlt	r1, r0
 8006356:	9208      	str	r2, [sp, #32]
 8006358:	9103      	str	r1, [sp, #12]
 800635a:	920c      	str	r2, [sp, #48]	; 0x30
 800635c:	920f      	str	r2, [sp, #60]	; 0x3c
 800635e:	920d      	str	r2, [sp, #52]	; 0x34
 8006360:	e68a      	b.n	8006078 <_vfprintf_r+0x4a0>
 8006362:	f004 0307 	and.w	r3, r4, #7
 8006366:	08e4      	lsrs	r4, r4, #3
 8006368:	ea44 7446 	orr.w	r4, r4, r6, lsl #29
 800636c:	08f6      	lsrs	r6, r6, #3
 800636e:	3330      	adds	r3, #48	; 0x30
 8006370:	ea54 0106 	orrs.w	r1, r4, r6
 8006374:	462a      	mov	r2, r5
 8006376:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800637a:	d1f2      	bne.n	8006362 <_vfprintf_r+0x78a>
 800637c:	9903      	ldr	r1, [sp, #12]
 800637e:	07cc      	lsls	r4, r1, #31
 8006380:	f100 8277 	bmi.w	8006872 <_vfprintf_r+0xc9a>
 8006384:	ab4e      	add	r3, sp, #312	; 0x138
 8006386:	1b5b      	subs	r3, r3, r5
 8006388:	468a      	mov	sl, r1
 800638a:	9307      	str	r3, [sp, #28]
 800638c:	e7da      	b.n	8006344 <_vfprintf_r+0x76c>
 800638e:	2f65      	cmp	r7, #101	; 0x65
 8006390:	f340 80d7 	ble.w	8006542 <_vfprintf_r+0x96a>
 8006394:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006398:	2200      	movs	r2, #0
 800639a:	2300      	movs	r3, #0
 800639c:	f7fa fe60 	bl	8001060 <__aeabi_dcmpeq>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	f000 81c6 	beq.w	8006732 <_vfprintf_r+0xb5a>
 80063a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063a8:	4ac1      	ldr	r2, [pc, #772]	; (80066b0 <_vfprintf_r+0xad8>)
 80063aa:	f8c8 2000 	str.w	r2, [r8]
 80063ae:	3301      	adds	r3, #1
 80063b0:	3401      	adds	r4, #1
 80063b2:	2201      	movs	r2, #1
 80063b4:	2b07      	cmp	r3, #7
 80063b6:	9424      	str	r4, [sp, #144]	; 0x90
 80063b8:	9323      	str	r3, [sp, #140]	; 0x8c
 80063ba:	f8c8 2004 	str.w	r2, [r8, #4]
 80063be:	f300 84de 	bgt.w	8006d7e <_vfprintf_r+0x11a6>
 80063c2:	f108 0808 	add.w	r8, r8, #8
 80063c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80063c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063ca:	4293      	cmp	r3, r2
 80063cc:	f280 82d3 	bge.w	8006976 <_vfprintf_r+0xd9e>
 80063d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80063d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063d4:	441c      	add	r4, r3
 80063d6:	e9c8 2300 	strd	r2, r3, [r8]
 80063da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063dc:	9424      	str	r4, [sp, #144]	; 0x90
 80063de:	3301      	adds	r3, #1
 80063e0:	2b07      	cmp	r3, #7
 80063e2:	9323      	str	r3, [sp, #140]	; 0x8c
 80063e4:	f300 8424 	bgt.w	8006c30 <_vfprintf_r+0x1058>
 80063e8:	f108 0808 	add.w	r8, r8, #8
 80063ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ee:	1e5d      	subs	r5, r3, #1
 80063f0:	2d00      	cmp	r5, #0
 80063f2:	f77f add3 	ble.w	8005f9c <_vfprintf_r+0x3c4>
 80063f6:	2d10      	cmp	r5, #16
 80063f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80063fa:	f341 8169 	ble.w	80076d0 <_vfprintf_r+0x1af8>
 80063fe:	4fad      	ldr	r7, [pc, #692]	; (80066b4 <_vfprintf_r+0xadc>)
 8006400:	970a      	str	r7, [sp, #40]	; 0x28
 8006402:	4622      	mov	r2, r4
 8006404:	2610      	movs	r6, #16
 8006406:	ee1a 4a10 	vmov	r4, s20
 800640a:	e005      	b.n	8006418 <_vfprintf_r+0x840>
 800640c:	f108 0808 	add.w	r8, r8, #8
 8006410:	3d10      	subs	r5, #16
 8006412:	2d10      	cmp	r5, #16
 8006414:	f340 84c1 	ble.w	8006d9a <_vfprintf_r+0x11c2>
 8006418:	3301      	adds	r3, #1
 800641a:	3210      	adds	r2, #16
 800641c:	2b07      	cmp	r3, #7
 800641e:	e9c8 7600 	strd	r7, r6, [r8]
 8006422:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006426:	ddf1      	ble.n	800640c <_vfprintf_r+0x834>
 8006428:	aa22      	add	r2, sp, #136	; 0x88
 800642a:	4621      	mov	r1, r4
 800642c:	4648      	mov	r0, r9
 800642e:	f003 fa1f 	bl	8009870 <__sprint_r>
 8006432:	2800      	cmp	r0, #0
 8006434:	f47f ad20 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006438:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800643c:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006440:	e7e6      	b.n	8006410 <_vfprintf_r+0x838>
 8006442:	9b05      	ldr	r3, [sp, #20]
 8006444:	9a03      	ldr	r2, [sp, #12]
 8006446:	1a9e      	subs	r6, r3, r2
 8006448:	2e00      	cmp	r6, #0
 800644a:	f77f ad8e 	ble.w	8005f6a <_vfprintf_r+0x392>
 800644e:	2e10      	cmp	r6, #16
 8006450:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006452:	f341 803f 	ble.w	80074d4 <_vfprintf_r+0x18fc>
 8006456:	4997      	ldr	r1, [pc, #604]	; (80066b4 <_vfprintf_r+0xadc>)
 8006458:	950b      	str	r5, [sp, #44]	; 0x2c
 800645a:	4622      	mov	r2, r4
 800645c:	ee1a 5a10 	vmov	r5, s20
 8006460:	910a      	str	r1, [sp, #40]	; 0x28
 8006462:	460c      	mov	r4, r1
 8006464:	e004      	b.n	8006470 <_vfprintf_r+0x898>
 8006466:	3e10      	subs	r6, #16
 8006468:	2e10      	cmp	r6, #16
 800646a:	f108 0808 	add.w	r8, r8, #8
 800646e:	dd19      	ble.n	80064a4 <_vfprintf_r+0x8cc>
 8006470:	3301      	adds	r3, #1
 8006472:	3210      	adds	r2, #16
 8006474:	2110      	movs	r1, #16
 8006476:	2b07      	cmp	r3, #7
 8006478:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800647c:	f8c8 4000 	str.w	r4, [r8]
 8006480:	f8c8 1004 	str.w	r1, [r8, #4]
 8006484:	ddef      	ble.n	8006466 <_vfprintf_r+0x88e>
 8006486:	aa22      	add	r2, sp, #136	; 0x88
 8006488:	4629      	mov	r1, r5
 800648a:	4648      	mov	r0, r9
 800648c:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006490:	f003 f9ee 	bl	8009870 <__sprint_r>
 8006494:	2800      	cmp	r0, #0
 8006496:	f47f acef 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 800649a:	3e10      	subs	r6, #16
 800649c:	2e10      	cmp	r6, #16
 800649e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80064a2:	dce5      	bgt.n	8006470 <_vfprintf_r+0x898>
 80064a4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80064a6:	4614      	mov	r4, r2
 80064a8:	3301      	adds	r3, #1
 80064aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ac:	f8c8 2000 	str.w	r2, [r8]
 80064b0:	4434      	add	r4, r6
 80064b2:	2b07      	cmp	r3, #7
 80064b4:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80064b8:	f8c8 6004 	str.w	r6, [r8, #4]
 80064bc:	f300 83aa 	bgt.w	8006c14 <_vfprintf_r+0x103c>
 80064c0:	9b04      	ldr	r3, [sp, #16]
 80064c2:	9a07      	ldr	r2, [sp, #28]
 80064c4:	1a9e      	subs	r6, r3, r2
 80064c6:	2e00      	cmp	r6, #0
 80064c8:	f108 0808 	add.w	r8, r8, #8
 80064cc:	f77f ad53 	ble.w	8005f76 <_vfprintf_r+0x39e>
 80064d0:	2e10      	cmp	r6, #16
 80064d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80064d4:	f340 850f 	ble.w	8006ef6 <_vfprintf_r+0x131e>
 80064d8:	4876      	ldr	r0, [pc, #472]	; (80066b4 <_vfprintf_r+0xadc>)
 80064da:	900a      	str	r0, [sp, #40]	; 0x28
 80064dc:	4621      	mov	r1, r4
 80064de:	4642      	mov	r2, r8
 80064e0:	4604      	mov	r4, r0
 80064e2:	ee1a 8a10 	vmov	r8, s20
 80064e6:	e004      	b.n	80064f2 <_vfprintf_r+0x91a>
 80064e8:	3e10      	subs	r6, #16
 80064ea:	2e10      	cmp	r6, #16
 80064ec:	f102 0208 	add.w	r2, r2, #8
 80064f0:	dd16      	ble.n	8006520 <_vfprintf_r+0x948>
 80064f2:	3301      	adds	r3, #1
 80064f4:	3110      	adds	r1, #16
 80064f6:	2010      	movs	r0, #16
 80064f8:	2b07      	cmp	r3, #7
 80064fa:	e9cd 3123 	strd	r3, r1, [sp, #140]	; 0x8c
 80064fe:	6014      	str	r4, [r2, #0]
 8006500:	6050      	str	r0, [r2, #4]
 8006502:	ddf1      	ble.n	80064e8 <_vfprintf_r+0x910>
 8006504:	aa22      	add	r2, sp, #136	; 0x88
 8006506:	4641      	mov	r1, r8
 8006508:	4648      	mov	r0, r9
 800650a:	f003 f9b1 	bl	8009870 <__sprint_r>
 800650e:	2800      	cmp	r0, #0
 8006510:	f47f acb2 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006514:	3e10      	subs	r6, #16
 8006516:	2e10      	cmp	r6, #16
 8006518:	e9dd 3123 	ldrd	r3, r1, [sp, #140]	; 0x8c
 800651c:	aa25      	add	r2, sp, #148	; 0x94
 800651e:	dce8      	bgt.n	80064f2 <_vfprintf_r+0x91a>
 8006520:	460c      	mov	r4, r1
 8006522:	4690      	mov	r8, r2
 8006524:	3301      	adds	r3, #1
 8006526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006528:	f8c8 2000 	str.w	r2, [r8]
 800652c:	4434      	add	r4, r6
 800652e:	2b07      	cmp	r3, #7
 8006530:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8006534:	f8c8 6004 	str.w	r6, [r8, #4]
 8006538:	f300 81d6 	bgt.w	80068e8 <_vfprintf_r+0xd10>
 800653c:	f108 0808 	add.w	r8, r8, #8
 8006540:	e519      	b.n	8005f76 <_vfprintf_r+0x39e>
 8006542:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006544:	2b01      	cmp	r3, #1
 8006546:	f340 8175 	ble.w	8006834 <_vfprintf_r+0xc5c>
 800654a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800654c:	f8c8 5000 	str.w	r5, [r8]
 8006550:	3601      	adds	r6, #1
 8006552:	3401      	adds	r4, #1
 8006554:	2301      	movs	r3, #1
 8006556:	2e07      	cmp	r6, #7
 8006558:	9424      	str	r4, [sp, #144]	; 0x90
 800655a:	9623      	str	r6, [sp, #140]	; 0x8c
 800655c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006560:	f300 8396 	bgt.w	8006c90 <_vfprintf_r+0x10b8>
 8006564:	f108 0808 	add.w	r8, r8, #8
 8006568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800656a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800656c:	3601      	adds	r6, #1
 800656e:	441c      	add	r4, r3
 8006570:	2e07      	cmp	r6, #7
 8006572:	e9c8 2300 	strd	r2, r3, [r8]
 8006576:	e9cd 6423 	strd	r6, r4, [sp, #140]	; 0x8c
 800657a:	f300 8397 	bgt.w	8006cac <_vfprintf_r+0x10d4>
 800657e:	f108 0808 	add.w	r8, r8, #8
 8006582:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006586:	2200      	movs	r2, #0
 8006588:	2300      	movs	r3, #0
 800658a:	f7fa fd69 	bl	8001060 <__aeabi_dcmpeq>
 800658e:	2800      	cmp	r0, #0
 8006590:	f040 817d 	bne.w	800688e <_vfprintf_r+0xcb6>
 8006594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006596:	3601      	adds	r6, #1
 8006598:	3b01      	subs	r3, #1
 800659a:	3501      	adds	r5, #1
 800659c:	441c      	add	r4, r3
 800659e:	2e07      	cmp	r6, #7
 80065a0:	f8c8 5000 	str.w	r5, [r8]
 80065a4:	9623      	str	r6, [sp, #140]	; 0x8c
 80065a6:	f8c8 3004 	str.w	r3, [r8, #4]
 80065aa:	9424      	str	r4, [sp, #144]	; 0x90
 80065ac:	f300 8153 	bgt.w	8006856 <_vfprintf_r+0xc7e>
 80065b0:	f108 0808 	add.w	r8, r8, #8
 80065b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80065b6:	f8c8 3004 	str.w	r3, [r8, #4]
 80065ba:	3601      	adds	r6, #1
 80065bc:	441c      	add	r4, r3
 80065be:	2e07      	cmp	r6, #7
 80065c0:	ab1e      	add	r3, sp, #120	; 0x78
 80065c2:	e9cd 6423 	strd	r6, r4, [sp, #140]	; 0x8c
 80065c6:	f8c8 3000 	str.w	r3, [r8]
 80065ca:	f77f ace5 	ble.w	8005f98 <_vfprintf_r+0x3c0>
 80065ce:	ee1a 1a10 	vmov	r1, s20
 80065d2:	aa22      	add	r2, sp, #136	; 0x88
 80065d4:	4648      	mov	r0, r9
 80065d6:	f003 f94b 	bl	8009870 <__sprint_r>
 80065da:	2800      	cmp	r0, #0
 80065dc:	f47f ac4c 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80065e0:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80065e2:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 80065e6:	e4d9      	b.n	8005f9c <_vfprintf_r+0x3c4>
 80065e8:	2e10      	cmp	r6, #16
 80065ea:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80065ee:	dd22      	ble.n	8006636 <_vfprintf_r+0xa5e>
 80065f0:	9519      	str	r5, [sp, #100]	; 0x64
 80065f2:	2410      	movs	r4, #16
 80065f4:	ee1a 5a10 	vmov	r5, s20
 80065f8:	e004      	b.n	8006604 <_vfprintf_r+0xa2c>
 80065fa:	3e10      	subs	r6, #16
 80065fc:	2e10      	cmp	r6, #16
 80065fe:	f108 0808 	add.w	r8, r8, #8
 8006602:	dd17      	ble.n	8006634 <_vfprintf_r+0xa5c>
 8006604:	3301      	adds	r3, #1
 8006606:	492c      	ldr	r1, [pc, #176]	; (80066b8 <_vfprintf_r+0xae0>)
 8006608:	3210      	adds	r2, #16
 800660a:	2b07      	cmp	r3, #7
 800660c:	e9c8 1400 	strd	r1, r4, [r8]
 8006610:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006614:	ddf1      	ble.n	80065fa <_vfprintf_r+0xa22>
 8006616:	aa22      	add	r2, sp, #136	; 0x88
 8006618:	4629      	mov	r1, r5
 800661a:	4648      	mov	r0, r9
 800661c:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006620:	f003 f926 	bl	8009870 <__sprint_r>
 8006624:	2800      	cmp	r0, #0
 8006626:	f47f ac27 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 800662a:	3e10      	subs	r6, #16
 800662c:	2e10      	cmp	r6, #16
 800662e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8006632:	dce7      	bgt.n	8006604 <_vfprintf_r+0xa2c>
 8006634:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8006636:	f8c8 6004 	str.w	r6, [r8, #4]
 800663a:	3301      	adds	r3, #1
 800663c:	18b4      	adds	r4, r6, r2
 800663e:	2b07      	cmp	r3, #7
 8006640:	4a1d      	ldr	r2, [pc, #116]	; (80066b8 <_vfprintf_r+0xae0>)
 8006642:	f8c8 2000 	str.w	r2, [r8]
 8006646:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800664a:	f300 837d 	bgt.w	8006d48 <_vfprintf_r+0x1170>
 800664e:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006652:	f108 0808 	add.w	r8, r8, #8
 8006656:	e45e      	b.n	8005f16 <_vfprintf_r+0x33e>
 8006658:	f8cd a00c 	str.w	sl, [sp, #12]
 800665c:	2c0a      	cmp	r4, #10
 800665e:	f176 0300 	sbcs.w	r3, r6, #0
 8006662:	f080 8331 	bcs.w	8006cc8 <_vfprintf_r+0x10f0>
 8006666:	3430      	adds	r4, #48	; 0x30
 8006668:	2301      	movs	r3, #1
 800666a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800666e:	f88d 4137 	strb.w	r4, [sp, #311]	; 0x137
 8006672:	9307      	str	r3, [sp, #28]
 8006674:	f20d 1537 	addw	r5, sp, #311	; 0x137
 8006678:	e664      	b.n	8006344 <_vfprintf_r+0x76c>
 800667a:	ee1a 1a10 	vmov	r1, s20
 800667e:	aa22      	add	r2, sp, #136	; 0x88
 8006680:	4648      	mov	r0, r9
 8006682:	f003 f8f5 	bl	8009870 <__sprint_r>
 8006686:	2800      	cmp	r0, #0
 8006688:	f47f abf6 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 800668c:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800668e:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006692:	e453      	b.n	8005f3c <_vfprintf_r+0x364>
 8006694:	ee1a 1a10 	vmov	r1, s20
 8006698:	aa22      	add	r2, sp, #136	; 0x88
 800669a:	4648      	mov	r0, r9
 800669c:	f003 f8e8 	bl	8009870 <__sprint_r>
 80066a0:	2800      	cmp	r0, #0
 80066a2:	f47f abe9 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80066a6:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80066a8:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 80066ac:	e459      	b.n	8005f62 <_vfprintf_r+0x38a>
 80066ae:	bf00      	nop
 80066b0:	0800b944 	.word	0x0800b944
 80066b4:	0800b958 	.word	0x0800b958
 80066b8:	0800b948 	.word	0x0800b948
 80066bc:	2d10      	cmp	r5, #16
 80066be:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066c0:	dd20      	ble.n	8006704 <_vfprintf_r+0xb2c>
 80066c2:	ee1a 7a10 	vmov	r7, s20
 80066c6:	2610      	movs	r6, #16
 80066c8:	e004      	b.n	80066d4 <_vfprintf_r+0xafc>
 80066ca:	3d10      	subs	r5, #16
 80066cc:	2d10      	cmp	r5, #16
 80066ce:	f108 0808 	add.w	r8, r8, #8
 80066d2:	dd17      	ble.n	8006704 <_vfprintf_r+0xb2c>
 80066d4:	3301      	adds	r3, #1
 80066d6:	4aad      	ldr	r2, [pc, #692]	; (800698c <_vfprintf_r+0xdb4>)
 80066d8:	3410      	adds	r4, #16
 80066da:	2b07      	cmp	r3, #7
 80066dc:	e9c8 2600 	strd	r2, r6, [r8]
 80066e0:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80066e4:	ddf1      	ble.n	80066ca <_vfprintf_r+0xaf2>
 80066e6:	aa22      	add	r2, sp, #136	; 0x88
 80066e8:	4639      	mov	r1, r7
 80066ea:	4648      	mov	r0, r9
 80066ec:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 80066f0:	f003 f8be 	bl	8009870 <__sprint_r>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	f47f abbf 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80066fa:	3d10      	subs	r5, #16
 80066fc:	2d10      	cmp	r5, #16
 80066fe:	e9dd 3423 	ldrd	r3, r4, [sp, #140]	; 0x8c
 8006702:	dce7      	bgt.n	80066d4 <_vfprintf_r+0xafc>
 8006704:	3301      	adds	r3, #1
 8006706:	4aa1      	ldr	r2, [pc, #644]	; (800698c <_vfprintf_r+0xdb4>)
 8006708:	f8c8 5004 	str.w	r5, [r8, #4]
 800670c:	442c      	add	r4, r5
 800670e:	2b07      	cmp	r3, #7
 8006710:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8006714:	f8c8 2000 	str.w	r2, [r8]
 8006718:	f77f ac49 	ble.w	8005fae <_vfprintf_r+0x3d6>
 800671c:	ee1a 1a10 	vmov	r1, s20
 8006720:	aa22      	add	r2, sp, #136	; 0x88
 8006722:	4648      	mov	r0, r9
 8006724:	f003 f8a4 	bl	8009870 <__sprint_r>
 8006728:	2800      	cmp	r0, #0
 800672a:	f47f aba5 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 800672e:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8006730:	e43d      	b.n	8005fae <_vfprintf_r+0x3d6>
 8006732:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006734:	2a00      	cmp	r2, #0
 8006736:	f340 812d 	ble.w	8006994 <_vfprintf_r+0xdbc>
 800673a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800673e:	4293      	cmp	r3, r2
 8006740:	bfa8      	it	ge
 8006742:	4613      	movge	r3, r2
 8006744:	2b00      	cmp	r3, #0
 8006746:	461f      	mov	r7, r3
 8006748:	dd0b      	ble.n	8006762 <_vfprintf_r+0xb8a>
 800674a:	441c      	add	r4, r3
 800674c:	e9c8 5300 	strd	r5, r3, [r8]
 8006750:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006752:	9424      	str	r4, [sp, #144]	; 0x90
 8006754:	3301      	adds	r3, #1
 8006756:	2b07      	cmp	r3, #7
 8006758:	9323      	str	r3, [sp, #140]	; 0x8c
 800675a:	f300 85d4 	bgt.w	8007306 <_vfprintf_r+0x172e>
 800675e:	f108 0808 	add.w	r8, r8, #8
 8006762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006764:	2f00      	cmp	r7, #0
 8006766:	bfa8      	it	ge
 8006768:	1bdb      	subge	r3, r3, r7
 800676a:	2b00      	cmp	r3, #0
 800676c:	461e      	mov	r6, r3
 800676e:	f300 8342 	bgt.w	8006df6 <_vfprintf_r+0x121e>
 8006772:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006774:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8006778:	442b      	add	r3, r5
 800677a:	9307      	str	r3, [sp, #28]
 800677c:	f040 84e1 	bne.w	8007142 <_vfprintf_r+0x156a>
 8006780:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006782:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006784:	4293      	cmp	r3, r2
 8006786:	db03      	blt.n	8006790 <_vfprintf_r+0xbb8>
 8006788:	f01a 0f01 	tst.w	sl, #1
 800678c:	f000 83d0 	beq.w	8006f30 <_vfprintf_r+0x1358>
 8006790:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006792:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006794:	4414      	add	r4, r2
 8006796:	e9c8 1200 	strd	r1, r2, [r8]
 800679a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800679c:	9424      	str	r4, [sp, #144]	; 0x90
 800679e:	3201      	adds	r2, #1
 80067a0:	2a07      	cmp	r2, #7
 80067a2:	9223      	str	r2, [sp, #140]	; 0x8c
 80067a4:	f300 85bd 	bgt.w	8007322 <_vfprintf_r+0x174a>
 80067a8:	f108 0808 	add.w	r8, r8, #8
 80067ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067ae:	9907      	ldr	r1, [sp, #28]
 80067b0:	18ae      	adds	r6, r5, r2
 80067b2:	1a76      	subs	r6, r6, r1
 80067b4:	1ad5      	subs	r5, r2, r3
 80067b6:	42ae      	cmp	r6, r5
 80067b8:	bfa8      	it	ge
 80067ba:	462e      	movge	r6, r5
 80067bc:	2e00      	cmp	r6, #0
 80067be:	dd0d      	ble.n	80067dc <_vfprintf_r+0xc04>
 80067c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067c2:	f8c8 1000 	str.w	r1, [r8]
 80067c6:	3301      	adds	r3, #1
 80067c8:	4434      	add	r4, r6
 80067ca:	2b07      	cmp	r3, #7
 80067cc:	f8c8 6004 	str.w	r6, [r8, #4]
 80067d0:	9424      	str	r4, [sp, #144]	; 0x90
 80067d2:	9323      	str	r3, [sp, #140]	; 0x8c
 80067d4:	f300 8607 	bgt.w	80073e6 <_vfprintf_r+0x180e>
 80067d8:	f108 0808 	add.w	r8, r8, #8
 80067dc:	2e00      	cmp	r6, #0
 80067de:	bfa8      	it	ge
 80067e0:	1bad      	subge	r5, r5, r6
 80067e2:	2d00      	cmp	r5, #0
 80067e4:	f77f abda 	ble.w	8005f9c <_vfprintf_r+0x3c4>
 80067e8:	2d10      	cmp	r5, #16
 80067ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80067ec:	f340 8770 	ble.w	80076d0 <_vfprintf_r+0x1af8>
 80067f0:	4f67      	ldr	r7, [pc, #412]	; (8006990 <_vfprintf_r+0xdb8>)
 80067f2:	970a      	str	r7, [sp, #40]	; 0x28
 80067f4:	4622      	mov	r2, r4
 80067f6:	2610      	movs	r6, #16
 80067f8:	ee1a 4a10 	vmov	r4, s20
 80067fc:	e005      	b.n	800680a <_vfprintf_r+0xc32>
 80067fe:	f108 0808 	add.w	r8, r8, #8
 8006802:	3d10      	subs	r5, #16
 8006804:	2d10      	cmp	r5, #16
 8006806:	f340 82c8 	ble.w	8006d9a <_vfprintf_r+0x11c2>
 800680a:	3301      	adds	r3, #1
 800680c:	3210      	adds	r2, #16
 800680e:	2b07      	cmp	r3, #7
 8006810:	e9c8 7600 	strd	r7, r6, [r8]
 8006814:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8006818:	ddf1      	ble.n	80067fe <_vfprintf_r+0xc26>
 800681a:	aa22      	add	r2, sp, #136	; 0x88
 800681c:	4621      	mov	r1, r4
 800681e:	4648      	mov	r0, r9
 8006820:	f003 f826 	bl	8009870 <__sprint_r>
 8006824:	2800      	cmp	r0, #0
 8006826:	f47f ab27 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 800682a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800682e:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006832:	e7e6      	b.n	8006802 <_vfprintf_r+0xc2a>
 8006834:	f01a 0f01 	tst.w	sl, #1
 8006838:	f47f ae87 	bne.w	800654a <_vfprintf_r+0x972>
 800683c:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800683e:	f8c8 5000 	str.w	r5, [r8]
 8006842:	3601      	adds	r6, #1
 8006844:	3401      	adds	r4, #1
 8006846:	2301      	movs	r3, #1
 8006848:	2e07      	cmp	r6, #7
 800684a:	9424      	str	r4, [sp, #144]	; 0x90
 800684c:	9623      	str	r6, [sp, #140]	; 0x8c
 800684e:	f8c8 3004 	str.w	r3, [r8, #4]
 8006852:	f77f aead 	ble.w	80065b0 <_vfprintf_r+0x9d8>
 8006856:	ee1a 1a10 	vmov	r1, s20
 800685a:	aa22      	add	r2, sp, #136	; 0x88
 800685c:	4648      	mov	r0, r9
 800685e:	f003 f807 	bl	8009870 <__sprint_r>
 8006862:	2800      	cmp	r0, #0
 8006864:	f47f ab08 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006868:	e9dd 6423 	ldrd	r6, r4, [sp, #140]	; 0x8c
 800686c:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006870:	e6a0      	b.n	80065b4 <_vfprintf_r+0x9dc>
 8006872:	2b30      	cmp	r3, #48	; 0x30
 8006874:	f43f ad61 	beq.w	800633a <_vfprintf_r+0x762>
 8006878:	2330      	movs	r3, #48	; 0x30
 800687a:	3a02      	subs	r2, #2
 800687c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8006880:	ab4e      	add	r3, sp, #312	; 0x138
 8006882:	1a9b      	subs	r3, r3, r2
 8006884:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8006888:	9307      	str	r3, [sp, #28]
 800688a:	4615      	mov	r5, r2
 800688c:	e55a      	b.n	8006344 <_vfprintf_r+0x76c>
 800688e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006890:	1e5d      	subs	r5, r3, #1
 8006892:	2d00      	cmp	r5, #0
 8006894:	f77f ae8e 	ble.w	80065b4 <_vfprintf_r+0x9dc>
 8006898:	2d10      	cmp	r5, #16
 800689a:	f340 871f 	ble.w	80076dc <_vfprintf_r+0x1b04>
 800689e:	4a3c      	ldr	r2, [pc, #240]	; (8006990 <_vfprintf_r+0xdb8>)
 80068a0:	f8cd a010 	str.w	sl, [sp, #16]
 80068a4:	4623      	mov	r3, r4
 80068a6:	ee1a aa10 	vmov	sl, s20
 80068aa:	920a      	str	r2, [sp, #40]	; 0x28
 80068ac:	2710      	movs	r7, #16
 80068ae:	4614      	mov	r4, r2
 80068b0:	e005      	b.n	80068be <_vfprintf_r+0xce6>
 80068b2:	f108 0808 	add.w	r8, r8, #8
 80068b6:	3d10      	subs	r5, #16
 80068b8:	2d10      	cmp	r5, #16
 80068ba:	f340 82e1 	ble.w	8006e80 <_vfprintf_r+0x12a8>
 80068be:	3601      	adds	r6, #1
 80068c0:	3310      	adds	r3, #16
 80068c2:	2e07      	cmp	r6, #7
 80068c4:	e9c8 4700 	strd	r4, r7, [r8]
 80068c8:	e9cd 6323 	strd	r6, r3, [sp, #140]	; 0x8c
 80068cc:	ddf1      	ble.n	80068b2 <_vfprintf_r+0xcda>
 80068ce:	aa22      	add	r2, sp, #136	; 0x88
 80068d0:	4651      	mov	r1, sl
 80068d2:	4648      	mov	r0, r9
 80068d4:	f002 ffcc 	bl	8009870 <__sprint_r>
 80068d8:	2800      	cmp	r0, #0
 80068da:	f47f aacd 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80068de:	e9dd 6323 	ldrd	r6, r3, [sp, #140]	; 0x8c
 80068e2:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 80068e6:	e7e6      	b.n	80068b6 <_vfprintf_r+0xcde>
 80068e8:	ee1a 1a10 	vmov	r1, s20
 80068ec:	aa22      	add	r2, sp, #136	; 0x88
 80068ee:	4648      	mov	r0, r9
 80068f0:	f002 ffbe 	bl	8009870 <__sprint_r>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f47f aabf 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80068fa:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80068fc:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006900:	f7ff bb39 	b.w	8005f76 <_vfprintf_r+0x39e>
 8006904:	f01a 0310 	ands.w	r3, sl, #16
 8006908:	f040 813d 	bne.w	8006b86 <_vfprintf_r+0xfae>
 800690c:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8006910:	f000 82c6 	beq.w	8006ea0 <_vfprintf_r+0x12c8>
 8006914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006916:	f852 4b04 	ldr.w	r4, [r2], #4
 800691a:	9209      	str	r2, [sp, #36]	; 0x24
 800691c:	461e      	mov	r6, r3
 800691e:	b2a4      	uxth	r4, r4
 8006920:	e42b      	b.n	800617a <_vfprintf_r+0x5a2>
 8006922:	9b03      	ldr	r3, [sp, #12]
 8006924:	f013 0310 	ands.w	r3, r3, #16
 8006928:	d166      	bne.n	80069f8 <_vfprintf_r+0xe20>
 800692a:	9a03      	ldr	r2, [sp, #12]
 800692c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8006930:	f000 82c4 	beq.w	8006ebc <_vfprintf_r+0x12e4>
 8006934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006936:	f852 4b04 	ldr.w	r4, [r2], #4
 800693a:	9209      	str	r2, [sp, #36]	; 0x24
 800693c:	461e      	mov	r6, r3
 800693e:	b2a4      	uxth	r4, r4
 8006940:	2301      	movs	r3, #1
 8006942:	e41e      	b.n	8006182 <_vfprintf_r+0x5aa>
 8006944:	f853 4b04 	ldr.w	r4, [r3], #4
 8006948:	9309      	str	r3, [sp, #36]	; 0x24
 800694a:	f01a 0f10 	tst.w	sl, #16
 800694e:	d14f      	bne.n	80069f0 <_vfprintf_r+0xe18>
 8006950:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006954:	d048      	beq.n	80069e8 <_vfprintf_r+0xe10>
 8006956:	f344 36c0 	sbfx	r6, r4, #15, #1
 800695a:	4633      	mov	r3, r6
 800695c:	b224      	sxth	r4, r4
 800695e:	f7ff bbb6 	b.w	80060ce <_vfprintf_r+0x4f6>
 8006962:	232d      	movs	r3, #45	; 0x2d
 8006964:	4264      	negs	r4, r4
 8006966:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800696a:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 800696e:	f8cd a00c 	str.w	sl, [sp, #12]
 8006972:	2301      	movs	r3, #1
 8006974:	e408      	b.n	8006188 <_vfprintf_r+0x5b0>
 8006976:	f01a 0f01 	tst.w	sl, #1
 800697a:	f43f ab0f 	beq.w	8005f9c <_vfprintf_r+0x3c4>
 800697e:	e527      	b.n	80063d0 <_vfprintf_r+0x7f8>
 8006980:	f89b 7000 	ldrb.w	r7, [fp]
 8006984:	9309      	str	r3, [sp, #36]	; 0x24
 8006986:	f7ff b99c 	b.w	8005cc2 <_vfprintf_r+0xea>
 800698a:	bf00      	nop
 800698c:	0800b948 	.word	0x0800b948
 8006990:	0800b958 	.word	0x0800b958
 8006994:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006996:	49b5      	ldr	r1, [pc, #724]	; (8006c6c <_vfprintf_r+0x1094>)
 8006998:	f8c8 1000 	str.w	r1, [r8]
 800699c:	3301      	adds	r3, #1
 800699e:	3401      	adds	r4, #1
 80069a0:	2101      	movs	r1, #1
 80069a2:	2b07      	cmp	r3, #7
 80069a4:	9424      	str	r4, [sp, #144]	; 0x90
 80069a6:	9323      	str	r3, [sp, #140]	; 0x8c
 80069a8:	f8c8 1004 	str.w	r1, [r8, #4]
 80069ac:	f300 8482 	bgt.w	80072b4 <_vfprintf_r+0x16dc>
 80069b0:	f108 0808 	add.w	r8, r8, #8
 80069b4:	2a00      	cmp	r2, #0
 80069b6:	f040 8244 	bne.w	8006e42 <_vfprintf_r+0x126a>
 80069ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80069bc:	f00a 0301 	and.w	r3, sl, #1
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f43f aaeb 	beq.w	8005f9c <_vfprintf_r+0x3c4>
 80069c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80069ca:	441c      	add	r4, r3
 80069cc:	e9c8 2300 	strd	r2, r3, [r8]
 80069d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80069d2:	9424      	str	r4, [sp, #144]	; 0x90
 80069d4:	3301      	adds	r3, #1
 80069d6:	2b07      	cmp	r3, #7
 80069d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80069da:	f300 8366 	bgt.w	80070aa <_vfprintf_r+0x14d2>
 80069de:	f108 0808 	add.w	r8, r8, #8
 80069e2:	e23f      	b.n	8006e64 <_vfprintf_r+0x128c>
 80069e4:	ad4e      	add	r5, sp, #312	; 0x138
 80069e6:	e4ad      	b.n	8006344 <_vfprintf_r+0x76c>
 80069e8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80069ec:	f040 82a9 	bne.w	8006f42 <_vfprintf_r+0x136a>
 80069f0:	17e6      	asrs	r6, r4, #31
 80069f2:	4633      	mov	r3, r6
 80069f4:	f7ff bb6b 	b.w	80060ce <_vfprintf_r+0x4f6>
 80069f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069fa:	f853 4b04 	ldr.w	r4, [r3], #4
 80069fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006a00:	2301      	movs	r3, #1
 8006a02:	f7ff bbbe 	b.w	8006182 <_vfprintf_r+0x5aa>
 8006a06:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	f7fa fb59 	bl	80010c4 <__aeabi_dcmpun>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	f040 862c 	bne.w	8007670 <_vfprintf_r+0x1a98>
 8006a18:	2f61      	cmp	r7, #97	; 0x61
 8006a1a:	f000 857d 	beq.w	8007518 <_vfprintf_r+0x1940>
 8006a1e:	2f41      	cmp	r7, #65	; 0x41
 8006a20:	f000 829e 	beq.w	8006f60 <_vfprintf_r+0x1388>
 8006a24:	9b04      	ldr	r3, [sp, #16]
 8006a26:	3301      	adds	r3, #1
 8006a28:	f027 0320 	bic.w	r3, r7, #32
 8006a2c:	9303      	str	r3, [sp, #12]
 8006a2e:	f000 85be 	beq.w	80075ae <_vfprintf_r+0x19d6>
 8006a32:	2b47      	cmp	r3, #71	; 0x47
 8006a34:	f000 85a9 	beq.w	800758a <_vfprintf_r+0x19b2>
 8006a38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a3c:	f44a 7280 	orr.w	r2, sl, #256	; 0x100
 8006a40:	2900      	cmp	r1, #0
 8006a42:	9207      	str	r2, [sp, #28]
 8006a44:	f04f 0300 	mov.w	r3, #0
 8006a48:	f2c0 8443 	blt.w	80072d2 <_vfprintf_r+0x16fa>
 8006a4c:	ec41 0b18 	vmov	d8, r0, r1
 8006a50:	930a      	str	r3, [sp, #40]	; 0x28
 8006a52:	9308      	str	r3, [sp, #32]
 8006a54:	9b03      	ldr	r3, [sp, #12]
 8006a56:	2b46      	cmp	r3, #70	; 0x46
 8006a58:	f000 8472 	beq.w	8007340 <_vfprintf_r+0x1768>
 8006a5c:	2b45      	cmp	r3, #69	; 0x45
 8006a5e:	f000 8523 	beq.w	80074a8 <_vfprintf_r+0x18d0>
 8006a62:	eeb0 0a48 	vmov.f32	s0, s16
 8006a66:	eef0 0a68 	vmov.f32	s1, s17
 8006a6a:	ab20      	add	r3, sp, #128	; 0x80
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	9a04      	ldr	r2, [sp, #16]
 8006a74:	ab1c      	add	r3, sp, #112	; 0x70
 8006a76:	2102      	movs	r1, #2
 8006a78:	4648      	mov	r0, r9
 8006a7a:	f000 ffdd 	bl	8007a38 <_dtoa_r>
 8006a7e:	9b03      	ldr	r3, [sp, #12]
 8006a80:	2b47      	cmp	r3, #71	; 0x47
 8006a82:	4605      	mov	r5, r0
 8006a84:	f040 865c 	bne.w	8007740 <_vfprintf_r+0x1b68>
 8006a88:	f01a 0f01 	tst.w	sl, #1
 8006a8c:	4656      	mov	r6, sl
 8006a8e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006a92:	f040 84e1 	bne.w	8007458 <_vfprintf_r+0x1880>
 8006a96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006a98:	1b5b      	subs	r3, r3, r5
 8006a9a:	930e      	str	r3, [sp, #56]	; 0x38
 8006a9c:	9b03      	ldr	r3, [sp, #12]
 8006a9e:	2b47      	cmp	r3, #71	; 0x47
 8006aa0:	f000 8319 	beq.w	80070d6 <_vfprintf_r+0x14fe>
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	2b46      	cmp	r3, #70	; 0x46
 8006aa8:	f000 8487 	beq.w	80073ba <_vfprintf_r+0x17e2>
 8006aac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006aae:	930d      	str	r3, [sp, #52]	; 0x34
 8006ab0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab2:	9a03      	ldr	r2, [sp, #12]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	2a41      	cmp	r2, #65	; 0x41
 8006ab8:	931c      	str	r3, [sp, #112]	; 0x70
 8006aba:	f000 85e7 	beq.w	800768c <_vfprintf_r+0x1ab4>
 8006abe:	b2fa      	uxtb	r2, r7
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	bfb8      	it	lt
 8006ac6:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006ac8:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8006acc:	bfba      	itte	lt
 8006ace:	f1c3 0301 	rsblt	r3, r3, #1
 8006ad2:	222d      	movlt	r2, #45	; 0x2d
 8006ad4:	222b      	movge	r2, #43	; 0x2b
 8006ad6:	2b09      	cmp	r3, #9
 8006ad8:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8006adc:	f340 856b 	ble.w	80075b6 <_vfprintf_r+0x19de>
 8006ae0:	f10d 0487 	add.w	r4, sp, #135	; 0x87
 8006ae4:	f8df c194 	ldr.w	ip, [pc, #404]	; 8006c7c <_vfprintf_r+0x10a4>
 8006ae8:	4622      	mov	r2, r4
 8006aea:	4610      	mov	r0, r2
 8006aec:	fb8c 2103 	smull	r2, r1, ip, r3
 8006af0:	17da      	asrs	r2, r3, #31
 8006af2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8006af6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8006afa:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
 8006afe:	3130      	adds	r1, #48	; 0x30
 8006b00:	f800 1c01 	strb.w	r1, [r0, #-1]
 8006b04:	4619      	mov	r1, r3
 8006b06:	2963      	cmp	r1, #99	; 0x63
 8006b08:	4613      	mov	r3, r2
 8006b0a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8006b0e:	dcec      	bgt.n	8006aea <_vfprintf_r+0xf12>
 8006b10:	3330      	adds	r3, #48	; 0x30
 8006b12:	b2d9      	uxtb	r1, r3
 8006b14:	1e83      	subs	r3, r0, #2
 8006b16:	429c      	cmp	r4, r3
 8006b18:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006b1c:	f240 860c 	bls.w	8007738 <_vfprintf_r+0x1b60>
 8006b20:	4613      	mov	r3, r2
 8006b22:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006b26:	e001      	b.n	8006b2c <_vfprintf_r+0xf54>
 8006b28:	f813 1b01 	ldrb.w	r1, [r3], #1
 8006b2c:	f802 1b01 	strb.w	r1, [r2], #1
 8006b30:	429c      	cmp	r4, r3
 8006b32:	d1f9      	bne.n	8006b28 <_vfprintf_r+0xf50>
 8006b34:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 8006b38:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8006b3c:	1a1b      	subs	r3, r3, r0
 8006b3e:	4413      	add	r3, r2
 8006b40:	aa1e      	add	r2, sp, #120	; 0x78
 8006b42:	1a9b      	subs	r3, r3, r2
 8006b44:	9316      	str	r3, [sp, #88]	; 0x58
 8006b46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b48:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	441a      	add	r2, r3
 8006b4e:	9207      	str	r2, [sp, #28]
 8006b50:	f340 85b0 	ble.w	80076b4 <_vfprintf_r+0x1adc>
 8006b54:	9b07      	ldr	r3, [sp, #28]
 8006b56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b58:	4413      	add	r3, r2
 8006b5a:	9307      	str	r3, [sp, #28]
 8006b5c:	9a07      	ldr	r2, [sp, #28]
 8006b5e:	2300      	movs	r3, #0
 8006b60:	f426 6680 	bic.w	r6, r6, #1024	; 0x400
 8006b64:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006b68:	f446 7a80 	orr.w	sl, r6, #256	; 0x100
 8006b6c:	930c      	str	r3, [sp, #48]	; 0x30
 8006b6e:	9203      	str	r2, [sp, #12]
 8006b70:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b72:	930d      	str	r3, [sp, #52]	; 0x34
 8006b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f040 82dc 	bne.w	8007134 <_vfprintf_r+0x155c>
 8006b7c:	9304      	str	r3, [sp, #16]
 8006b7e:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006b82:	f7ff ba79 	b.w	8006078 <_vfprintf_r+0x4a0>
 8006b86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b88:	f853 4b04 	ldr.w	r4, [r3], #4
 8006b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8e:	f7ff baf4 	b.w	800617a <_vfprintf_r+0x5a2>
 8006b92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b94:	9806      	ldr	r0, [sp, #24]
 8006b96:	f853 1b04 	ldr.w	r1, [r3], #4
 8006b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b9c:	17c2      	asrs	r2, r0, #31
 8006b9e:	e9c1 0200 	strd	r0, r2, [r1]
 8006ba2:	465d      	mov	r5, fp
 8006ba4:	f7ff ba19 	b.w	8005fda <_vfprintf_r+0x402>
 8006ba8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f43f a90f 	beq.w	8005dce <_vfprintf_r+0x1f6>
 8006bb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f43f a90a 	beq.w	8005dce <_vfprintf_r+0x1f6>
 8006bba:	f89b 7000 	ldrb.w	r7, [fp]
 8006bbe:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8006bc2:	f7ff b87e 	b.w	8005cc2 <_vfprintf_r+0xea>
 8006bc6:	f8cd a00c 	str.w	sl, [sp, #12]
 8006bca:	f7ff bb49 	b.w	8006260 <_vfprintf_r+0x688>
 8006bce:	4b28      	ldr	r3, [pc, #160]	; (8006c70 <_vfprintf_r+0x1098>)
 8006bd0:	9314      	str	r3, [sp, #80]	; 0x50
 8006bd2:	f01a 0620 	ands.w	r6, sl, #32
 8006bd6:	d053      	beq.n	8006c80 <_vfprintf_r+0x10a8>
 8006bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bda:	3307      	adds	r3, #7
 8006bdc:	f023 0307 	bic.w	r3, r3, #7
 8006be0:	685e      	ldr	r6, [r3, #4]
 8006be2:	f853 4b08 	ldr.w	r4, [r3], #8
 8006be6:	9309      	str	r3, [sp, #36]	; 0x24
 8006be8:	f01a 0f01 	tst.w	sl, #1
 8006bec:	d009      	beq.n	8006c02 <_vfprintf_r+0x102a>
 8006bee:	ea54 0306 	orrs.w	r3, r4, r6
 8006bf2:	d006      	beq.n	8006c02 <_vfprintf_r+0x102a>
 8006bf4:	2330      	movs	r3, #48	; 0x30
 8006bf6:	f88d 706d 	strb.w	r7, [sp, #109]	; 0x6d
 8006bfa:	f04a 0a02 	orr.w	sl, sl, #2
 8006bfe:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006c02:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8006c06:	9303      	str	r3, [sp, #12]
 8006c08:	2302      	movs	r3, #2
 8006c0a:	f7ff baba 	b.w	8006182 <_vfprintf_r+0x5aa>
 8006c0e:	4b19      	ldr	r3, [pc, #100]	; (8006c74 <_vfprintf_r+0x109c>)
 8006c10:	9314      	str	r3, [sp, #80]	; 0x50
 8006c12:	e7de      	b.n	8006bd2 <_vfprintf_r+0xffa>
 8006c14:	ee1a 1a10 	vmov	r1, s20
 8006c18:	aa22      	add	r2, sp, #136	; 0x88
 8006c1a:	4648      	mov	r0, r9
 8006c1c:	f002 fe28 	bl	8009870 <__sprint_r>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	f47f a929 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006c26:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8006c28:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006c2c:	f7ff b99d 	b.w	8005f6a <_vfprintf_r+0x392>
 8006c30:	ee1a 1a10 	vmov	r1, s20
 8006c34:	aa22      	add	r2, sp, #136	; 0x88
 8006c36:	4648      	mov	r0, r9
 8006c38:	f002 fe1a 	bl	8009870 <__sprint_r>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	f47f a91b 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006c42:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8006c44:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006c48:	f7ff bbd0 	b.w	80063ec <_vfprintf_r+0x814>
 8006c4c:	2a06      	cmp	r2, #6
 8006c4e:	4629      	mov	r1, r5
 8006c50:	bf28      	it	cs
 8006c52:	2206      	movcs	r2, #6
 8006c54:	9504      	str	r5, [sp, #16]
 8006c56:	9508      	str	r5, [sp, #32]
 8006c58:	462b      	mov	r3, r5
 8006c5a:	9203      	str	r2, [sp, #12]
 8006c5c:	4d06      	ldr	r5, [pc, #24]	; (8006c78 <_vfprintf_r+0x10a0>)
 8006c5e:	9409      	str	r4, [sp, #36]	; 0x24
 8006c60:	9207      	str	r2, [sp, #28]
 8006c62:	910c      	str	r1, [sp, #48]	; 0x30
 8006c64:	910f      	str	r1, [sp, #60]	; 0x3c
 8006c66:	910d      	str	r1, [sp, #52]	; 0x34
 8006c68:	f7ff ba06 	b.w	8006078 <_vfprintf_r+0x4a0>
 8006c6c:	0800b944 	.word	0x0800b944
 8006c70:	0800b914 	.word	0x0800b914
 8006c74:	0800b928 	.word	0x0800b928
 8006c78:	0800b93c 	.word	0x0800b93c
 8006c7c:	66666667 	.word	0x66666667
 8006c80:	f01a 0310 	ands.w	r3, sl, #16
 8006c84:	d070      	beq.n	8006d68 <_vfprintf_r+0x1190>
 8006c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c88:	f853 4b04 	ldr.w	r4, [r3], #4
 8006c8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8e:	e7ab      	b.n	8006be8 <_vfprintf_r+0x1010>
 8006c90:	ee1a 1a10 	vmov	r1, s20
 8006c94:	aa22      	add	r2, sp, #136	; 0x88
 8006c96:	4648      	mov	r0, r9
 8006c98:	f002 fdea 	bl	8009870 <__sprint_r>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	f47f a8eb 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006ca2:	e9dd 6423 	ldrd	r6, r4, [sp, #140]	; 0x8c
 8006ca6:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006caa:	e45d      	b.n	8006568 <_vfprintf_r+0x990>
 8006cac:	ee1a 1a10 	vmov	r1, s20
 8006cb0:	aa22      	add	r2, sp, #136	; 0x88
 8006cb2:	4648      	mov	r0, r9
 8006cb4:	f002 fddc 	bl	8009870 <__sprint_r>
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	f47f a8dd 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006cbe:	e9dd 6423 	ldrd	r6, r4, [sp, #140]	; 0x8c
 8006cc2:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006cc6:	e45c      	b.n	8006582 <_vfprintf_r+0x9aa>
 8006cc8:	9b03      	ldr	r3, [sp, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cd0:	e9cd 7807 	strd	r7, r8, [sp, #28]
 8006cd4:	ee09 9a10 	vmov	s18, r9
 8006cd8:	f50d 7a9c 	add.w	sl, sp, #312	; 0x138
 8006cdc:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 8006ce0:	4617      	mov	r7, r2
 8006ce2:	4698      	mov	r8, r3
 8006ce4:	e00c      	b.n	8006d00 <_vfprintf_r+0x1128>
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	4620      	mov	r0, r4
 8006cea:	4631      	mov	r1, r6
 8006cec:	220a      	movs	r2, #10
 8006cee:	f7f9 fe7d 	bl	80009ec <__aeabi_uldivmod>
 8006cf2:	2c0a      	cmp	r4, #10
 8006cf4:	f176 0300 	sbcs.w	r3, r6, #0
 8006cf8:	d31c      	bcc.n	8006d34 <_vfprintf_r+0x115c>
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	460e      	mov	r6, r1
 8006cfe:	46aa      	mov	sl, r5
 8006d00:	4620      	mov	r0, r4
 8006d02:	220a      	movs	r2, #10
 8006d04:	2300      	movs	r3, #0
 8006d06:	4631      	mov	r1, r6
 8006d08:	f7f9 fe70 	bl	80009ec <__aeabi_uldivmod>
 8006d0c:	3230      	adds	r2, #48	; 0x30
 8006d0e:	f10a 35ff 	add.w	r5, sl, #4294967295	; 0xffffffff
 8006d12:	3701      	adds	r7, #1
 8006d14:	f80a 2c01 	strb.w	r2, [sl, #-1]
 8006d18:	f1b8 0f00 	cmp.w	r8, #0
 8006d1c:	d0e3      	beq.n	8006ce6 <_vfprintf_r+0x110e>
 8006d1e:	f899 3000 	ldrb.w	r3, [r9]
 8006d22:	429f      	cmp	r7, r3
 8006d24:	d1df      	bne.n	8006ce6 <_vfprintf_r+0x110e>
 8006d26:	2fff      	cmp	r7, #255	; 0xff
 8006d28:	d0dd      	beq.n	8006ce6 <_vfprintf_r+0x110e>
 8006d2a:	2c0a      	cmp	r4, #10
 8006d2c:	f176 0300 	sbcs.w	r3, r6, #0
 8006d30:	f080 80e5 	bcs.w	8006efe <_vfprintf_r+0x1326>
 8006d34:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8006d38:	970e      	str	r7, [sp, #56]	; 0x38
 8006d3a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d3e:	9f07      	ldr	r7, [sp, #28]
 8006d40:	ee19 9a10 	vmov	r9, s18
 8006d44:	f7ff baf9 	b.w	800633a <_vfprintf_r+0x762>
 8006d48:	ee1a 1a10 	vmov	r1, s20
 8006d4c:	aa22      	add	r2, sp, #136	; 0x88
 8006d4e:	4648      	mov	r0, r9
 8006d50:	f002 fd8e 	bl	8009870 <__sprint_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	f47f a88f 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006d5a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006d5e:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8006d60:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006d64:	f7ff b8d7 	b.w	8005f16 <_vfprintf_r+0x33e>
 8006d68:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8006d6c:	f000 80b6 	beq.w	8006edc <_vfprintf_r+0x1304>
 8006d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d72:	f852 4b04 	ldr.w	r4, [r2], #4
 8006d76:	9209      	str	r2, [sp, #36]	; 0x24
 8006d78:	461e      	mov	r6, r3
 8006d7a:	b2a4      	uxth	r4, r4
 8006d7c:	e734      	b.n	8006be8 <_vfprintf_r+0x1010>
 8006d7e:	ee1a 1a10 	vmov	r1, s20
 8006d82:	aa22      	add	r2, sp, #136	; 0x88
 8006d84:	4648      	mov	r0, r9
 8006d86:	f002 fd73 	bl	8009870 <__sprint_r>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	f47f a874 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006d90:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8006d92:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8006d96:	f7ff bb16 	b.w	80063c6 <_vfprintf_r+0x7ee>
 8006d9a:	4614      	mov	r4, r2
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da0:	f8c8 2000 	str.w	r2, [r8]
 8006da4:	442c      	add	r4, r5
 8006da6:	2b07      	cmp	r3, #7
 8006da8:	f8c8 5004 	str.w	r5, [r8, #4]
 8006dac:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8006db0:	f77f a8f2 	ble.w	8005f98 <_vfprintf_r+0x3c0>
 8006db4:	e40b      	b.n	80065ce <_vfprintf_r+0x9f6>
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	f8cd a00c 	str.w	sl, [sp, #12]
 8006dbc:	f47f aaad 	bne.w	800631a <_vfprintf_r+0x742>
 8006dc0:	e451      	b.n	8006666 <_vfprintf_r+0xa8e>
 8006dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dc4:	9906      	ldr	r1, [sp, #24]
 8006dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dca:	465d      	mov	r5, fp
 8006dcc:	6011      	str	r1, [r2, #0]
 8006dce:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd0:	f7ff b903 	b.w	8005fda <_vfprintf_r+0x402>
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	9604      	str	r6, [sp, #16]
 8006dd8:	9409      	str	r4, [sp, #36]	; 0x24
 8006dda:	f7f9 ff91 	bl	8000d00 <strlen>
 8006dde:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
 8006de2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8006de6:	9007      	str	r0, [sp, #28]
 8006de8:	9103      	str	r1, [sp, #12]
 8006dea:	9608      	str	r6, [sp, #32]
 8006dec:	960c      	str	r6, [sp, #48]	; 0x30
 8006dee:	960f      	str	r6, [sp, #60]	; 0x3c
 8006df0:	960d      	str	r6, [sp, #52]	; 0x34
 8006df2:	f7ff b941 	b.w	8006078 <_vfprintf_r+0x4a0>
 8006df6:	2e10      	cmp	r6, #16
 8006df8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dfa:	f340 8496 	ble.w	800772a <_vfprintf_r+0x1b52>
 8006dfe:	48bc      	ldr	r0, [pc, #752]	; (80070f0 <_vfprintf_r+0x1518>)
 8006e00:	900a      	str	r0, [sp, #40]	; 0x28
 8006e02:	4621      	mov	r1, r4
 8006e04:	4642      	mov	r2, r8
 8006e06:	2710      	movs	r7, #16
 8006e08:	ee1a 8a10 	vmov	r8, s20
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	e004      	b.n	8006e1a <_vfprintf_r+0x1242>
 8006e10:	3208      	adds	r2, #8
 8006e12:	3e10      	subs	r6, #16
 8006e14:	2e10      	cmp	r6, #16
 8006e16:	f340 823b 	ble.w	8007290 <_vfprintf_r+0x16b8>
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	3110      	adds	r1, #16
 8006e1e:	2b07      	cmp	r3, #7
 8006e20:	e9c2 4700 	strd	r4, r7, [r2]
 8006e24:	e9cd 3123 	strd	r3, r1, [sp, #140]	; 0x8c
 8006e28:	ddf2      	ble.n	8006e10 <_vfprintf_r+0x1238>
 8006e2a:	aa22      	add	r2, sp, #136	; 0x88
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	4648      	mov	r0, r9
 8006e30:	f002 fd1e 	bl	8009870 <__sprint_r>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f47f a81f 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8006e3a:	e9dd 3123 	ldrd	r3, r1, [sp, #140]	; 0x8c
 8006e3e:	aa25      	add	r2, sp, #148	; 0x94
 8006e40:	e7e7      	b.n	8006e12 <_vfprintf_r+0x123a>
 8006e42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e44:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006e46:	441c      	add	r4, r3
 8006e48:	e9c8 1300 	strd	r1, r3, [r8]
 8006e4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e4e:	9424      	str	r4, [sp, #144]	; 0x90
 8006e50:	3301      	adds	r3, #1
 8006e52:	2b07      	cmp	r3, #7
 8006e54:	9323      	str	r3, [sp, #140]	; 0x8c
 8006e56:	f300 8128 	bgt.w	80070aa <_vfprintf_r+0x14d2>
 8006e5a:	f108 0808 	add.w	r8, r8, #8
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	f2c0 82fd 	blt.w	800745e <_vfprintf_r+0x1886>
 8006e64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006e66:	f8c8 5000 	str.w	r5, [r8]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	4414      	add	r4, r2
 8006e6e:	2b07      	cmp	r3, #7
 8006e70:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8006e74:	f8c8 2004 	str.w	r2, [r8, #4]
 8006e78:	f77f a88e 	ble.w	8005f98 <_vfprintf_r+0x3c0>
 8006e7c:	f7ff bba7 	b.w	80065ce <_vfprintf_r+0x9f6>
 8006e80:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006e84:	461c      	mov	r4, r3
 8006e86:	3601      	adds	r6, #1
 8006e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e8a:	f8c8 3000 	str.w	r3, [r8]
 8006e8e:	442c      	add	r4, r5
 8006e90:	2e07      	cmp	r6, #7
 8006e92:	e9cd 6423 	strd	r6, r4, [sp, #140]	; 0x8c
 8006e96:	f8c8 5004 	str.w	r5, [r8, #4]
 8006e9a:	f77f ab89 	ble.w	80065b0 <_vfprintf_r+0x9d8>
 8006e9e:	e4da      	b.n	8006856 <_vfprintf_r+0xc7e>
 8006ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea2:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
 8006ea6:	bf14      	ite	ne
 8006ea8:	f853 4b04 	ldrne.w	r4, [r3], #4
 8006eac:	f853 4b04 	ldreq.w	r4, [r3], #4
 8006eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006eb2:	bf1c      	itt	ne
 8006eb4:	4616      	movne	r6, r2
 8006eb6:	b2e4      	uxtbne	r4, r4
 8006eb8:	f7ff b95f 	b.w	800617a <_vfprintf_r+0x5a2>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 8006ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec4:	bf14      	ite	ne
 8006ec6:	f853 4b04 	ldrne.w	r4, [r3], #4
 8006eca:	f853 4b04 	ldreq.w	r4, [r3], #4
 8006ece:	9309      	str	r3, [sp, #36]	; 0x24
 8006ed0:	bf1c      	itt	ne
 8006ed2:	4616      	movne	r6, r2
 8006ed4:	b2e4      	uxtbne	r4, r4
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	f7ff b953 	b.w	8006182 <_vfprintf_r+0x5aa>
 8006edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ede:	f41a 7600 	ands.w	r6, sl, #512	; 0x200
 8006ee2:	bf14      	ite	ne
 8006ee4:	f853 4b04 	ldrne.w	r4, [r3], #4
 8006ee8:	f853 4b04 	ldreq.w	r4, [r3], #4
 8006eec:	9309      	str	r3, [sp, #36]	; 0x24
 8006eee:	bf1c      	itt	ne
 8006ef0:	4616      	movne	r6, r2
 8006ef2:	b2e4      	uxtbne	r4, r4
 8006ef4:	e678      	b.n	8006be8 <_vfprintf_r+0x1010>
 8006ef6:	4a7e      	ldr	r2, [pc, #504]	; (80070f0 <_vfprintf_r+0x1518>)
 8006ef8:	920a      	str	r2, [sp, #40]	; 0x28
 8006efa:	f7ff bb13 	b.w	8006524 <_vfprintf_r+0x94c>
 8006efe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8006f00:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8006f02:	1aed      	subs	r5, r5, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	4628      	mov	r0, r5
 8006f08:	f002 fc44 	bl	8009794 <strncpy>
 8006f0c:	f899 3001 	ldrb.w	r3, [r9, #1]
 8006f10:	b10b      	cbz	r3, 8006f16 <_vfprintf_r+0x133e>
 8006f12:	f109 0901 	add.w	r9, r9, #1
 8006f16:	4620      	mov	r0, r4
 8006f18:	4631      	mov	r1, r6
 8006f1a:	220a      	movs	r2, #10
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	2700      	movs	r7, #0
 8006f20:	f7f9 fd64 	bl	80009ec <__aeabi_uldivmod>
 8006f24:	e6e9      	b.n	8006cfa <_vfprintf_r+0x1122>
 8006f26:	232d      	movs	r3, #45	; 0x2d
 8006f28:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8006f2c:	f7ff b894 	b.w	8006058 <_vfprintf_r+0x480>
 8006f30:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f32:	9907      	ldr	r1, [sp, #28]
 8006f34:	18ae      	adds	r6, r5, r2
 8006f36:	1a76      	subs	r6, r6, r1
 8006f38:	1ad5      	subs	r5, r2, r3
 8006f3a:	42ae      	cmp	r6, r5
 8006f3c:	bfa8      	it	ge
 8006f3e:	462e      	movge	r6, r5
 8006f40:	e44c      	b.n	80067dc <_vfprintf_r+0xc04>
 8006f42:	f344 16c0 	sbfx	r6, r4, #7, #1
 8006f46:	4633      	mov	r3, r6
 8006f48:	b264      	sxtb	r4, r4
 8006f4a:	f7ff b8c0 	b.w	80060ce <_vfprintf_r+0x4f6>
 8006f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f50:	9906      	ldr	r1, [sp, #24]
 8006f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f56:	9309      	str	r3, [sp, #36]	; 0x24
 8006f58:	8011      	strh	r1, [r2, #0]
 8006f5a:	465d      	mov	r5, fp
 8006f5c:	f7ff b83d 	b.w	8005fda <_vfprintf_r+0x402>
 8006f60:	2330      	movs	r3, #48	; 0x30
 8006f62:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8006f66:	2358      	movs	r3, #88	; 0x58
 8006f68:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8006f6c:	9b04      	ldr	r3, [sp, #16]
 8006f6e:	2b63      	cmp	r3, #99	; 0x63
 8006f70:	f04a 0402 	orr.w	r4, sl, #2
 8006f74:	f300 82d5 	bgt.w	8007522 <_vfprintf_r+0x194a>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	9308      	str	r3, [sp, #32]
 8006f7c:	ad35      	add	r5, sp, #212	; 0xd4
 8006f7e:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 8006f82:	f44a 7381 	orr.w	r3, sl, #258	; 0x102
 8006f86:	9307      	str	r3, [sp, #28]
 8006f88:	2a00      	cmp	r2, #0
 8006f8a:	f027 0320 	bic.w	r3, r7, #32
 8006f8e:	46a2      	mov	sl, r4
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	f2c0 819f 	blt.w	80072d4 <_vfprintf_r+0x16fc>
 8006f96:	2300      	movs	r3, #0
 8006f98:	ec42 1b18 	vmov	d8, r1, r2
 8006f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8006f9e:	2f61      	cmp	r7, #97	; 0x61
 8006fa0:	f000 834a 	beq.w	8007638 <_vfprintf_r+0x1a60>
 8006fa4:	2f41      	cmp	r7, #65	; 0x41
 8006fa6:	f47f ad55 	bne.w	8006a54 <_vfprintf_r+0xe7c>
 8006faa:	eeb0 0a48 	vmov.f32	s0, s16
 8006fae:	eef0 0a68 	vmov.f32	s1, s17
 8006fb2:	a81c      	add	r0, sp, #112	; 0x70
 8006fb4:	f002 fbb8 	bl	8009728 <frexp>
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006fbe:	ec51 0b10 	vmov	r0, r1, d0
 8006fc2:	f7f9 fad9 	bl	8000578 <__aeabi_dmul>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	ec43 2b19 	vmov	d9, r2, r3
 8006fce:	2200      	movs	r2, #0
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	f7fa f845 	bl	8001060 <__aeabi_dcmpeq>
 8006fd6:	b108      	cbz	r0, 8006fdc <_vfprintf_r+0x1404>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	931c      	str	r3, [sp, #112]	; 0x70
 8006fdc:	4b45      	ldr	r3, [pc, #276]	; (80070f4 <_vfprintf_r+0x151c>)
 8006fde:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fe0:	9b04      	ldr	r3, [sp, #16]
 8006fe2:	9519      	str	r5, [sp, #100]	; 0x64
 8006fe4:	e9cd 7b0c 	strd	r7, fp, [sp, #48]	; 0x30
 8006fe8:	e9cd a80e 	strd	sl, r8, [sp, #56]	; 0x38
 8006fec:	ee0c 9a10 	vmov	s24, r9
 8006ff0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8006ff4:	ec59 8b19 	vmov	r8, r9, d9
 8006ff8:	1e5e      	subs	r6, r3, #1
 8006ffa:	462c      	mov	r4, r5
 8006ffc:	e005      	b.n	800700a <_vfprintf_r+0x1432>
 8006ffe:	2200      	movs	r2, #0
 8007000:	2300      	movs	r3, #0
 8007002:	3e01      	subs	r6, #1
 8007004:	f7fa f82c 	bl	8001060 <__aeabi_dcmpeq>
 8007008:	b9e0      	cbnz	r0, 8007044 <_vfprintf_r+0x146c>
 800700a:	4b3b      	ldr	r3, [pc, #236]	; (80070f8 <_vfprintf_r+0x1520>)
 800700c:	2200      	movs	r2, #0
 800700e:	4640      	mov	r0, r8
 8007010:	4649      	mov	r1, r9
 8007012:	f7f9 fab1 	bl	8000578 <__aeabi_dmul>
 8007016:	4689      	mov	r9, r1
 8007018:	4680      	mov	r8, r0
 800701a:	f7f9 fcbf 	bl	800099c <__aeabi_d2iz>
 800701e:	4605      	mov	r5, r0
 8007020:	f7f9 fa40 	bl	80004a4 <__aeabi_i2d>
 8007024:	460b      	mov	r3, r1
 8007026:	4602      	mov	r2, r0
 8007028:	4649      	mov	r1, r9
 800702a:	4640      	mov	r0, r8
 800702c:	f7f9 f8ec 	bl	8000208 <__aeabi_dsub>
 8007030:	f81b 3005 	ldrb.w	r3, [fp, r5]
 8007034:	46a2      	mov	sl, r4
 8007036:	f804 3b01 	strb.w	r3, [r4], #1
 800703a:	1c73      	adds	r3, r6, #1
 800703c:	4637      	mov	r7, r6
 800703e:	4680      	mov	r8, r0
 8007040:	4689      	mov	r9, r1
 8007042:	d1dc      	bne.n	8006ffe <_vfprintf_r+0x1426>
 8007044:	ec49 8b19 	vmov	d9, r8, r9
 8007048:	4b2c      	ldr	r3, [pc, #176]	; (80070fc <_vfprintf_r+0x1524>)
 800704a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 800704e:	ec51 0b19 	vmov	r0, r1, d9
 8007052:	2200      	movs	r2, #0
 8007054:	463e      	mov	r6, r7
 8007056:	ee1c 9a10 	vmov	r9, s24
 800705a:	e9dd 7b0c 	ldrd	r7, fp, [sp, #48]	; 0x30
 800705e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8007062:	950d      	str	r5, [sp, #52]	; 0x34
 8007064:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8007068:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800706a:	f7fa f821 	bl	80010b0 <__aeabi_dcmpgt>
 800706e:	2800      	cmp	r0, #0
 8007070:	f040 8236 	bne.w	80074e0 <_vfprintf_r+0x1908>
 8007074:	ec51 0b19 	vmov	r0, r1, d9
 8007078:	4b20      	ldr	r3, [pc, #128]	; (80070fc <_vfprintf_r+0x1524>)
 800707a:	2200      	movs	r2, #0
 800707c:	f7f9 fff0 	bl	8001060 <__aeabi_dcmpeq>
 8007080:	b118      	cbz	r0, 800708a <_vfprintf_r+0x14b2>
 8007082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007084:	07d9      	lsls	r1, r3, #31
 8007086:	f100 822b 	bmi.w	80074e0 <_vfprintf_r+0x1908>
 800708a:	2e00      	cmp	r6, #0
 800708c:	4633      	mov	r3, r6
 800708e:	db06      	blt.n	800709e <_vfprintf_r+0x14c6>
 8007090:	3301      	adds	r3, #1
 8007092:	4423      	add	r3, r4
 8007094:	2230      	movs	r2, #48	; 0x30
 8007096:	f804 2b01 	strb.w	r2, [r4], #1
 800709a:	42a3      	cmp	r3, r4
 800709c:	d1fb      	bne.n	8007096 <_vfprintf_r+0x14be>
 800709e:	1b63      	subs	r3, r4, r5
 80070a0:	4656      	mov	r6, sl
 80070a2:	930e      	str	r3, [sp, #56]	; 0x38
 80070a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80070a8:	e4f8      	b.n	8006a9c <_vfprintf_r+0xec4>
 80070aa:	ee1a 1a10 	vmov	r1, s20
 80070ae:	aa22      	add	r2, sp, #136	; 0x88
 80070b0:	4648      	mov	r0, r9
 80070b2:	f002 fbdd 	bl	8009870 <__sprint_r>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	f47e aede 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80070bc:	e9dd 3423 	ldrd	r3, r4, [sp, #140]	; 0x8c
 80070c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80070c2:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 80070c6:	e6ca      	b.n	8006e5e <_vfprintf_r+0x1286>
 80070c8:	ee1a 3a10 	vmov	r3, s20
 80070cc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80070ce:	f7fa f8b1 	bl	8001234 <__retarget_lock_release_recursive>
 80070d2:	f7fe be9d 	b.w	8005e10 <_vfprintf_r+0x238>
 80070d6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80070d8:	930d      	str	r3, [sp, #52]	; 0x34
 80070da:	1cda      	adds	r2, r3, #3
 80070dc:	db02      	blt.n	80070e4 <_vfprintf_r+0x150c>
 80070de:	9a04      	ldr	r2, [sp, #16]
 80070e0:	4293      	cmp	r3, r2
 80070e2:	dd0d      	ble.n	8007100 <_vfprintf_r+0x1528>
 80070e4:	3f02      	subs	r7, #2
 80070e6:	f027 0320 	bic.w	r3, r7, #32
 80070ea:	9303      	str	r3, [sp, #12]
 80070ec:	e4e0      	b.n	8006ab0 <_vfprintf_r+0xed8>
 80070ee:	bf00      	nop
 80070f0:	0800b958 	.word	0x0800b958
 80070f4:	0800b928 	.word	0x0800b928
 80070f8:	40300000 	.word	0x40300000
 80070fc:	3fe00000 	.word	0x3fe00000
 8007100:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 8007104:	428b      	cmp	r3, r1
 8007106:	f2c0 817f 	blt.w	8007408 <_vfprintf_r+0x1830>
 800710a:	07f7      	lsls	r7, r6, #31
 800710c:	f140 8291 	bpl.w	8007632 <_vfprintf_r+0x1a5a>
 8007110:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007112:	4413      	add	r3, r2
 8007114:	9307      	str	r3, [sp, #28]
 8007116:	0576      	lsls	r6, r6, #21
 8007118:	d503      	bpl.n	8007122 <_vfprintf_r+0x154a>
 800711a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800711c:	2b00      	cmp	r3, #0
 800711e:	f300 825a 	bgt.w	80075d6 <_vfprintf_r+0x19fe>
 8007122:	9b07      	ldr	r3, [sp, #28]
 8007124:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007128:	9303      	str	r3, [sp, #12]
 800712a:	2767      	movs	r7, #103	; 0x67
 800712c:	2300      	movs	r3, #0
 800712e:	930c      	str	r3, [sp, #48]	; 0x30
 8007130:	930f      	str	r3, [sp, #60]	; 0x3c
 8007132:	e51f      	b.n	8006b74 <_vfprintf_r+0xf9c>
 8007134:	232d      	movs	r3, #45	; 0x2d
 8007136:	2200      	movs	r2, #0
 8007138:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800713c:	9204      	str	r2, [sp, #16]
 800713e:	f7fe bf9e 	b.w	800607e <_vfprintf_r+0x4a6>
 8007142:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007144:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007148:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800714c:	9e07      	ldr	r6, [sp, #28]
 800714e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8007150:	f8cd a01c 	str.w	sl, [sp, #28]
 8007154:	18eb      	adds	r3, r5, r3
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	4642      	mov	r2, r8
 800715a:	f8dd a060 	ldr.w	sl, [sp, #96]	; 0x60
 800715e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007160:	950b      	str	r5, [sp, #44]	; 0x2c
 8007162:	ee1a 8a10 	vmov	r8, s20
 8007166:	46a4      	mov	ip, r4
 8007168:	f1bb 0f00 	cmp.w	fp, #0
 800716c:	d030      	beq.n	80071d0 <_vfprintf_r+0x15f8>
 800716e:	2b00      	cmp	r3, #0
 8007170:	d171      	bne.n	8007256 <_vfprintf_r+0x167e>
 8007172:	3f01      	subs	r7, #1
 8007174:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800717a:	e9c2 3a00 	strd	r3, sl, [r2]
 800717e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007180:	3301      	adds	r3, #1
 8007182:	44d4      	add	ip, sl
 8007184:	2b07      	cmp	r3, #7
 8007186:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 800718a:	9323      	str	r3, [sp, #140]	; 0x8c
 800718c:	dc67      	bgt.n	800725e <_vfprintf_r+0x1686>
 800718e:	3208      	adds	r2, #8
 8007190:	9b04      	ldr	r3, [sp, #16]
 8007192:	7838      	ldrb	r0, [r7, #0]
 8007194:	1b9b      	subs	r3, r3, r6
 8007196:	4283      	cmp	r3, r0
 8007198:	bfa8      	it	ge
 800719a:	4603      	movge	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	461c      	mov	r4, r3
 80071a0:	dd0b      	ble.n	80071ba <_vfprintf_r+0x15e2>
 80071a2:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80071a4:	3001      	adds	r0, #1
 80071a6:	449c      	add	ip, r3
 80071a8:	2807      	cmp	r0, #7
 80071aa:	e9c2 6300 	strd	r6, r3, [r2]
 80071ae:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 80071b2:	9023      	str	r0, [sp, #140]	; 0x8c
 80071b4:	dc5f      	bgt.n	8007276 <_vfprintf_r+0x169e>
 80071b6:	7838      	ldrb	r0, [r7, #0]
 80071b8:	3208      	adds	r2, #8
 80071ba:	2c00      	cmp	r4, #0
 80071bc:	bfac      	ite	ge
 80071be:	1b05      	subge	r5, r0, r4
 80071c0:	4605      	movlt	r5, r0
 80071c2:	2d00      	cmp	r5, #0
 80071c4:	dc17      	bgt.n	80071f6 <_vfprintf_r+0x161e>
 80071c6:	4406      	add	r6, r0
 80071c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071ca:	f1bb 0f00 	cmp.w	fp, #0
 80071ce:	d1ce      	bne.n	800716e <_vfprintf_r+0x1596>
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d140      	bne.n	8007256 <_vfprintf_r+0x167e>
 80071d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80071d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071d8:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80071dc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80071e0:	9715      	str	r7, [sp, #84]	; 0x54
 80071e2:	18eb      	adds	r3, r5, r3
 80071e4:	429e      	cmp	r6, r3
 80071e6:	4690      	mov	r8, r2
 80071e8:	4632      	mov	r2, r6
 80071ea:	bf28      	it	cs
 80071ec:	461a      	movcs	r2, r3
 80071ee:	4664      	mov	r4, ip
 80071f0:	9207      	str	r2, [sp, #28]
 80071f2:	f7ff bac5 	b.w	8006780 <_vfprintf_r+0xba8>
 80071f6:	2d10      	cmp	r5, #16
 80071f8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80071fa:	dd1f      	ble.n	800723c <_vfprintf_r+0x1664>
 80071fc:	2410      	movs	r4, #16
 80071fe:	4663      	mov	r3, ip
 8007200:	e004      	b.n	800720c <_vfprintf_r+0x1634>
 8007202:	3d10      	subs	r5, #16
 8007204:	2d10      	cmp	r5, #16
 8007206:	f102 0208 	add.w	r2, r2, #8
 800720a:	dd16      	ble.n	800723a <_vfprintf_r+0x1662>
 800720c:	3001      	adds	r0, #1
 800720e:	49b3      	ldr	r1, [pc, #716]	; (80074dc <_vfprintf_r+0x1904>)
 8007210:	3310      	adds	r3, #16
 8007212:	2807      	cmp	r0, #7
 8007214:	e9c2 1400 	strd	r1, r4, [r2]
 8007218:	e9cd 0323 	strd	r0, r3, [sp, #140]	; 0x8c
 800721c:	ddf1      	ble.n	8007202 <_vfprintf_r+0x162a>
 800721e:	aa22      	add	r2, sp, #136	; 0x88
 8007220:	4641      	mov	r1, r8
 8007222:	4648      	mov	r0, r9
 8007224:	f002 fb24 	bl	8009870 <__sprint_r>
 8007228:	2800      	cmp	r0, #0
 800722a:	f47e ae25 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 800722e:	3d10      	subs	r5, #16
 8007230:	2d10      	cmp	r5, #16
 8007232:	e9dd 0323 	ldrd	r0, r3, [sp, #140]	; 0x8c
 8007236:	aa25      	add	r2, sp, #148	; 0x94
 8007238:	dce8      	bgt.n	800720c <_vfprintf_r+0x1634>
 800723a:	469c      	mov	ip, r3
 800723c:	3001      	adds	r0, #1
 800723e:	4ba7      	ldr	r3, [pc, #668]	; (80074dc <_vfprintf_r+0x1904>)
 8007240:	6055      	str	r5, [r2, #4]
 8007242:	44ac      	add	ip, r5
 8007244:	2807      	cmp	r0, #7
 8007246:	e9cd 0c23 	strd	r0, ip, [sp, #140]	; 0x8c
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	dc4d      	bgt.n	80072ea <_vfprintf_r+0x1712>
 800724e:	7838      	ldrb	r0, [r7, #0]
 8007250:	3208      	adds	r2, #8
 8007252:	4406      	add	r6, r0
 8007254:	e7b8      	b.n	80071c8 <_vfprintf_r+0x15f0>
 8007256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007258:	3b01      	subs	r3, #1
 800725a:	930c      	str	r3, [sp, #48]	; 0x30
 800725c:	e78c      	b.n	8007178 <_vfprintf_r+0x15a0>
 800725e:	aa22      	add	r2, sp, #136	; 0x88
 8007260:	4641      	mov	r1, r8
 8007262:	4648      	mov	r0, r9
 8007264:	f002 fb04 	bl	8009870 <__sprint_r>
 8007268:	2800      	cmp	r0, #0
 800726a:	f47e ae05 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 800726e:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 8007272:	aa25      	add	r2, sp, #148	; 0x94
 8007274:	e78c      	b.n	8007190 <_vfprintf_r+0x15b8>
 8007276:	aa22      	add	r2, sp, #136	; 0x88
 8007278:	4641      	mov	r1, r8
 800727a:	4648      	mov	r0, r9
 800727c:	f002 faf8 	bl	8009870 <__sprint_r>
 8007280:	2800      	cmp	r0, #0
 8007282:	f47e adf9 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8007286:	7838      	ldrb	r0, [r7, #0]
 8007288:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 800728c:	aa25      	add	r2, sp, #148	; 0x94
 800728e:	e794      	b.n	80071ba <_vfprintf_r+0x15e2>
 8007290:	460c      	mov	r4, r1
 8007292:	4690      	mov	r8, r2
 8007294:	3301      	adds	r3, #1
 8007296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007298:	f8c8 2000 	str.w	r2, [r8]
 800729c:	4434      	add	r4, r6
 800729e:	2b07      	cmp	r3, #7
 80072a0:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 80072a4:	f8c8 6004 	str.w	r6, [r8, #4]
 80072a8:	f300 8161 	bgt.w	800756e <_vfprintf_r+0x1996>
 80072ac:	f108 0808 	add.w	r8, r8, #8
 80072b0:	f7ff ba5f 	b.w	8006772 <_vfprintf_r+0xb9a>
 80072b4:	ee1a 1a10 	vmov	r1, s20
 80072b8:	aa22      	add	r2, sp, #136	; 0x88
 80072ba:	4648      	mov	r0, r9
 80072bc:	f002 fad8 	bl	8009870 <__sprint_r>
 80072c0:	2800      	cmp	r0, #0
 80072c2:	f47e add9 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80072c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80072c8:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80072ca:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 80072ce:	f7ff bb71 	b.w	80069b4 <_vfprintf_r+0xddc>
 80072d2:	9308      	str	r3, [sp, #32]
 80072d4:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 80072d8:	ee08 3a10 	vmov	s16, r3
 80072dc:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 80072e0:	ee08 3a90 	vmov	s17, r3
 80072e4:	232d      	movs	r3, #45	; 0x2d
 80072e6:	930a      	str	r3, [sp, #40]	; 0x28
 80072e8:	e659      	b.n	8006f9e <_vfprintf_r+0x13c6>
 80072ea:	aa22      	add	r2, sp, #136	; 0x88
 80072ec:	4641      	mov	r1, r8
 80072ee:	4648      	mov	r0, r9
 80072f0:	f002 fabe 	bl	8009870 <__sprint_r>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	f47e adbf 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80072fa:	7838      	ldrb	r0, [r7, #0]
 80072fc:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
 8007300:	aa25      	add	r2, sp, #148	; 0x94
 8007302:	4406      	add	r6, r0
 8007304:	e760      	b.n	80071c8 <_vfprintf_r+0x15f0>
 8007306:	ee1a 1a10 	vmov	r1, s20
 800730a:	aa22      	add	r2, sp, #136	; 0x88
 800730c:	4648      	mov	r0, r9
 800730e:	f002 faaf 	bl	8009870 <__sprint_r>
 8007312:	2800      	cmp	r0, #0
 8007314:	f47e adb0 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8007318:	9c24      	ldr	r4, [sp, #144]	; 0x90
 800731a:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 800731e:	f7ff ba20 	b.w	8006762 <_vfprintf_r+0xb8a>
 8007322:	ee1a 1a10 	vmov	r1, s20
 8007326:	aa22      	add	r2, sp, #136	; 0x88
 8007328:	4648      	mov	r0, r9
 800732a:	f002 faa1 	bl	8009870 <__sprint_r>
 800732e:	2800      	cmp	r0, #0
 8007330:	f47e ada2 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8007334:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007336:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8007338:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 800733c:	f7ff ba36 	b.w	80067ac <_vfprintf_r+0xbd4>
 8007340:	ab20      	add	r3, sp, #128	; 0x80
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	ab1d      	add	r3, sp, #116	; 0x74
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	9a04      	ldr	r2, [sp, #16]
 800734a:	eeb0 0a48 	vmov.f32	s0, s16
 800734e:	eef0 0a68 	vmov.f32	s1, s17
 8007352:	ab1c      	add	r3, sp, #112	; 0x70
 8007354:	2103      	movs	r1, #3
 8007356:	4648      	mov	r0, r9
 8007358:	f000 fb6e 	bl	8007a38 <_dtoa_r>
 800735c:	7803      	ldrb	r3, [r0, #0]
 800735e:	2b30      	cmp	r3, #48	; 0x30
 8007360:	4605      	mov	r5, r0
 8007362:	f000 8199 	beq.w	8007698 <_vfprintf_r+0x1ac0>
 8007366:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007368:	9a04      	ldr	r2, [sp, #16]
 800736a:	4656      	mov	r6, sl
 800736c:	4413      	add	r3, r2
 800736e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007372:	18ec      	adds	r4, r5, r3
 8007374:	ec51 0b18 	vmov	r0, r1, d8
 8007378:	2200      	movs	r2, #0
 800737a:	2300      	movs	r3, #0
 800737c:	f7f9 fe70 	bl	8001060 <__aeabi_dcmpeq>
 8007380:	b110      	cbz	r0, 8007388 <_vfprintf_r+0x17b0>
 8007382:	4623      	mov	r3, r4
 8007384:	f7ff bb88 	b.w	8006a98 <_vfprintf_r+0xec0>
 8007388:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800738a:	42a3      	cmp	r3, r4
 800738c:	f4bf ab84 	bcs.w	8006a98 <_vfprintf_r+0xec0>
 8007390:	2130      	movs	r1, #48	; 0x30
 8007392:	1c5a      	adds	r2, r3, #1
 8007394:	9220      	str	r2, [sp, #128]	; 0x80
 8007396:	7019      	strb	r1, [r3, #0]
 8007398:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800739a:	429c      	cmp	r4, r3
 800739c:	d8f9      	bhi.n	8007392 <_vfprintf_r+0x17ba>
 800739e:	f7ff bb7b 	b.w	8006a98 <_vfprintf_r+0xec0>
 80073a2:	9b04      	ldr	r3, [sp, #16]
 80073a4:	9303      	str	r3, [sp, #12]
 80073a6:	9307      	str	r3, [sp, #28]
 80073a8:	9409      	str	r4, [sp, #36]	; 0x24
 80073aa:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80073ae:	9004      	str	r0, [sp, #16]
 80073b0:	900c      	str	r0, [sp, #48]	; 0x30
 80073b2:	900f      	str	r0, [sp, #60]	; 0x3c
 80073b4:	900d      	str	r0, [sp, #52]	; 0x34
 80073b6:	f7fe be5f 	b.w	8006078 <_vfprintf_r+0x4a0>
 80073ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80073bc:	920d      	str	r2, [sp, #52]	; 0x34
 80073be:	2a00      	cmp	r2, #0
 80073c0:	f340 8190 	ble.w	80076e4 <_vfprintf_r+0x1b0c>
 80073c4:	9904      	ldr	r1, [sp, #16]
 80073c6:	f006 0301 	and.w	r3, r6, #1
 80073ca:	430b      	orrs	r3, r1
 80073cc:	f040 812b 	bne.w	8007626 <_vfprintf_r+0x1a4e>
 80073d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073d2:	9307      	str	r3, [sp, #28]
 80073d4:	2766      	movs	r7, #102	; 0x66
 80073d6:	0573      	lsls	r3, r6, #21
 80073d8:	f100 80fe 	bmi.w	80075d8 <_vfprintf_r+0x1a00>
 80073dc:	9b07      	ldr	r3, [sp, #28]
 80073de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80073e2:	9303      	str	r3, [sp, #12]
 80073e4:	e6a2      	b.n	800712c <_vfprintf_r+0x1554>
 80073e6:	ee1a 1a10 	vmov	r1, s20
 80073ea:	aa22      	add	r2, sp, #136	; 0x88
 80073ec:	4648      	mov	r0, r9
 80073ee:	f002 fa3f 	bl	8009870 <__sprint_r>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	f47e ad40 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80073f8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80073fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073fc:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80073fe:	1b5d      	subs	r5, r3, r5
 8007400:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8007404:	f7ff b9ea 	b.w	80067dc <_vfprintf_r+0xc04>
 8007408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800740a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800740c:	189a      	adds	r2, r3, r2
 800740e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007410:	9207      	str	r2, [sp, #28]
 8007412:	2b00      	cmp	r3, #0
 8007414:	f340 8153 	ble.w	80076be <_vfprintf_r+0x1ae6>
 8007418:	2767      	movs	r7, #103	; 0x67
 800741a:	e7dc      	b.n	80073d6 <_vfprintf_r+0x17fe>
 800741c:	2300      	movs	r3, #0
 800741e:	9304      	str	r3, [sp, #16]
 8007420:	f7fe bc51 	b.w	8005cc6 <_vfprintf_r+0xee>
 8007424:	ee1a 1a10 	vmov	r1, s20
 8007428:	ee1a 0a90 	vmov	r0, s21
 800742c:	aa22      	add	r2, sp, #136	; 0x88
 800742e:	f002 fa1f 	bl	8009870 <__sprint_r>
 8007432:	2800      	cmp	r0, #0
 8007434:	f43e add9 	beq.w	8005fea <_vfprintf_r+0x412>
 8007438:	f7fe bd25 	b.w	8005e86 <_vfprintf_r+0x2ae>
 800743c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800743e:	07dc      	lsls	r4, r3, #31
 8007440:	d405      	bmi.n	800744e <_vfprintf_r+0x1876>
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	0598      	lsls	r0, r3, #22
 8007446:	d402      	bmi.n	800744e <_vfprintf_r+0x1876>
 8007448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800744a:	f7f9 fef3 	bl	8001234 <__retarget_lock_release_recursive>
 800744e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007452:	9306      	str	r3, [sp, #24]
 8007454:	f7fe bd21 	b.w	8005e9a <_vfprintf_r+0x2c2>
 8007458:	9b04      	ldr	r3, [sp, #16]
 800745a:	18ec      	adds	r4, r5, r3
 800745c:	e78a      	b.n	8007374 <_vfprintf_r+0x179c>
 800745e:	4256      	negs	r6, r2
 8007460:	3210      	adds	r2, #16
 8007462:	f280 816f 	bge.w	8007744 <_vfprintf_r+0x1b6c>
 8007466:	481d      	ldr	r0, [pc, #116]	; (80074dc <_vfprintf_r+0x1904>)
 8007468:	900a      	str	r0, [sp, #40]	; 0x28
 800746a:	4642      	mov	r2, r8
 800746c:	4621      	mov	r1, r4
 800746e:	ee1a 8a10 	vmov	r8, s20
 8007472:	2710      	movs	r7, #16
 8007474:	4604      	mov	r4, r0
 8007476:	e003      	b.n	8007480 <_vfprintf_r+0x18a8>
 8007478:	3208      	adds	r2, #8
 800747a:	3e10      	subs	r6, #16
 800747c:	2e10      	cmp	r6, #16
 800747e:	dd5a      	ble.n	8007536 <_vfprintf_r+0x195e>
 8007480:	3301      	adds	r3, #1
 8007482:	3110      	adds	r1, #16
 8007484:	2b07      	cmp	r3, #7
 8007486:	e9c2 4700 	strd	r4, r7, [r2]
 800748a:	e9cd 3123 	strd	r3, r1, [sp, #140]	; 0x8c
 800748e:	ddf3      	ble.n	8007478 <_vfprintf_r+0x18a0>
 8007490:	aa22      	add	r2, sp, #136	; 0x88
 8007492:	4641      	mov	r1, r8
 8007494:	4648      	mov	r0, r9
 8007496:	f002 f9eb 	bl	8009870 <__sprint_r>
 800749a:	2800      	cmp	r0, #0
 800749c:	f47e acec 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 80074a0:	e9dd 3123 	ldrd	r3, r1, [sp, #140]	; 0x8c
 80074a4:	aa25      	add	r2, sp, #148	; 0x94
 80074a6:	e7e8      	b.n	800747a <_vfprintf_r+0x18a2>
 80074a8:	9b04      	ldr	r3, [sp, #16]
 80074aa:	eeb0 0a48 	vmov.f32	s0, s16
 80074ae:	eef0 0a68 	vmov.f32	s1, s17
 80074b2:	1c5c      	adds	r4, r3, #1
 80074b4:	ab20      	add	r3, sp, #128	; 0x80
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	ab1d      	add	r3, sp, #116	; 0x74
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4622      	mov	r2, r4
 80074be:	ab1c      	add	r3, sp, #112	; 0x70
 80074c0:	2102      	movs	r1, #2
 80074c2:	4648      	mov	r0, r9
 80074c4:	f000 fab8 	bl	8007a38 <_dtoa_r>
 80074c8:	4605      	mov	r5, r0
 80074ca:	4656      	mov	r6, sl
 80074cc:	442c      	add	r4, r5
 80074ce:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80074d2:	e74f      	b.n	8007374 <_vfprintf_r+0x179c>
 80074d4:	4a01      	ldr	r2, [pc, #4]	; (80074dc <_vfprintf_r+0x1904>)
 80074d6:	920a      	str	r2, [sp, #40]	; 0x28
 80074d8:	f7fe bfe6 	b.w	80064a8 <_vfprintf_r+0x8d0>
 80074dc:	0800b958 	.word	0x0800b958
 80074e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074e2:	9320      	str	r3, [sp, #128]	; 0x80
 80074e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074e6:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80074ea:	7bd9      	ldrb	r1, [r3, #15]
 80074ec:	428a      	cmp	r2, r1
 80074ee:	4623      	mov	r3, r4
 80074f0:	d109      	bne.n	8007506 <_vfprintf_r+0x192e>
 80074f2:	2030      	movs	r0, #48	; 0x30
 80074f4:	f803 0c01 	strb.w	r0, [r3, #-1]
 80074f8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80074fa:	1e5a      	subs	r2, r3, #1
 80074fc:	9220      	str	r2, [sp, #128]	; 0x80
 80074fe:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8007502:	4291      	cmp	r1, r2
 8007504:	d0f6      	beq.n	80074f4 <_vfprintf_r+0x191c>
 8007506:	2a39      	cmp	r2, #57	; 0x39
 8007508:	bf0b      	itete	eq
 800750a:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
 800750c:	3201      	addne	r2, #1
 800750e:	7a92      	ldrbeq	r2, [r2, #10]
 8007510:	b2d2      	uxtbne	r2, r2
 8007512:	f803 2c01 	strb.w	r2, [r3, #-1]
 8007516:	e5c2      	b.n	800709e <_vfprintf_r+0x14c6>
 8007518:	2330      	movs	r3, #48	; 0x30
 800751a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800751e:	2378      	movs	r3, #120	; 0x78
 8007520:	e522      	b.n	8006f68 <_vfprintf_r+0x1390>
 8007522:	1c59      	adds	r1, r3, #1
 8007524:	4648      	mov	r0, r9
 8007526:	f7fe f82d 	bl	8005584 <_malloc_r>
 800752a:	4605      	mov	r5, r0
 800752c:	2800      	cmp	r0, #0
 800752e:	f000 810c 	beq.w	800774a <_vfprintf_r+0x1b72>
 8007532:	9008      	str	r0, [sp, #32]
 8007534:	e523      	b.n	8006f7e <_vfprintf_r+0x13a6>
 8007536:	4690      	mov	r8, r2
 8007538:	460c      	mov	r4, r1
 800753a:	3301      	adds	r3, #1
 800753c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800753e:	f8c8 2000 	str.w	r2, [r8]
 8007542:	4434      	add	r4, r6
 8007544:	2b07      	cmp	r3, #7
 8007546:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800754a:	f8c8 6004 	str.w	r6, [r8, #4]
 800754e:	f77f aa46 	ble.w	80069de <_vfprintf_r+0xe06>
 8007552:	ee1a 1a10 	vmov	r1, s20
 8007556:	aa22      	add	r2, sp, #136	; 0x88
 8007558:	4648      	mov	r0, r9
 800755a:	f002 f989 	bl	8009870 <__sprint_r>
 800755e:	2800      	cmp	r0, #0
 8007560:	f47e ac8a 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8007564:	e9dd 3423 	ldrd	r3, r4, [sp, #140]	; 0x8c
 8007568:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 800756c:	e47a      	b.n	8006e64 <_vfprintf_r+0x128c>
 800756e:	ee1a 1a10 	vmov	r1, s20
 8007572:	aa22      	add	r2, sp, #136	; 0x88
 8007574:	4648      	mov	r0, r9
 8007576:	f002 f97b 	bl	8009870 <__sprint_r>
 800757a:	2800      	cmp	r0, #0
 800757c:	f47e ac7c 	bne.w	8005e78 <_vfprintf_r+0x2a0>
 8007580:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8007582:	f10d 0894 	add.w	r8, sp, #148	; 0x94
 8007586:	f7ff b8f4 	b.w	8006772 <_vfprintf_r+0xb9a>
 800758a:	9b04      	ldr	r3, [sp, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	bf08      	it	eq
 8007590:	2301      	moveq	r3, #1
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007596:	f44a 7280 	orr.w	r2, sl, #256	; 0x100
 800759a:	2b00      	cmp	r3, #0
 800759c:	9207      	str	r2, [sp, #28]
 800759e:	f2c0 809b 	blt.w	80076d8 <_vfprintf_r+0x1b00>
 80075a2:	ed9d 8b10 	vldr	d8, [sp, #64]	; 0x40
 80075a6:	900a      	str	r0, [sp, #40]	; 0x28
 80075a8:	9008      	str	r0, [sp, #32]
 80075aa:	f7ff ba5a 	b.w	8006a62 <_vfprintf_r+0xe8a>
 80075ae:	2306      	movs	r3, #6
 80075b0:	9304      	str	r3, [sp, #16]
 80075b2:	f7ff ba41 	b.w	8006a38 <_vfprintf_r+0xe60>
 80075b6:	2900      	cmp	r1, #0
 80075b8:	f040 80a8 	bne.w	800770c <_vfprintf_r+0x1b34>
 80075bc:	2230      	movs	r2, #48	; 0x30
 80075be:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80075c2:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80075c6:	3330      	adds	r3, #48	; 0x30
 80075c8:	f802 3b01 	strb.w	r3, [r2], #1
 80075cc:	ab1e      	add	r3, sp, #120	; 0x78
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	9316      	str	r3, [sp, #88]	; 0x58
 80075d2:	f7ff bab8 	b.w	8006b46 <_vfprintf_r+0xf6e>
 80075d6:	2767      	movs	r7, #103	; 0x67
 80075d8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80075da:	780b      	ldrb	r3, [r1, #0]
 80075dc:	2bff      	cmp	r3, #255	; 0xff
 80075de:	f000 80a7 	beq.w	8007730 <_vfprintf_r+0x1b58>
 80075e2:	2400      	movs	r4, #0
 80075e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075e6:	4620      	mov	r0, r4
 80075e8:	e003      	b.n	80075f2 <_vfprintf_r+0x1a1a>
 80075ea:	3001      	adds	r0, #1
 80075ec:	3101      	adds	r1, #1
 80075ee:	2bff      	cmp	r3, #255	; 0xff
 80075f0:	d008      	beq.n	8007604 <_vfprintf_r+0x1a2c>
 80075f2:	4293      	cmp	r3, r2
 80075f4:	da06      	bge.n	8007604 <_vfprintf_r+0x1a2c>
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	784b      	ldrb	r3, [r1, #1]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d1f5      	bne.n	80075ea <_vfprintf_r+0x1a12>
 80075fe:	780b      	ldrb	r3, [r1, #0]
 8007600:	3401      	adds	r4, #1
 8007602:	e7f4      	b.n	80075ee <_vfprintf_r+0x1a16>
 8007604:	9115      	str	r1, [sp, #84]	; 0x54
 8007606:	920d      	str	r2, [sp, #52]	; 0x34
 8007608:	900f      	str	r0, [sp, #60]	; 0x3c
 800760a:	940c      	str	r4, [sp, #48]	; 0x30
 800760c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800760e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007610:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007612:	4413      	add	r3, r2
 8007614:	9a07      	ldr	r2, [sp, #28]
 8007616:	fb01 2303 	mla	r3, r1, r3, r2
 800761a:	9307      	str	r3, [sp, #28]
 800761c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007620:	9303      	str	r3, [sp, #12]
 8007622:	f7ff baa7 	b.w	8006b74 <_vfprintf_r+0xf9c>
 8007626:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007628:	18d3      	adds	r3, r2, r3
 800762a:	4419      	add	r1, r3
 800762c:	9107      	str	r1, [sp, #28]
 800762e:	2766      	movs	r7, #102	; 0x66
 8007630:	e6d1      	b.n	80073d6 <_vfprintf_r+0x17fe>
 8007632:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007634:	9307      	str	r3, [sp, #28]
 8007636:	e56e      	b.n	8007116 <_vfprintf_r+0x153e>
 8007638:	a81c      	add	r0, sp, #112	; 0x70
 800763a:	eeb0 0a48 	vmov.f32	s0, s16
 800763e:	eef0 0a68 	vmov.f32	s1, s17
 8007642:	f002 f871 	bl	8009728 <frexp>
 8007646:	2200      	movs	r2, #0
 8007648:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800764c:	ec51 0b10 	vmov	r0, r1, d0
 8007650:	f7f8 ff92 	bl	8000578 <__aeabi_dmul>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	ec43 2b19 	vmov	d9, r2, r3
 800765c:	2200      	movs	r2, #0
 800765e:	2300      	movs	r3, #0
 8007660:	f7f9 fcfe 	bl	8001060 <__aeabi_dcmpeq>
 8007664:	b108      	cbz	r0, 800766a <_vfprintf_r+0x1a92>
 8007666:	2301      	movs	r3, #1
 8007668:	931c      	str	r3, [sp, #112]	; 0x70
 800766a:	4b3c      	ldr	r3, [pc, #240]	; (800775c <_vfprintf_r+0x1b84>)
 800766c:	930b      	str	r3, [sp, #44]	; 0x2c
 800766e:	e4b7      	b.n	8006fe0 <_vfprintf_r+0x1408>
 8007670:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007672:	4d3b      	ldr	r5, [pc, #236]	; (8007760 <_vfprintf_r+0x1b88>)
 8007674:	4a3b      	ldr	r2, [pc, #236]	; (8007764 <_vfprintf_r+0x1b8c>)
 8007676:	2b00      	cmp	r3, #0
 8007678:	bfb6      	itet	lt
 800767a:	232d      	movlt	r3, #45	; 0x2d
 800767c:	f89d 306b 	ldrbge.w	r3, [sp, #107]	; 0x6b
 8007680:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8007684:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8007688:	f7fe bcea 	b.w	8006060 <_vfprintf_r+0x488>
 800768c:	f107 020f 	add.w	r2, r7, #15
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	2101      	movs	r1, #1
 8007694:	f7ff ba15 	b.w	8006ac2 <_vfprintf_r+0xeea>
 8007698:	ec51 0b18 	vmov	r0, r1, d8
 800769c:	2200      	movs	r2, #0
 800769e:	2300      	movs	r3, #0
 80076a0:	f7f9 fcde 	bl	8001060 <__aeabi_dcmpeq>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	f47f ae5e 	bne.w	8007366 <_vfprintf_r+0x178e>
 80076aa:	9b04      	ldr	r3, [sp, #16]
 80076ac:	f1c3 0301 	rsb	r3, r3, #1
 80076b0:	931c      	str	r3, [sp, #112]	; 0x70
 80076b2:	e659      	b.n	8007368 <_vfprintf_r+0x1790>
 80076b4:	07f3      	lsls	r3, r6, #31
 80076b6:	f57f aa51 	bpl.w	8006b5c <_vfprintf_r+0xf84>
 80076ba:	f7ff ba4b 	b.w	8006b54 <_vfprintf_r+0xf7c>
 80076be:	f1c3 0301 	rsb	r3, r3, #1
 80076c2:	441a      	add	r2, r3
 80076c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076c8:	9207      	str	r2, [sp, #28]
 80076ca:	9303      	str	r3, [sp, #12]
 80076cc:	2767      	movs	r7, #103	; 0x67
 80076ce:	e52d      	b.n	800712c <_vfprintf_r+0x1554>
 80076d0:	4a25      	ldr	r2, [pc, #148]	; (8007768 <_vfprintf_r+0x1b90>)
 80076d2:	920a      	str	r2, [sp, #40]	; 0x28
 80076d4:	f7ff bb62 	b.w	8006d9c <_vfprintf_r+0x11c4>
 80076d8:	9008      	str	r0, [sp, #32]
 80076da:	e5fb      	b.n	80072d4 <_vfprintf_r+0x16fc>
 80076dc:	4b22      	ldr	r3, [pc, #136]	; (8007768 <_vfprintf_r+0x1b90>)
 80076de:	930a      	str	r3, [sp, #40]	; 0x28
 80076e0:	f7ff bbd1 	b.w	8006e86 <_vfprintf_r+0x12ae>
 80076e4:	9a04      	ldr	r2, [sp, #16]
 80076e6:	f006 0601 	and.w	r6, r6, #1
 80076ea:	4613      	mov	r3, r2
 80076ec:	4333      	orrs	r3, r6
 80076ee:	d104      	bne.n	80076fa <_vfprintf_r+0x1b22>
 80076f0:	2301      	movs	r3, #1
 80076f2:	9303      	str	r3, [sp, #12]
 80076f4:	2766      	movs	r7, #102	; 0x66
 80076f6:	9307      	str	r3, [sp, #28]
 80076f8:	e518      	b.n	800712c <_vfprintf_r+0x1554>
 80076fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80076fc:	3301      	adds	r3, #1
 80076fe:	441a      	add	r2, r3
 8007700:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007704:	9207      	str	r2, [sp, #28]
 8007706:	9303      	str	r3, [sp, #12]
 8007708:	2766      	movs	r7, #102	; 0x66
 800770a:	e50f      	b.n	800712c <_vfprintf_r+0x1554>
 800770c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8007710:	e759      	b.n	80075c6 <_vfprintf_r+0x19ee>
 8007712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007714:	f89b 7001 	ldrb.w	r7, [fp, #1]
 8007718:	4693      	mov	fp, r2
 800771a:	f853 2b04 	ldr.w	r2, [r3], #4
 800771e:	9309      	str	r3, [sp, #36]	; 0x24
 8007720:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8007724:	9204      	str	r2, [sp, #16]
 8007726:	f7fe bacc 	b.w	8005cc2 <_vfprintf_r+0xea>
 800772a:	4a0f      	ldr	r2, [pc, #60]	; (8007768 <_vfprintf_r+0x1b90>)
 800772c:	920a      	str	r2, [sp, #40]	; 0x28
 800772e:	e5b1      	b.n	8007294 <_vfprintf_r+0x16bc>
 8007730:	2300      	movs	r3, #0
 8007732:	930c      	str	r3, [sp, #48]	; 0x30
 8007734:	930f      	str	r3, [sp, #60]	; 0x3c
 8007736:	e769      	b.n	800760c <_vfprintf_r+0x1a34>
 8007738:	2302      	movs	r3, #2
 800773a:	9316      	str	r3, [sp, #88]	; 0x58
 800773c:	f7ff ba03 	b.w	8006b46 <_vfprintf_r+0xf6e>
 8007740:	9c04      	ldr	r4, [sp, #16]
 8007742:	e6c2      	b.n	80074ca <_vfprintf_r+0x18f2>
 8007744:	4a08      	ldr	r2, [pc, #32]	; (8007768 <_vfprintf_r+0x1b90>)
 8007746:	920a      	str	r2, [sp, #40]	; 0x28
 8007748:	e6f7      	b.n	800753a <_vfprintf_r+0x1962>
 800774a:	ee1a 2a10 	vmov	r2, s20
 800774e:	8993      	ldrh	r3, [r2, #12]
 8007750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007754:	8193      	strh	r3, [r2, #12]
 8007756:	f7fe bb96 	b.w	8005e86 <_vfprintf_r+0x2ae>
 800775a:	bf00      	nop
 800775c:	0800b914 	.word	0x0800b914
 8007760:	0800b90c 	.word	0x0800b90c
 8007764:	0800b910 	.word	0x0800b910
 8007768:	0800b958 	.word	0x0800b958

0800776c <__sbprintf>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	460c      	mov	r4, r1
 8007770:	8989      	ldrh	r1, [r1, #12]
 8007772:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8007776:	f021 0102 	bic.w	r1, r1, #2
 800777a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800777e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007780:	911b      	str	r1, [sp, #108]	; 0x6c
 8007782:	89e1      	ldrh	r1, [r4, #14]
 8007784:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007788:	69e1      	ldr	r1, [r4, #28]
 800778a:	9109      	str	r1, [sp, #36]	; 0x24
 800778c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800778e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007790:	a91c      	add	r1, sp, #112	; 0x70
 8007792:	9102      	str	r1, [sp, #8]
 8007794:	9106      	str	r1, [sp, #24]
 8007796:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800779a:	4606      	mov	r6, r0
 800779c:	9104      	str	r1, [sp, #16]
 800779e:	9107      	str	r1, [sp, #28]
 80077a0:	a818      	add	r0, sp, #96	; 0x60
 80077a2:	2100      	movs	r1, #0
 80077a4:	e9cd 3200 	strd	r3, r2, [sp]
 80077a8:	9108      	str	r1, [sp, #32]
 80077aa:	f7f9 fd3d 	bl	8001228 <__retarget_lock_init_recursive>
 80077ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077b2:	a902      	add	r1, sp, #8
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7fe fa0f 	bl	8005bd8 <_vfprintf_r>
 80077ba:	1e05      	subs	r5, r0, #0
 80077bc:	db07      	blt.n	80077ce <__sbprintf+0x62>
 80077be:	a902      	add	r1, sp, #8
 80077c0:	4630      	mov	r0, r6
 80077c2:	f001 f9d7 	bl	8008b74 <_fflush_r>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	bf18      	it	ne
 80077ca:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80077ce:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80077d2:	065b      	lsls	r3, r3, #25
 80077d4:	d503      	bpl.n	80077de <__sbprintf+0x72>
 80077d6:	89a3      	ldrh	r3, [r4, #12]
 80077d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	9818      	ldr	r0, [sp, #96]	; 0x60
 80077e0:	f7f9 fd24 	bl	800122c <__retarget_lock_close_recursive>
 80077e4:	4628      	mov	r0, r5
 80077e6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80077ea:	bd70      	pop	{r4, r5, r6, pc}

080077ec <_write_r>:
 80077ec:	b538      	push	{r3, r4, r5, lr}
 80077ee:	460c      	mov	r4, r1
 80077f0:	4d08      	ldr	r5, [pc, #32]	; (8007814 <_write_r+0x28>)
 80077f2:	4684      	mov	ip, r0
 80077f4:	4611      	mov	r1, r2
 80077f6:	4620      	mov	r0, r4
 80077f8:	461a      	mov	r2, r3
 80077fa:	2300      	movs	r3, #0
 80077fc:	602b      	str	r3, [r5, #0]
 80077fe:	4664      	mov	r4, ip
 8007800:	f7f9 fe1c 	bl	800143c <_write>
 8007804:	1c43      	adds	r3, r0, #1
 8007806:	d000      	beq.n	800780a <_write_r+0x1e>
 8007808:	bd38      	pop	{r3, r4, r5, pc}
 800780a:	682b      	ldr	r3, [r5, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0fb      	beq.n	8007808 <_write_r+0x1c>
 8007810:	6023      	str	r3, [r4, #0]
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	200014d8 	.word	0x200014d8

08007818 <__swsetup_r>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	4b33      	ldr	r3, [pc, #204]	; (80078e8 <__swsetup_r+0xd0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4605      	mov	r5, r0
 8007820:	460c      	mov	r4, r1
 8007822:	b10b      	cbz	r3, 8007828 <__swsetup_r+0x10>
 8007824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007826:	b312      	cbz	r2, 800786e <__swsetup_r+0x56>
 8007828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782c:	0718      	lsls	r0, r3, #28
 800782e:	b29a      	uxth	r2, r3
 8007830:	d525      	bpl.n	800787e <__swsetup_r+0x66>
 8007832:	6921      	ldr	r1, [r4, #16]
 8007834:	2900      	cmp	r1, #0
 8007836:	d02d      	beq.n	8007894 <__swsetup_r+0x7c>
 8007838:	f012 0001 	ands.w	r0, r2, #1
 800783c:	d007      	beq.n	800784e <__swsetup_r+0x36>
 800783e:	2000      	movs	r0, #0
 8007840:	60a0      	str	r0, [r4, #8]
 8007842:	6960      	ldr	r0, [r4, #20]
 8007844:	4240      	negs	r0, r0
 8007846:	61a0      	str	r0, [r4, #24]
 8007848:	b139      	cbz	r1, 800785a <__swsetup_r+0x42>
 800784a:	2000      	movs	r0, #0
 800784c:	bd38      	pop	{r3, r4, r5, pc}
 800784e:	0795      	lsls	r5, r2, #30
 8007850:	bf58      	it	pl
 8007852:	6960      	ldrpl	r0, [r4, #20]
 8007854:	60a0      	str	r0, [r4, #8]
 8007856:	2900      	cmp	r1, #0
 8007858:	d1f7      	bne.n	800784a <__swsetup_r+0x32>
 800785a:	0612      	lsls	r2, r2, #24
 800785c:	bf58      	it	pl
 800785e:	4608      	movpl	r0, r1
 8007860:	d5f4      	bpl.n	800784c <__swsetup_r+0x34>
 8007862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007866:	81a3      	strh	r3, [r4, #12]
 8007868:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800786c:	bd38      	pop	{r3, r4, r5, pc}
 800786e:	4618      	mov	r0, r3
 8007870:	f7fd fdc2 	bl	80053f8 <__sinit>
 8007874:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007878:	0718      	lsls	r0, r3, #28
 800787a:	b29a      	uxth	r2, r3
 800787c:	d4d9      	bmi.n	8007832 <__swsetup_r+0x1a>
 800787e:	06d1      	lsls	r1, r2, #27
 8007880:	d52a      	bpl.n	80078d8 <__swsetup_r+0xc0>
 8007882:	0752      	lsls	r2, r2, #29
 8007884:	d414      	bmi.n	80078b0 <__swsetup_r+0x98>
 8007886:	6921      	ldr	r1, [r4, #16]
 8007888:	f043 0308 	orr.w	r3, r3, #8
 800788c:	81a3      	strh	r3, [r4, #12]
 800788e:	b29a      	uxth	r2, r3
 8007890:	2900      	cmp	r1, #0
 8007892:	d1d1      	bne.n	8007838 <__swsetup_r+0x20>
 8007894:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8007898:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800789c:	d0cc      	beq.n	8007838 <__swsetup_r+0x20>
 800789e:	4621      	mov	r1, r4
 80078a0:	4628      	mov	r0, r5
 80078a2:	f001 fb05 	bl	8008eb0 <__smakebuf_r>
 80078a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078aa:	6921      	ldr	r1, [r4, #16]
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	e7c3      	b.n	8007838 <__swsetup_r+0x20>
 80078b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80078b2:	b151      	cbz	r1, 80078ca <__swsetup_r+0xb2>
 80078b4:	f104 0240 	add.w	r2, r4, #64	; 0x40
 80078b8:	4291      	cmp	r1, r2
 80078ba:	d004      	beq.n	80078c6 <__swsetup_r+0xae>
 80078bc:	4628      	mov	r0, r5
 80078be:	f001 f9d7 	bl	8008c70 <_free_r>
 80078c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	6322      	str	r2, [r4, #48]	; 0x30
 80078ca:	6921      	ldr	r1, [r4, #16]
 80078cc:	2200      	movs	r2, #0
 80078ce:	e9c4 1200 	strd	r1, r2, [r4]
 80078d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078d6:	e7d7      	b.n	8007888 <__swsetup_r+0x70>
 80078d8:	2209      	movs	r2, #9
 80078da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078de:	602a      	str	r2, [r5, #0]
 80078e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078e4:	81a3      	strh	r3, [r4, #12]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	20000000 	.word	0x20000000

080078ec <_close_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4d07      	ldr	r5, [pc, #28]	; (800790c <_close_r+0x20>)
 80078f0:	2200      	movs	r2, #0
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	602a      	str	r2, [r5, #0]
 80078f8:	f7f9 fdfe 	bl	80014f8 <_close>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d000      	beq.n	8007902 <_close_r+0x16>
 8007900:	bd38      	pop	{r3, r4, r5, pc}
 8007902:	682b      	ldr	r3, [r5, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d0fb      	beq.n	8007900 <_close_r+0x14>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	200014d8 	.word	0x200014d8

08007910 <quorem>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	6903      	ldr	r3, [r0, #16]
 8007916:	690c      	ldr	r4, [r1, #16]
 8007918:	42a3      	cmp	r3, r4
 800791a:	b083      	sub	sp, #12
 800791c:	f2c0 8087 	blt.w	8007a2e <quorem+0x11e>
 8007920:	3c01      	subs	r4, #1
 8007922:	f101 0514 	add.w	r5, r1, #20
 8007926:	00a3      	lsls	r3, r4, #2
 8007928:	f100 0814 	add.w	r8, r0, #20
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007932:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8007936:	3301      	adds	r3, #1
 8007938:	4681      	mov	r9, r0
 800793a:	429a      	cmp	r2, r3
 800793c:	eb08 0084 	add.w	r0, r8, r4, lsl #2
 8007940:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 8007944:	9001      	str	r0, [sp, #4]
 8007946:	fbb2 f6f3 	udiv	r6, r2, r3
 800794a:	d33b      	bcc.n	80079c4 <quorem+0xb4>
 800794c:	2300      	movs	r3, #0
 800794e:	46ae      	mov	lr, r5
 8007950:	4640      	mov	r0, r8
 8007952:	469b      	mov	fp, r3
 8007954:	f85e ab04 	ldr.w	sl, [lr], #4
 8007958:	6802      	ldr	r2, [r0, #0]
 800795a:	fa1f fc8a 	uxth.w	ip, sl
 800795e:	fb06 330c 	mla	r3, r6, ip, r3
 8007962:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8007966:	ea4f 4a1a 	mov.w	sl, sl, lsr #16
 800796a:	fb06 ca0a 	mla	sl, r6, sl, ip
 800796e:	fa1f fc83 	uxth.w	ip, r3
 8007972:	ebab 0c0c 	sub.w	ip, fp, ip
 8007976:	fa1f f38a 	uxth.w	r3, sl
 800797a:	fa1c fc82 	uxtah	ip, ip, r2
 800797e:	ebc3 4212 	rsb	r2, r3, r2, lsr #16
 8007982:	eb02 422c 	add.w	r2, r2, ip, asr #16
 8007986:	fa1f fc8c 	uxth.w	ip, ip
 800798a:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
 800798e:	4577      	cmp	r7, lr
 8007990:	f840 3b04 	str.w	r3, [r0], #4
 8007994:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007998:	ea4f 431a 	mov.w	r3, sl, lsr #16
 800799c:	d2da      	bcs.n	8007954 <quorem+0x44>
 800799e:	9b00      	ldr	r3, [sp, #0]
 80079a0:	f858 3003 	ldr.w	r3, [r8, r3]
 80079a4:	b973      	cbnz	r3, 80079c4 <quorem+0xb4>
 80079a6:	9b01      	ldr	r3, [sp, #4]
 80079a8:	3b04      	subs	r3, #4
 80079aa:	4598      	cmp	r8, r3
 80079ac:	d304      	bcc.n	80079b8 <quorem+0xa8>
 80079ae:	e007      	b.n	80079c0 <quorem+0xb0>
 80079b0:	4598      	cmp	r8, r3
 80079b2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80079b6:	d203      	bcs.n	80079c0 <quorem+0xb0>
 80079b8:	f853 2904 	ldr.w	r2, [r3], #-4
 80079bc:	2a00      	cmp	r2, #0
 80079be:	d0f7      	beq.n	80079b0 <quorem+0xa0>
 80079c0:	f8c9 4010 	str.w	r4, [r9, #16]
 80079c4:	4648      	mov	r0, r9
 80079c6:	f001 fd69 	bl	800949c <__mcmp>
 80079ca:	2800      	cmp	r0, #0
 80079cc:	db2b      	blt.n	8007a26 <quorem+0x116>
 80079ce:	3601      	adds	r6, #1
 80079d0:	4640      	mov	r0, r8
 80079d2:	2300      	movs	r3, #0
 80079d4:	f855 1b04 	ldr.w	r1, [r5], #4
 80079d8:	f8d0 c000 	ldr.w	ip, [r0]
 80079dc:	b28a      	uxth	r2, r1
 80079de:	1a9a      	subs	r2, r3, r2
 80079e0:	0c0b      	lsrs	r3, r1, #16
 80079e2:	fa12 f28c 	uxtah	r2, r2, ip
 80079e6:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
 80079ea:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80079ee:	b292      	uxth	r2, r2
 80079f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079f4:	42af      	cmp	r7, r5
 80079f6:	f840 2b04 	str.w	r2, [r0], #4
 80079fa:	ea4f 4323 	mov.w	r3, r3, asr #16
 80079fe:	d2e9      	bcs.n	80079d4 <quorem+0xc4>
 8007a00:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 8007a04:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8007a08:	b96a      	cbnz	r2, 8007a26 <quorem+0x116>
 8007a0a:	3b04      	subs	r3, #4
 8007a0c:	4598      	cmp	r8, r3
 8007a0e:	d304      	bcc.n	8007a1a <quorem+0x10a>
 8007a10:	e007      	b.n	8007a22 <quorem+0x112>
 8007a12:	4598      	cmp	r8, r3
 8007a14:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8007a18:	d203      	bcs.n	8007a22 <quorem+0x112>
 8007a1a:	f853 2904 	ldr.w	r2, [r3], #-4
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	d0f7      	beq.n	8007a12 <quorem+0x102>
 8007a22:	f8c9 4010 	str.w	r4, [r9, #16]
 8007a26:	4630      	mov	r0, r6
 8007a28:	b003      	add	sp, #12
 8007a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2e:	2000      	movs	r0, #0
 8007a30:	b003      	add	sp, #12
 8007a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a36:	bf00      	nop

08007a38 <_dtoa_r>:
 8007a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3c:	ed2d 8b06 	vpush	{d8-d10}
 8007a40:	b095      	sub	sp, #84	; 0x54
 8007a42:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a46:	9101      	str	r1, [sp, #4]
 8007a48:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007a4a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8007a4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a4e:	ec59 8b10 	vmov	r8, r9, d0
 8007a52:	4604      	mov	r4, r0
 8007a54:	9306      	str	r3, [sp, #24]
 8007a56:	b141      	cbz	r1, 8007a6a <_dtoa_r+0x32>
 8007a58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a5a:	604a      	str	r2, [r1, #4]
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4093      	lsls	r3, r2
 8007a60:	608b      	str	r3, [r1, #8]
 8007a62:	f001 fabb 	bl	8008fdc <_Bfree>
 8007a66:	2300      	movs	r3, #0
 8007a68:	6423      	str	r3, [r4, #64]	; 0x40
 8007a6a:	f1b9 0a00 	subs.w	sl, r9, #0
 8007a6e:	bfb4      	ite	lt
 8007a70:	2301      	movlt	r3, #1
 8007a72:	2300      	movge	r3, #0
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	4b7c      	ldr	r3, [pc, #496]	; (8007c68 <_dtoa_r+0x230>)
 8007a78:	bfbc      	itt	lt
 8007a7a:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
 8007a7e:	f8cd a00c 	strlt.w	sl, [sp, #12]
 8007a82:	ea33 030a 	bics.w	r3, r3, sl
 8007a86:	f000 80b2 	beq.w	8007bee <_dtoa_r+0x1b6>
 8007a8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	ec51 0b17 	vmov	r0, r1, d7
 8007a94:	eeb0 9a47 	vmov.f32	s18, s14
 8007a98:	eef0 9a67 	vmov.f32	s19, s15
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	f7f9 fadf 	bl	8001060 <__aeabi_dcmpeq>
 8007aa2:	4607      	mov	r7, r0
 8007aa4:	b180      	cbz	r0, 8007ac8 <_dtoa_r+0x90>
 8007aa6:	9a06      	ldr	r2, [sp, #24]
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	6013      	str	r3, [r2, #0]
 8007aac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 82dc 	beq.w	800806c <_dtoa_r+0x634>
 8007ab4:	486d      	ldr	r0, [pc, #436]	; (8007c6c <_dtoa_r+0x234>)
 8007ab6:	6018      	str	r0, [r3, #0]
 8007ab8:	1e43      	subs	r3, r0, #1
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	9800      	ldr	r0, [sp, #0]
 8007abe:	b015      	add	sp, #84	; 0x54
 8007ac0:	ecbd 8b06 	vpop	{d8-d10}
 8007ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac8:	aa12      	add	r2, sp, #72	; 0x48
 8007aca:	a913      	add	r1, sp, #76	; 0x4c
 8007acc:	4620      	mov	r0, r4
 8007ace:	eeb0 0a49 	vmov.f32	s0, s18
 8007ad2:	eef0 0a69 	vmov.f32	s1, s19
 8007ad6:	f001 fda9 	bl	800962c <__d2b>
 8007ada:	eeb0 8a49 	vmov.f32	s16, s18
 8007ade:	eef0 8a69 	vmov.f32	s17, s19
 8007ae2:	ea5f 561a 	movs.w	r6, sl, lsr #20
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	f040 8099 	bne.w	8007c1e <_dtoa_r+0x1e6>
 8007aec:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
 8007af0:	443e      	add	r6, r7
 8007af2:	f206 4032 	addw	r0, r6, #1074	; 0x432
 8007af6:	2820      	cmp	r0, #32
 8007af8:	f340 83ad 	ble.w	8008256 <_dtoa_r+0x81e>
 8007afc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007b00:	fa0a fa00 	lsl.w	sl, sl, r0
 8007b04:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8007b08:	fa28 f000 	lsr.w	r0, r8, r0
 8007b0c:	ea4a 0000 	orr.w	r0, sl, r0
 8007b10:	f7f8 fcb8 	bl	8000484 <__aeabi_ui2d>
 8007b14:	2301      	movs	r3, #1
 8007b16:	3e01      	subs	r6, #1
 8007b18:	930d      	str	r3, [sp, #52]	; 0x34
 8007b1a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007b1e:	4b54      	ldr	r3, [pc, #336]	; (8007c70 <_dtoa_r+0x238>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	f7f8 fb71 	bl	8000208 <__aeabi_dsub>
 8007b26:	a34a      	add	r3, pc, #296	; (adr r3, 8007c50 <_dtoa_r+0x218>)
 8007b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b2c:	f7f8 fd24 	bl	8000578 <__aeabi_dmul>
 8007b30:	a349      	add	r3, pc, #292	; (adr r3, 8007c58 <_dtoa_r+0x220>)
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f7f8 fb69 	bl	800020c <__adddf3>
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4689      	mov	r9, r1
 8007b40:	f7f8 fcb0 	bl	80004a4 <__aeabi_i2d>
 8007b44:	a346      	add	r3, pc, #280	; (adr r3, 8007c60 <_dtoa_r+0x228>)
 8007b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4a:	f7f8 fd15 	bl	8000578 <__aeabi_dmul>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	4640      	mov	r0, r8
 8007b54:	4649      	mov	r1, r9
 8007b56:	f7f8 fb59 	bl	800020c <__adddf3>
 8007b5a:	4680      	mov	r8, r0
 8007b5c:	4689      	mov	r9, r1
 8007b5e:	f7f8 ff1d 	bl	800099c <__aeabi_d2iz>
 8007b62:	2200      	movs	r2, #0
 8007b64:	4683      	mov	fp, r0
 8007b66:	2300      	movs	r3, #0
 8007b68:	4640      	mov	r0, r8
 8007b6a:	4649      	mov	r1, r9
 8007b6c:	f7f9 fa82 	bl	8001074 <__aeabi_dcmplt>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	f040 826e 	bne.w	8008052 <_dtoa_r+0x61a>
 8007b76:	f1bb 0f16 	cmp.w	fp, #22
 8007b7a:	f200 825d 	bhi.w	8008038 <_dtoa_r+0x600>
 8007b7e:	4b3d      	ldr	r3, [pc, #244]	; (8007c74 <_dtoa_r+0x23c>)
 8007b80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b88:	ec51 0b19 	vmov	r0, r1, d9
 8007b8c:	f7f9 fa72 	bl	8001074 <__aeabi_dcmplt>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d075      	beq.n	8007c80 <_dtoa_r+0x248>
 8007b94:	2300      	movs	r3, #0
 8007b96:	1bbe      	subs	r6, r7, r6
 8007b98:	930c      	str	r3, [sp, #48]	; 0x30
 8007b9a:	1e73      	subs	r3, r6, #1
 8007b9c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007ba0:	9304      	str	r3, [sp, #16]
 8007ba2:	f100 8250 	bmi.w	8008046 <_dtoa_r+0x60e>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	9308      	str	r3, [sp, #32]
 8007baa:	f1bb 0f00 	cmp.w	fp, #0
 8007bae:	da6e      	bge.n	8007c8e <_dtoa_r+0x256>
 8007bb0:	9b08      	ldr	r3, [sp, #32]
 8007bb2:	f8cd b014 	str.w	fp, [sp, #20]
 8007bb6:	eba3 030b 	sub.w	r3, r3, fp
 8007bba:	9308      	str	r3, [sp, #32]
 8007bbc:	f1cb 0300 	rsb	r3, fp, #0
 8007bc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bc2:	9b01      	ldr	r3, [sp, #4]
 8007bc4:	2b09      	cmp	r3, #9
 8007bc6:	f04f 0b00 	mov.w	fp, #0
 8007bca:	d869      	bhi.n	8007ca0 <_dtoa_r+0x268>
 8007bcc:	2b05      	cmp	r3, #5
 8007bce:	f340 8340 	ble.w	8008252 <_dtoa_r+0x81a>
 8007bd2:	3b04      	subs	r3, #4
 8007bd4:	9301      	str	r3, [sp, #4]
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	9b01      	ldr	r3, [sp, #4]
 8007bda:	3b02      	subs	r3, #2
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	f200 869b 	bhi.w	8008918 <_dtoa_r+0xee0>
 8007be2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007be6:	0450      	.short	0x0450
 8007be8:	0445044d 	.word	0x0445044d
 8007bec:	0428      	.short	0x0428
 8007bee:	9a06      	ldr	r2, [sp, #24]
 8007bf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bf4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007bf8:	6013      	str	r3, [r2, #0]
 8007bfa:	ea5a 0308 	orrs.w	r3, sl, r8
 8007bfe:	d11d      	bne.n	8007c3c <_dtoa_r+0x204>
 8007c00:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 867f 	beq.w	8008906 <_dtoa_r+0xece>
 8007c08:	4b1b      	ldr	r3, [pc, #108]	; (8007c78 <_dtoa_r+0x240>)
 8007c0a:	9300      	str	r3, [sp, #0]
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8007c10:	9800      	ldr	r0, [sp, #0]
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	b015      	add	sp, #84	; 0x54
 8007c16:	ecbd 8b06 	vpop	{d8-d10}
 8007c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1e:	ee18 3a90 	vmov	r3, s17
 8007c22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c26:	ec51 0b19 	vmov	r0, r1, d9
 8007c2a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007c2e:	970d      	str	r7, [sp, #52]	; 0x34
 8007c30:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8007c34:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8007c36:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007c3a:	e770      	b.n	8007b1e <_dtoa_r+0xe6>
 8007c3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 83dd 	bne.w	80083fe <_dtoa_r+0x9c6>
 8007c44:	4b0d      	ldr	r3, [pc, #52]	; (8007c7c <_dtoa_r+0x244>)
 8007c46:	9300      	str	r3, [sp, #0]
 8007c48:	e738      	b.n	8007abc <_dtoa_r+0x84>
 8007c4a:	bf00      	nop
 8007c4c:	f3af 8000 	nop.w
 8007c50:	636f4361 	.word	0x636f4361
 8007c54:	3fd287a7 	.word	0x3fd287a7
 8007c58:	8b60c8b3 	.word	0x8b60c8b3
 8007c5c:	3fc68a28 	.word	0x3fc68a28
 8007c60:	509f79fb 	.word	0x509f79fb
 8007c64:	3fd34413 	.word	0x3fd34413
 8007c68:	7ff00000 	.word	0x7ff00000
 8007c6c:	0800b945 	.word	0x0800b945
 8007c70:	3ff80000 	.word	0x3ff80000
 8007c74:	0800bab8 	.word	0x0800bab8
 8007c78:	0800b96c 	.word	0x0800b96c
 8007c7c:	0800b968 	.word	0x0800b968
 8007c80:	1bbe      	subs	r6, r7, r6
 8007c82:	1e73      	subs	r3, r6, #1
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	f100 849c 	bmi.w	80085c2 <_dtoa_r+0xb8a>
 8007c8a:	900c      	str	r0, [sp, #48]	; 0x30
 8007c8c:	9008      	str	r0, [sp, #32]
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	445b      	add	r3, fp
 8007c92:	e9cd 3b04 	strd	r3, fp, [sp, #16]
 8007c96:	2300      	movs	r3, #0
 8007c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c9a:	9b01      	ldr	r3, [sp, #4]
 8007c9c:	2b09      	cmp	r3, #9
 8007c9e:	d995      	bls.n	8007bcc <_dtoa_r+0x194>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2601      	movs	r6, #1
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ca8:	9301      	str	r3, [sp, #4]
 8007caa:	960a      	str	r6, [sp, #40]	; 0x28
 8007cac:	9207      	str	r2, [sp, #28]
 8007cae:	9309      	str	r3, [sp, #36]	; 0x24
 8007cb0:	9b07      	ldr	r3, [sp, #28]
 8007cb2:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	6461      	str	r1, [r4, #68]	; 0x44
 8007cb8:	4620      	mov	r0, r4
 8007cba:	f001 f969 	bl	8008f90 <_Balloc>
 8007cbe:	9000      	str	r0, [sp, #0]
 8007cc0:	2800      	cmp	r0, #0
 8007cc2:	f000 8631 	beq.w	8008928 <_dtoa_r+0xef0>
 8007cc6:	9b00      	ldr	r3, [sp, #0]
 8007cc8:	6423      	str	r3, [r4, #64]	; 0x40
 8007cca:	9b07      	ldr	r3, [sp, #28]
 8007ccc:	2b0e      	cmp	r3, #14
 8007cce:	f200 80f9 	bhi.w	8007ec4 <_dtoa_r+0x48c>
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	f000 80f6 	beq.w	8007ec4 <_dtoa_r+0x48c>
 8007cd8:	9905      	ldr	r1, [sp, #20]
 8007cda:	2900      	cmp	r1, #0
 8007cdc:	f340 8473 	ble.w	80085c6 <_dtoa_r+0xb8e>
 8007ce0:	4bbd      	ldr	r3, [pc, #756]	; (8007fd8 <_dtoa_r+0x5a0>)
 8007ce2:	f001 020f 	and.w	r2, r1, #15
 8007ce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cea:	ea4f 1821 	mov.w	r8, r1, asr #4
 8007cee:	05c9      	lsls	r1, r1, #23
 8007cf0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007cf4:	f140 8405 	bpl.w	8008502 <_dtoa_r+0xaca>
 8007cf8:	4bb8      	ldr	r3, [pc, #736]	; (8007fdc <_dtoa_r+0x5a4>)
 8007cfa:	ec51 0b19 	vmov	r0, r1, d9
 8007cfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d02:	f7f8 fd63 	bl	80007cc <__aeabi_ddiv>
 8007d06:	ec41 0b18 	vmov	d8, r0, r1
 8007d0a:	f008 080f 	and.w	r8, r8, #15
 8007d0e:	f04f 0a03 	mov.w	sl, #3
 8007d12:	f1b8 0f00 	cmp.w	r8, #0
 8007d16:	d013      	beq.n	8007d40 <_dtoa_r+0x308>
 8007d18:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 8007fdc <_dtoa_r+0x5a4>
 8007d1c:	f018 0f01 	tst.w	r8, #1
 8007d20:	d009      	beq.n	8007d36 <_dtoa_r+0x2fe>
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d2a:	f7f8 fc25 	bl	8000578 <__aeabi_dmul>
 8007d2e:	f10a 0a01 	add.w	sl, sl, #1
 8007d32:	4606      	mov	r6, r0
 8007d34:	460f      	mov	r7, r1
 8007d36:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007d3a:	f109 0908 	add.w	r9, r9, #8
 8007d3e:	d1ed      	bne.n	8007d1c <_dtoa_r+0x2e4>
 8007d40:	ec51 0b18 	vmov	r0, r1, d8
 8007d44:	4632      	mov	r2, r6
 8007d46:	463b      	mov	r3, r7
 8007d48:	f7f8 fd40 	bl	80007cc <__aeabi_ddiv>
 8007d4c:	ec41 0b1a 	vmov	d10, r0, r1
 8007d50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d52:	b15b      	cbz	r3, 8007d6c <_dtoa_r+0x334>
 8007d54:	ec57 6b1a 	vmov	r6, r7, d10
 8007d58:	4ba1      	ldr	r3, [pc, #644]	; (8007fe0 <_dtoa_r+0x5a8>)
 8007d5a:	ee1a 0a10 	vmov	r0, s20
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4639      	mov	r1, r7
 8007d62:	f7f9 f987 	bl	8001074 <__aeabi_dcmplt>
 8007d66:	2800      	cmp	r0, #0
 8007d68:	f040 8554 	bne.w	8008814 <_dtoa_r+0xddc>
 8007d6c:	4650      	mov	r0, sl
 8007d6e:	f7f8 fb99 	bl	80004a4 <__aeabi_i2d>
 8007d72:	ec53 2b1a 	vmov	r2, r3, d10
 8007d76:	f7f8 fbff 	bl	8000578 <__aeabi_dmul>
 8007d7a:	4b9a      	ldr	r3, [pc, #616]	; (8007fe4 <_dtoa_r+0x5ac>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f7f8 fa45 	bl	800020c <__adddf3>
 8007d82:	9b07      	ldr	r3, [sp, #28]
 8007d84:	4680      	mov	r8, r0
 8007d86:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 83f5 	beq.w	800857a <_dtoa_r+0xb42>
 8007d90:	9b05      	ldr	r3, [sp, #20]
 8007d92:	9310      	str	r3, [sp, #64]	; 0x40
 8007d94:	9b07      	ldr	r3, [sp, #28]
 8007d96:	930e      	str	r3, [sp, #56]	; 0x38
 8007d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 84c2 	beq.w	8008724 <_dtoa_r+0xcec>
 8007da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007da2:	4b8d      	ldr	r3, [pc, #564]	; (8007fd8 <_dtoa_r+0x5a0>)
 8007da4:	4990      	ldr	r1, [pc, #576]	; (8007fe8 <_dtoa_r+0x5b0>)
 8007da6:	f8dd a000 	ldr.w	sl, [sp]
 8007daa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007db2:	2000      	movs	r0, #0
 8007db4:	f7f8 fd0a 	bl	80007cc <__aeabi_ddiv>
 8007db8:	4642      	mov	r2, r8
 8007dba:	464b      	mov	r3, r9
 8007dbc:	f7f8 fa24 	bl	8000208 <__aeabi_dsub>
 8007dc0:	ec59 8b1a 	vmov	r8, r9, d10
 8007dc4:	ec41 0b18 	vmov	d8, r0, r1
 8007dc8:	4649      	mov	r1, r9
 8007dca:	ee1a 0a10 	vmov	r0, s20
 8007dce:	f7f8 fde5 	bl	800099c <__aeabi_d2iz>
 8007dd2:	4607      	mov	r7, r0
 8007dd4:	f7f8 fb66 	bl	80004a4 <__aeabi_i2d>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	ee1a 0a10 	vmov	r0, s20
 8007de0:	4649      	mov	r1, r9
 8007de2:	f7f8 fa11 	bl	8000208 <__aeabi_dsub>
 8007de6:	3730      	adds	r7, #48	; 0x30
 8007de8:	f80a 7b01 	strb.w	r7, [sl], #1
 8007dec:	ec53 2b18 	vmov	r2, r3, d8
 8007df0:	4606      	mov	r6, r0
 8007df2:	460f      	mov	r7, r1
 8007df4:	f7f9 f93e 	bl	8001074 <__aeabi_dcmplt>
 8007df8:	2800      	cmp	r0, #0
 8007dfa:	f040 8557 	bne.w	80088ac <_dtoa_r+0xe74>
 8007dfe:	f04f 0800 	mov.w	r8, #0
 8007e02:	ee0a 5a10 	vmov	s20, r5
 8007e06:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8007e0a:	4655      	mov	r5, sl
 8007e0c:	ec5b ab18 	vmov	sl, fp, d8
 8007e10:	ee08 4a10 	vmov	s16, r4
 8007e14:	4644      	mov	r4, r8
 8007e16:	e02a      	b.n	8007e6e <_dtoa_r+0x436>
 8007e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e1a:	3401      	adds	r4, #1
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	da4b      	bge.n	8007eb8 <_dtoa_r+0x480>
 8007e20:	4b72      	ldr	r3, [pc, #456]	; (8007fec <_dtoa_r+0x5b4>)
 8007e22:	4650      	mov	r0, sl
 8007e24:	4659      	mov	r1, fp
 8007e26:	2200      	movs	r2, #0
 8007e28:	f7f8 fba6 	bl	8000578 <__aeabi_dmul>
 8007e2c:	4b6f      	ldr	r3, [pc, #444]	; (8007fec <_dtoa_r+0x5b4>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	4682      	mov	sl, r0
 8007e32:	468b      	mov	fp, r1
 8007e34:	4630      	mov	r0, r6
 8007e36:	4639      	mov	r1, r7
 8007e38:	f7f8 fb9e 	bl	8000578 <__aeabi_dmul>
 8007e3c:	4689      	mov	r9, r1
 8007e3e:	4680      	mov	r8, r0
 8007e40:	f7f8 fdac 	bl	800099c <__aeabi_d2iz>
 8007e44:	4607      	mov	r7, r0
 8007e46:	f7f8 fb2d 	bl	80004a4 <__aeabi_i2d>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4640      	mov	r0, r8
 8007e50:	4649      	mov	r1, r9
 8007e52:	f7f8 f9d9 	bl	8000208 <__aeabi_dsub>
 8007e56:	3730      	adds	r7, #48	; 0x30
 8007e58:	f805 7b01 	strb.w	r7, [r5], #1
 8007e5c:	4652      	mov	r2, sl
 8007e5e:	465b      	mov	r3, fp
 8007e60:	4606      	mov	r6, r0
 8007e62:	460f      	mov	r7, r1
 8007e64:	f7f9 f906 	bl	8001074 <__aeabi_dcmplt>
 8007e68:	2800      	cmp	r0, #0
 8007e6a:	f040 851a 	bne.w	80088a2 <_dtoa_r+0xe6a>
 8007e6e:	4632      	mov	r2, r6
 8007e70:	463b      	mov	r3, r7
 8007e72:	495b      	ldr	r1, [pc, #364]	; (8007fe0 <_dtoa_r+0x5a8>)
 8007e74:	2000      	movs	r0, #0
 8007e76:	f7f8 f9c7 	bl	8000208 <__aeabi_dsub>
 8007e7a:	4652      	mov	r2, sl
 8007e7c:	465b      	mov	r3, fp
 8007e7e:	f7f9 f8f9 	bl	8001074 <__aeabi_dcmplt>
 8007e82:	2800      	cmp	r0, #0
 8007e84:	d0c8      	beq.n	8007e18 <_dtoa_r+0x3e0>
 8007e86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e88:	9a00      	ldr	r2, [sp, #0]
 8007e8a:	9305      	str	r3, [sp, #20]
 8007e8c:	46aa      	mov	sl, r5
 8007e8e:	ee18 4a10 	vmov	r4, s16
 8007e92:	ee1a 5a10 	vmov	r5, s20
 8007e96:	e002      	b.n	8007e9e <_dtoa_r+0x466>
 8007e98:	4592      	cmp	sl, r2
 8007e9a:	f000 84ec 	beq.w	8008876 <_dtoa_r+0xe3e>
 8007e9e:	46d1      	mov	r9, sl
 8007ea0:	f81a 3d01 	ldrb.w	r3, [sl, #-1]!
 8007ea4:	2b39      	cmp	r3, #57	; 0x39
 8007ea6:	d0f7      	beq.n	8007e98 <_dtoa_r+0x460>
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	f88a 3000 	strb.w	r3, [sl]
 8007eb0:	9b05      	ldr	r3, [sp, #20]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	9305      	str	r3, [sp, #20]
 8007eb6:	e1ac      	b.n	8008212 <_dtoa_r+0x7da>
 8007eb8:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8007ebc:	ee1a 5a10 	vmov	r5, s20
 8007ec0:	ee18 4a10 	vmov	r4, s16
 8007ec4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f2c0 8094 	blt.w	8007ff4 <_dtoa_r+0x5bc>
 8007ecc:	9a05      	ldr	r2, [sp, #20]
 8007ece:	2a0e      	cmp	r2, #14
 8007ed0:	f300 8090 	bgt.w	8007ff4 <_dtoa_r+0x5bc>
 8007ed4:	4b40      	ldr	r3, [pc, #256]	; (8007fd8 <_dtoa_r+0x5a0>)
 8007ed6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da1b      	bge.n	8007f1c <_dtoa_r+0x4e4>
 8007ee4:	9b07      	ldr	r3, [sp, #28]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	dc18      	bgt.n	8007f1c <_dtoa_r+0x4e4>
 8007eea:	f040 835f 	bne.w	80085ac <_dtoa_r+0xb74>
 8007eee:	4b40      	ldr	r3, [pc, #256]	; (8007ff0 <_dtoa_r+0x5b8>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	4640      	mov	r0, r8
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	f7f8 fb3f 	bl	8000578 <__aeabi_dmul>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	ec51 0b19 	vmov	r0, r1, d9
 8007f02:	f7f9 f8c1 	bl	8001088 <__aeabi_dcmple>
 8007f06:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007f0a:	4656      	mov	r6, sl
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	f000 82d2 	beq.w	80084b6 <_dtoa_r+0xa7e>
 8007f12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f14:	f8dd 8000 	ldr.w	r8, [sp]
 8007f18:	43df      	mvns	r7, r3
 8007f1a:	e2d4      	b.n	80084c6 <_dtoa_r+0xa8e>
 8007f1c:	4642      	mov	r2, r8
 8007f1e:	464b      	mov	r3, r9
 8007f20:	ec51 0b19 	vmov	r0, r1, d9
 8007f24:	f7f8 fc52 	bl	80007cc <__aeabi_ddiv>
 8007f28:	f7f8 fd38 	bl	800099c <__aeabi_d2iz>
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	4683      	mov	fp, r0
 8007f30:	f7f8 fab8 	bl	80004a4 <__aeabi_i2d>
 8007f34:	4642      	mov	r2, r8
 8007f36:	464b      	mov	r3, r9
 8007f38:	f7f8 fb1e 	bl	8000578 <__aeabi_dmul>
 8007f3c:	460b      	mov	r3, r1
 8007f3e:	4602      	mov	r2, r0
 8007f40:	ec51 0b19 	vmov	r0, r1, d9
 8007f44:	f7f8 f960 	bl	8000208 <__aeabi_dsub>
 8007f48:	f8dd a000 	ldr.w	sl, [sp]
 8007f4c:	4633      	mov	r3, r6
 8007f4e:	3330      	adds	r3, #48	; 0x30
 8007f50:	f80a 3b01 	strb.w	r3, [sl], #1
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	f000 8390 	beq.w	800867c <_dtoa_r+0xc44>
 8007f5c:	f04f 0b01 	mov.w	fp, #1
 8007f60:	ee08 5a10 	vmov	s16, r5
 8007f64:	ee08 4a90 	vmov	s17, r4
 8007f68:	461d      	mov	r5, r3
 8007f6a:	4654      	mov	r4, sl
 8007f6c:	46da      	mov	sl, fp
 8007f6e:	e01d      	b.n	8007fac <_dtoa_r+0x574>
 8007f70:	4642      	mov	r2, r8
 8007f72:	464b      	mov	r3, r9
 8007f74:	4630      	mov	r0, r6
 8007f76:	4639      	mov	r1, r7
 8007f78:	f7f8 fc28 	bl	80007cc <__aeabi_ddiv>
 8007f7c:	f7f8 fd0e 	bl	800099c <__aeabi_d2iz>
 8007f80:	4683      	mov	fp, r0
 8007f82:	f7f8 fa8f 	bl	80004a4 <__aeabi_i2d>
 8007f86:	4642      	mov	r2, r8
 8007f88:	464b      	mov	r3, r9
 8007f8a:	f7f8 faf5 	bl	8000578 <__aeabi_dmul>
 8007f8e:	f10a 0a01 	add.w	sl, sl, #1
 8007f92:	460b      	mov	r3, r1
 8007f94:	4602      	mov	r2, r0
 8007f96:	4639      	mov	r1, r7
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7f8 f935 	bl	8000208 <__aeabi_dsub>
 8007f9e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8007fa2:	45aa      	cmp	sl, r5
 8007fa4:	f804 3b01 	strb.w	r3, [r4], #1
 8007fa8:	f000 8363 	beq.w	8008672 <_dtoa_r+0xc3a>
 8007fac:	4b0f      	ldr	r3, [pc, #60]	; (8007fec <_dtoa_r+0x5b4>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f7f8 fae2 	bl	8000578 <__aeabi_dmul>
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	4606      	mov	r6, r0
 8007fba:	460f      	mov	r7, r1
 8007fbc:	f7f9 f850 	bl	8001060 <__aeabi_dcmpeq>
 8007fc0:	2800      	cmp	r0, #0
 8007fc2:	d0d5      	beq.n	8007f70 <_dtoa_r+0x538>
 8007fc4:	46a2      	mov	sl, r4
 8007fc6:	ee18 5a10 	vmov	r5, s16
 8007fca:	ee18 4a90 	vmov	r4, s17
 8007fce:	9b05      	ldr	r3, [sp, #20]
 8007fd0:	3301      	adds	r3, #1
 8007fd2:	9305      	str	r3, [sp, #20]
 8007fd4:	46d1      	mov	r9, sl
 8007fd6:	e11c      	b.n	8008212 <_dtoa_r+0x7da>
 8007fd8:	0800bab8 	.word	0x0800bab8
 8007fdc:	0800ba90 	.word	0x0800ba90
 8007fe0:	3ff00000 	.word	0x3ff00000
 8007fe4:	401c0000 	.word	0x401c0000
 8007fe8:	3fe00000 	.word	0x3fe00000
 8007fec:	40240000 	.word	0x40240000
 8007ff0:	40140000 	.word	0x40140000
 8007ff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ff6:	2a00      	cmp	r2, #0
 8007ff8:	d040      	beq.n	800807c <_dtoa_r+0x644>
 8007ffa:	9a01      	ldr	r2, [sp, #4]
 8007ffc:	2a01      	cmp	r2, #1
 8007ffe:	f340 829e 	ble.w	800853e <_dtoa_r+0xb06>
 8008002:	9b07      	ldr	r3, [sp, #28]
 8008004:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8008008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800800a:	4543      	cmp	r3, r8
 800800c:	f2c0 8270 	blt.w	80084f0 <_dtoa_r+0xab8>
 8008010:	eba3 0808 	sub.w	r8, r3, r8
 8008014:	9b07      	ldr	r3, [sp, #28]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f2c0 8368 	blt.w	80086ec <_dtoa_r+0xcb4>
 800801c:	9a04      	ldr	r2, [sp, #16]
 800801e:	4611      	mov	r1, r2
 8008020:	9a08      	ldr	r2, [sp, #32]
 8008022:	4419      	add	r1, r3
 8008024:	4617      	mov	r7, r2
 8008026:	441a      	add	r2, r3
 8008028:	9104      	str	r1, [sp, #16]
 800802a:	9208      	str	r2, [sp, #32]
 800802c:	2101      	movs	r1, #1
 800802e:	4620      	mov	r0, r4
 8008030:	f001 f882 	bl	8009138 <__i2b>
 8008034:	4606      	mov	r6, r0
 8008036:	e025      	b.n	8008084 <_dtoa_r+0x64c>
 8008038:	2301      	movs	r3, #1
 800803a:	1bbe      	subs	r6, r7, r6
 800803c:	930c      	str	r3, [sp, #48]	; 0x30
 800803e:	1e73      	subs	r3, r6, #1
 8008040:	9304      	str	r3, [sp, #16]
 8008042:	f57f adb0 	bpl.w	8007ba6 <_dtoa_r+0x16e>
 8008046:	f1c6 0301 	rsb	r3, r6, #1
 800804a:	9308      	str	r3, [sp, #32]
 800804c:	2300      	movs	r3, #0
 800804e:	9304      	str	r3, [sp, #16]
 8008050:	e5ab      	b.n	8007baa <_dtoa_r+0x172>
 8008052:	4658      	mov	r0, fp
 8008054:	f7f8 fa26 	bl	80004a4 <__aeabi_i2d>
 8008058:	4642      	mov	r2, r8
 800805a:	464b      	mov	r3, r9
 800805c:	f7f9 f800 	bl	8001060 <__aeabi_dcmpeq>
 8008060:	2800      	cmp	r0, #0
 8008062:	f47f ad88 	bne.w	8007b76 <_dtoa_r+0x13e>
 8008066:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800806a:	e584      	b.n	8007b76 <_dtoa_r+0x13e>
 800806c:	4b87      	ldr	r3, [pc, #540]	; (800828c <_dtoa_r+0x854>)
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	9800      	ldr	r0, [sp, #0]
 8008072:	b015      	add	sp, #84	; 0x54
 8008074:	ecbd 8b06 	vpop	{d8-d10}
 8008078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800807c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008080:	9f08      	ldr	r7, [sp, #32]
 8008082:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008084:	2f00      	cmp	r7, #0
 8008086:	dd0c      	ble.n	80080a2 <_dtoa_r+0x66a>
 8008088:	9a04      	ldr	r2, [sp, #16]
 800808a:	2a00      	cmp	r2, #0
 800808c:	dd09      	ble.n	80080a2 <_dtoa_r+0x66a>
 800808e:	9908      	ldr	r1, [sp, #32]
 8008090:	42ba      	cmp	r2, r7
 8008092:	4613      	mov	r3, r2
 8008094:	bfa8      	it	ge
 8008096:	463b      	movge	r3, r7
 8008098:	1ac9      	subs	r1, r1, r3
 800809a:	1aff      	subs	r7, r7, r3
 800809c:	1ad3      	subs	r3, r2, r3
 800809e:	9108      	str	r1, [sp, #32]
 80080a0:	9304      	str	r3, [sp, #16]
 80080a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080a4:	b1db      	cbz	r3, 80080de <_dtoa_r+0x6a6>
 80080a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 8283 	beq.w	80085b4 <_dtoa_r+0xb7c>
 80080ae:	f1b8 0f00 	cmp.w	r8, #0
 80080b2:	dd0f      	ble.n	80080d4 <_dtoa_r+0x69c>
 80080b4:	4631      	mov	r1, r6
 80080b6:	4642      	mov	r2, r8
 80080b8:	4620      	mov	r0, r4
 80080ba:	f001 f917 	bl	80092ec <__pow5mult>
 80080be:	462a      	mov	r2, r5
 80080c0:	4601      	mov	r1, r0
 80080c2:	4606      	mov	r6, r0
 80080c4:	4620      	mov	r0, r4
 80080c6:	f001 f865 	bl	8009194 <__multiply>
 80080ca:	4629      	mov	r1, r5
 80080cc:	4605      	mov	r5, r0
 80080ce:	4620      	mov	r0, r4
 80080d0:	f000 ff84 	bl	8008fdc <_Bfree>
 80080d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080d6:	ebb3 0208 	subs.w	r2, r3, r8
 80080da:	f040 8301 	bne.w	80086e0 <_dtoa_r+0xca8>
 80080de:	2101      	movs	r1, #1
 80080e0:	4620      	mov	r0, r4
 80080e2:	f001 f829 	bl	8009138 <__i2b>
 80080e6:	f1bb 0f00 	cmp.w	fp, #0
 80080ea:	4682      	mov	sl, r0
 80080ec:	f300 80b8 	bgt.w	8008260 <_dtoa_r+0x828>
 80080f0:	9b01      	ldr	r3, [sp, #4]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	f340 8187 	ble.w	8008406 <_dtoa_r+0x9ce>
 80080f8:	f04f 0800 	mov.w	r8, #0
 80080fc:	2001      	movs	r0, #1
 80080fe:	f1bb 0f00 	cmp.w	fp, #0
 8008102:	f040 80b9 	bne.w	8008278 <_dtoa_r+0x840>
 8008106:	9a04      	ldr	r2, [sp, #16]
 8008108:	4410      	add	r0, r2
 800810a:	f010 001f 	ands.w	r0, r0, #31
 800810e:	f000 8097 	beq.w	8008240 <_dtoa_r+0x808>
 8008112:	f1c0 0320 	rsb	r3, r0, #32
 8008116:	2b04      	cmp	r3, #4
 8008118:	f340 83f9 	ble.w	800890e <_dtoa_r+0xed6>
 800811c:	9b08      	ldr	r3, [sp, #32]
 800811e:	f1c0 001c 	rsb	r0, r0, #28
 8008122:	4403      	add	r3, r0
 8008124:	4402      	add	r2, r0
 8008126:	9308      	str	r3, [sp, #32]
 8008128:	4407      	add	r7, r0
 800812a:	9204      	str	r2, [sp, #16]
 800812c:	9b08      	ldr	r3, [sp, #32]
 800812e:	2b00      	cmp	r3, #0
 8008130:	dd05      	ble.n	800813e <_dtoa_r+0x706>
 8008132:	4629      	mov	r1, r5
 8008134:	461a      	mov	r2, r3
 8008136:	4620      	mov	r0, r4
 8008138:	f001 f938 	bl	80093ac <__lshift>
 800813c:	4605      	mov	r5, r0
 800813e:	9b04      	ldr	r3, [sp, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	dd05      	ble.n	8008150 <_dtoa_r+0x718>
 8008144:	4651      	mov	r1, sl
 8008146:	461a      	mov	r2, r3
 8008148:	4620      	mov	r0, r4
 800814a:	f001 f92f 	bl	80093ac <__lshift>
 800814e:	4682      	mov	sl, r0
 8008150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008152:	2b00      	cmp	r3, #0
 8008154:	f040 8138 	bne.w	80083c8 <_dtoa_r+0x990>
 8008158:	9b07      	ldr	r3, [sp, #28]
 800815a:	2b00      	cmp	r3, #0
 800815c:	f340 811f 	ble.w	800839e <_dtoa_r+0x966>
 8008160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008162:	2b00      	cmp	r3, #0
 8008164:	f040 80a2 	bne.w	80082ac <_dtoa_r+0x874>
 8008168:	9b05      	ldr	r3, [sp, #20]
 800816a:	3301      	adds	r3, #1
 800816c:	9305      	str	r3, [sp, #20]
 800816e:	f8dd 8000 	ldr.w	r8, [sp]
 8008172:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008176:	2701      	movs	r7, #1
 8008178:	e007      	b.n	800818a <_dtoa_r+0x752>
 800817a:	4629      	mov	r1, r5
 800817c:	2300      	movs	r3, #0
 800817e:	220a      	movs	r2, #10
 8008180:	4620      	mov	r0, r4
 8008182:	f000 ff35 	bl	8008ff0 <__multadd>
 8008186:	3701      	adds	r7, #1
 8008188:	4605      	mov	r5, r0
 800818a:	4651      	mov	r1, sl
 800818c:	4628      	mov	r0, r5
 800818e:	f7ff fbbf 	bl	8007910 <quorem>
 8008192:	454f      	cmp	r7, r9
 8008194:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8008198:	f808 0b01 	strb.w	r0, [r8], #1
 800819c:	dbed      	blt.n	800817a <_dtoa_r+0x742>
 800819e:	9a07      	ldr	r2, [sp, #28]
 80081a0:	2a00      	cmp	r2, #0
 80081a2:	bfc8      	it	gt
 80081a4:	4693      	movgt	fp, r2
 80081a6:	9a00      	ldr	r2, [sp, #0]
 80081a8:	bfd8      	it	le
 80081aa:	f04f 0b01 	movle.w	fp, #1
 80081ae:	4603      	mov	r3, r0
 80081b0:	4493      	add	fp, r2
 80081b2:	2700      	movs	r7, #0
 80081b4:	4629      	mov	r1, r5
 80081b6:	2201      	movs	r2, #1
 80081b8:	4620      	mov	r0, r4
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	f001 f8f6 	bl	80093ac <__lshift>
 80081c0:	4651      	mov	r1, sl
 80081c2:	4605      	mov	r5, r0
 80081c4:	f001 f96a 	bl	800949c <__mcmp>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	f340 81a6 	ble.w	800851a <_dtoa_r+0xae2>
 80081ce:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 80081d2:	9a00      	ldr	r2, [sp, #0]
 80081d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80081d8:	e004      	b.n	80081e4 <_dtoa_r+0x7ac>
 80081da:	455a      	cmp	r2, fp
 80081dc:	f000 81a8 	beq.w	8008530 <_dtoa_r+0xaf8>
 80081e0:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 80081e4:	2b39      	cmp	r3, #57	; 0x39
 80081e6:	f10b 0901 	add.w	r9, fp, #1
 80081ea:	d0f6      	beq.n	80081da <_dtoa_r+0x7a2>
 80081ec:	3301      	adds	r3, #1
 80081ee:	f88b 3000 	strb.w	r3, [fp]
 80081f2:	4651      	mov	r1, sl
 80081f4:	4620      	mov	r0, r4
 80081f6:	f000 fef1 	bl	8008fdc <_Bfree>
 80081fa:	b156      	cbz	r6, 8008212 <_dtoa_r+0x7da>
 80081fc:	b12f      	cbz	r7, 800820a <_dtoa_r+0x7d2>
 80081fe:	42b7      	cmp	r7, r6
 8008200:	d003      	beq.n	800820a <_dtoa_r+0x7d2>
 8008202:	4639      	mov	r1, r7
 8008204:	4620      	mov	r0, r4
 8008206:	f000 fee9 	bl	8008fdc <_Bfree>
 800820a:	4631      	mov	r1, r6
 800820c:	4620      	mov	r0, r4
 800820e:	f000 fee5 	bl	8008fdc <_Bfree>
 8008212:	4629      	mov	r1, r5
 8008214:	4620      	mov	r0, r4
 8008216:	f000 fee1 	bl	8008fdc <_Bfree>
 800821a:	2300      	movs	r3, #0
 800821c:	f889 3000 	strb.w	r3, [r9]
 8008220:	9b06      	ldr	r3, [sp, #24]
 8008222:	461a      	mov	r2, r3
 8008224:	9b05      	ldr	r3, [sp, #20]
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800822a:	2b00      	cmp	r3, #0
 800822c:	f43f ac46 	beq.w	8007abc <_dtoa_r+0x84>
 8008230:	9800      	ldr	r0, [sp, #0]
 8008232:	f8c3 9000 	str.w	r9, [r3]
 8008236:	b015      	add	sp, #84	; 0x54
 8008238:	ecbd 8b06 	vpop	{d8-d10}
 800823c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008240:	201c      	movs	r0, #28
 8008242:	9b08      	ldr	r3, [sp, #32]
 8008244:	4403      	add	r3, r0
 8008246:	9308      	str	r3, [sp, #32]
 8008248:	9b04      	ldr	r3, [sp, #16]
 800824a:	4403      	add	r3, r0
 800824c:	4407      	add	r7, r0
 800824e:	9304      	str	r3, [sp, #16]
 8008250:	e76c      	b.n	800812c <_dtoa_r+0x6f4>
 8008252:	2601      	movs	r6, #1
 8008254:	e4c0      	b.n	8007bd8 <_dtoa_r+0x1a0>
 8008256:	f1c0 0020 	rsb	r0, r0, #32
 800825a:	fa08 f000 	lsl.w	r0, r8, r0
 800825e:	e457      	b.n	8007b10 <_dtoa_r+0xd8>
 8008260:	4601      	mov	r1, r0
 8008262:	465a      	mov	r2, fp
 8008264:	4620      	mov	r0, r4
 8008266:	f001 f841 	bl	80092ec <__pow5mult>
 800826a:	9b01      	ldr	r3, [sp, #4]
 800826c:	2b01      	cmp	r3, #1
 800826e:	4682      	mov	sl, r0
 8008270:	f340 81d5 	ble.w	800861e <_dtoa_r+0xbe6>
 8008274:	f04f 0800 	mov.w	r8, #0
 8008278:	f8da 3010 	ldr.w	r3, [sl, #16]
 800827c:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 8008280:	6918      	ldr	r0, [r3, #16]
 8008282:	f000 ff09 	bl	8009098 <__hi0bits>
 8008286:	f1c0 0020 	rsb	r0, r0, #32
 800828a:	e73c      	b.n	8008106 <_dtoa_r+0x6ce>
 800828c:	0800b944 	.word	0x0800b944
 8008290:	4631      	mov	r1, r6
 8008292:	2300      	movs	r3, #0
 8008294:	220a      	movs	r2, #10
 8008296:	4620      	mov	r0, r4
 8008298:	f000 feaa 	bl	8008ff0 <__multadd>
 800829c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800829e:	2b00      	cmp	r3, #0
 80082a0:	4606      	mov	r6, r0
 80082a2:	f340 8323 	ble.w	80088ec <_dtoa_r+0xeb4>
 80082a6:	f8cd 9014 	str.w	r9, [sp, #20]
 80082aa:	9307      	str	r3, [sp, #28]
 80082ac:	2f00      	cmp	r7, #0
 80082ae:	f300 8118 	bgt.w	80084e2 <_dtoa_r+0xaaa>
 80082b2:	f1b8 0f00 	cmp.w	r8, #0
 80082b6:	f040 81fc 	bne.w	80086b2 <_dtoa_r+0xc7a>
 80082ba:	46b0      	mov	r8, r6
 80082bc:	9b02      	ldr	r3, [sp, #8]
 80082be:	9f00      	ldr	r7, [sp, #0]
 80082c0:	9907      	ldr	r1, [sp, #28]
 80082c2:	f003 0201 	and.w	r2, r3, #1
 80082c6:	1e7b      	subs	r3, r7, #1
 80082c8:	4419      	add	r1, r3
 80082ca:	9b01      	ldr	r3, [sp, #4]
 80082cc:	920a      	str	r2, [sp, #40]	; 0x28
 80082ce:	4313      	orrs	r3, r2
 80082d0:	9108      	str	r1, [sp, #32]
 80082d2:	9309      	str	r3, [sp, #36]	; 0x24
 80082d4:	4651      	mov	r1, sl
 80082d6:	4628      	mov	r0, r5
 80082d8:	f7ff fb1a 	bl	8007910 <quorem>
 80082dc:	4631      	mov	r1, r6
 80082de:	4683      	mov	fp, r0
 80082e0:	4628      	mov	r0, r5
 80082e2:	f001 f8db 	bl	800949c <__mcmp>
 80082e6:	4642      	mov	r2, r8
 80082e8:	4651      	mov	r1, sl
 80082ea:	4681      	mov	r9, r0
 80082ec:	4620      	mov	r0, r4
 80082ee:	f001 f8f7 	bl	80094e0 <__mdiff>
 80082f2:	68c2      	ldr	r2, [r0, #12]
 80082f4:	4601      	mov	r1, r0
 80082f6:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 80082fa:	2a00      	cmp	r2, #0
 80082fc:	d142      	bne.n	8008384 <_dtoa_r+0x94c>
 80082fe:	9004      	str	r0, [sp, #16]
 8008300:	4628      	mov	r0, r5
 8008302:	9307      	str	r3, [sp, #28]
 8008304:	f001 f8ca 	bl	800949c <__mcmp>
 8008308:	9904      	ldr	r1, [sp, #16]
 800830a:	9002      	str	r0, [sp, #8]
 800830c:	4620      	mov	r0, r4
 800830e:	f000 fe65 	bl	8008fdc <_Bfree>
 8008312:	9a02      	ldr	r2, [sp, #8]
 8008314:	9b07      	ldr	r3, [sp, #28]
 8008316:	b91a      	cbnz	r2, 8008320 <_dtoa_r+0x8e8>
 8008318:	9909      	ldr	r1, [sp, #36]	; 0x24
 800831a:	2900      	cmp	r1, #0
 800831c:	f000 82d6 	beq.w	80088cc <_dtoa_r+0xe94>
 8008320:	f1b9 0f00 	cmp.w	r9, #0
 8008324:	f2c0 8187 	blt.w	8008636 <_dtoa_r+0xbfe>
 8008328:	9901      	ldr	r1, [sp, #4]
 800832a:	ea49 0901 	orr.w	r9, r9, r1
 800832e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008330:	ea51 0109 	orrs.w	r1, r1, r9
 8008334:	f000 817f 	beq.w	8008636 <_dtoa_r+0xbfe>
 8008338:	2a00      	cmp	r2, #0
 800833a:	f300 81e7 	bgt.w	800870c <_dtoa_r+0xcd4>
 800833e:	9a08      	ldr	r2, [sp, #32]
 8008340:	703b      	strb	r3, [r7, #0]
 8008342:	f107 0901 	add.w	r9, r7, #1
 8008346:	4297      	cmp	r7, r2
 8008348:	46cb      	mov	fp, r9
 800834a:	f000 81e5 	beq.w	8008718 <_dtoa_r+0xce0>
 800834e:	4629      	mov	r1, r5
 8008350:	2300      	movs	r3, #0
 8008352:	220a      	movs	r2, #10
 8008354:	4620      	mov	r0, r4
 8008356:	f000 fe4b 	bl	8008ff0 <__multadd>
 800835a:	4546      	cmp	r6, r8
 800835c:	4605      	mov	r5, r0
 800835e:	4631      	mov	r1, r6
 8008360:	f04f 0300 	mov.w	r3, #0
 8008364:	f04f 020a 	mov.w	r2, #10
 8008368:	4620      	mov	r0, r4
 800836a:	d012      	beq.n	8008392 <_dtoa_r+0x95a>
 800836c:	f000 fe40 	bl	8008ff0 <__multadd>
 8008370:	4641      	mov	r1, r8
 8008372:	4606      	mov	r6, r0
 8008374:	2300      	movs	r3, #0
 8008376:	220a      	movs	r2, #10
 8008378:	4620      	mov	r0, r4
 800837a:	f000 fe39 	bl	8008ff0 <__multadd>
 800837e:	464f      	mov	r7, r9
 8008380:	4680      	mov	r8, r0
 8008382:	e7a7      	b.n	80082d4 <_dtoa_r+0x89c>
 8008384:	4620      	mov	r0, r4
 8008386:	9302      	str	r3, [sp, #8]
 8008388:	f000 fe28 	bl	8008fdc <_Bfree>
 800838c:	9b02      	ldr	r3, [sp, #8]
 800838e:	2201      	movs	r2, #1
 8008390:	e7c6      	b.n	8008320 <_dtoa_r+0x8e8>
 8008392:	f000 fe2d 	bl	8008ff0 <__multadd>
 8008396:	464f      	mov	r7, r9
 8008398:	4606      	mov	r6, r0
 800839a:	4680      	mov	r8, r0
 800839c:	e79a      	b.n	80082d4 <_dtoa_r+0x89c>
 800839e:	9b01      	ldr	r3, [sp, #4]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	dc77      	bgt.n	8008494 <_dtoa_r+0xa5c>
 80083a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d180      	bne.n	80082ac <_dtoa_r+0x874>
 80083aa:	9b05      	ldr	r3, [sp, #20]
 80083ac:	4651      	mov	r1, sl
 80083ae:	3301      	adds	r3, #1
 80083b0:	4628      	mov	r0, r5
 80083b2:	9305      	str	r3, [sp, #20]
 80083b4:	f7ff faac 	bl	8007910 <quorem>
 80083b8:	f8dd b000 	ldr.w	fp, [sp]
 80083bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80083c0:	f80b 3b01 	strb.w	r3, [fp], #1
 80083c4:	2700      	movs	r7, #0
 80083c6:	e6f5      	b.n	80081b4 <_dtoa_r+0x77c>
 80083c8:	4651      	mov	r1, sl
 80083ca:	4628      	mov	r0, r5
 80083cc:	f001 f866 	bl	800949c <__mcmp>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	f6bf aec1 	bge.w	8008158 <_dtoa_r+0x720>
 80083d6:	4629      	mov	r1, r5
 80083d8:	2300      	movs	r3, #0
 80083da:	220a      	movs	r2, #10
 80083dc:	4620      	mov	r0, r4
 80083de:	f000 fe07 	bl	8008ff0 <__multadd>
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	4605      	mov	r5, r0
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f47f af4f 	bne.w	8008290 <_dtoa_r+0x858>
 80083f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f340 8270 	ble.w	80088da <_dtoa_r+0xea2>
 80083fa:	9307      	str	r3, [sp, #28]
 80083fc:	e6b7      	b.n	800816e <_dtoa_r+0x736>
 80083fe:	4bbd      	ldr	r3, [pc, #756]	; (80086f4 <_dtoa_r+0xcbc>)
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	3303      	adds	r3, #3
 8008404:	e403      	b.n	8007c0e <_dtoa_r+0x1d6>
 8008406:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800840a:	2900      	cmp	r1, #0
 800840c:	f47f ae74 	bne.w	80080f8 <_dtoa_r+0x6c0>
 8008410:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8008414:	2b00      	cmp	r3, #0
 8008416:	f47f ae6f 	bne.w	80080f8 <_dtoa_r+0x6c0>
 800841a:	4bb7      	ldr	r3, [pc, #732]	; (80086f8 <_dtoa_r+0xcc0>)
 800841c:	4013      	ands	r3, r2
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 823d 	beq.w	800889e <_dtoa_r+0xe66>
 8008424:	9b08      	ldr	r3, [sp, #32]
 8008426:	3301      	adds	r3, #1
 8008428:	9308      	str	r3, [sp, #32]
 800842a:	9b04      	ldr	r3, [sp, #16]
 800842c:	3301      	adds	r3, #1
 800842e:	9304      	str	r3, [sp, #16]
 8008430:	f04f 0801 	mov.w	r8, #1
 8008434:	e662      	b.n	80080fc <_dtoa_r+0x6c4>
 8008436:	2301      	movs	r3, #1
 8008438:	930a      	str	r3, [sp, #40]	; 0x28
 800843a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800843c:	9a05      	ldr	r2, [sp, #20]
 800843e:	4413      	add	r3, r2
 8008440:	930f      	str	r3, [sp, #60]	; 0x3c
 8008442:	3301      	adds	r3, #1
 8008444:	2b01      	cmp	r3, #1
 8008446:	461f      	mov	r7, r3
 8008448:	9307      	str	r3, [sp, #28]
 800844a:	bfb8      	it	lt
 800844c:	2701      	movlt	r7, #1
 800844e:	2100      	movs	r1, #0
 8008450:	2f17      	cmp	r7, #23
 8008452:	6461      	str	r1, [r4, #68]	; 0x44
 8008454:	f77f ac30 	ble.w	8007cb8 <_dtoa_r+0x280>
 8008458:	2201      	movs	r2, #1
 800845a:	2304      	movs	r3, #4
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	f103 0014 	add.w	r0, r3, #20
 8008462:	42b8      	cmp	r0, r7
 8008464:	4611      	mov	r1, r2
 8008466:	f102 0201 	add.w	r2, r2, #1
 800846a:	d9f7      	bls.n	800845c <_dtoa_r+0xa24>
 800846c:	6461      	str	r1, [r4, #68]	; 0x44
 800846e:	e423      	b.n	8007cb8 <_dtoa_r+0x280>
 8008470:	2301      	movs	r3, #1
 8008472:	930a      	str	r3, [sp, #40]	; 0x28
 8008474:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008476:	2f00      	cmp	r7, #0
 8008478:	dd4a      	ble.n	8008510 <_dtoa_r+0xad8>
 800847a:	970f      	str	r7, [sp, #60]	; 0x3c
 800847c:	9707      	str	r7, [sp, #28]
 800847e:	e7e6      	b.n	800844e <_dtoa_r+0xa16>
 8008480:	2300      	movs	r3, #0
 8008482:	930a      	str	r3, [sp, #40]	; 0x28
 8008484:	e7d9      	b.n	800843a <_dtoa_r+0xa02>
 8008486:	2300      	movs	r3, #0
 8008488:	930a      	str	r3, [sp, #40]	; 0x28
 800848a:	e7f3      	b.n	8008474 <_dtoa_r+0xa3c>
 800848c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800848e:	f8cd 9014 	str.w	r9, [sp, #20]
 8008492:	9307      	str	r3, [sp, #28]
 8008494:	9b07      	ldr	r3, [sp, #28]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f47f ad3b 	bne.w	8007f12 <_dtoa_r+0x4da>
 800849c:	4651      	mov	r1, sl
 800849e:	2205      	movs	r2, #5
 80084a0:	4620      	mov	r0, r4
 80084a2:	f000 fda5 	bl	8008ff0 <__multadd>
 80084a6:	4601      	mov	r1, r0
 80084a8:	4682      	mov	sl, r0
 80084aa:	4628      	mov	r0, r5
 80084ac:	f000 fff6 	bl	800949c <__mcmp>
 80084b0:	2800      	cmp	r0, #0
 80084b2:	f77f ad2e 	ble.w	8007f12 <_dtoa_r+0x4da>
 80084b6:	9800      	ldr	r0, [sp, #0]
 80084b8:	9f05      	ldr	r7, [sp, #20]
 80084ba:	2331      	movs	r3, #49	; 0x31
 80084bc:	4680      	mov	r8, r0
 80084be:	f800 3b01 	strb.w	r3, [r0], #1
 80084c2:	3701      	adds	r7, #1
 80084c4:	9000      	str	r0, [sp, #0]
 80084c6:	4651      	mov	r1, sl
 80084c8:	4620      	mov	r0, r4
 80084ca:	f000 fd87 	bl	8008fdc <_Bfree>
 80084ce:	1c7b      	adds	r3, r7, #1
 80084d0:	f8dd 9000 	ldr.w	r9, [sp]
 80084d4:	9305      	str	r3, [sp, #20]
 80084d6:	f8cd 8000 	str.w	r8, [sp]
 80084da:	2e00      	cmp	r6, #0
 80084dc:	f47f ae95 	bne.w	800820a <_dtoa_r+0x7d2>
 80084e0:	e697      	b.n	8008212 <_dtoa_r+0x7da>
 80084e2:	4631      	mov	r1, r6
 80084e4:	463a      	mov	r2, r7
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 ff60 	bl	80093ac <__lshift>
 80084ec:	4606      	mov	r6, r0
 80084ee:	e6e0      	b.n	80082b2 <_dtoa_r+0x87a>
 80084f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084f2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80084f6:	eba8 0303 	sub.w	r3, r8, r3
 80084fa:	449b      	add	fp, r3
 80084fc:	f04f 0800 	mov.w	r8, #0
 8008500:	e588      	b.n	8008014 <_dtoa_r+0x5dc>
 8008502:	f04f 0a02 	mov.w	sl, #2
 8008506:	eeb0 8a49 	vmov.f32	s16, s18
 800850a:	eef0 8a69 	vmov.f32	s17, s19
 800850e:	e400      	b.n	8007d12 <_dtoa_r+0x2da>
 8008510:	2301      	movs	r3, #1
 8008512:	9309      	str	r3, [sp, #36]	; 0x24
 8008514:	9307      	str	r3, [sp, #28]
 8008516:	f7ff bbcb 	b.w	8007cb0 <_dtoa_r+0x278>
 800851a:	d103      	bne.n	8008524 <_dtoa_r+0xaec>
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	07db      	lsls	r3, r3, #31
 8008520:	f53f ae55 	bmi.w	80081ce <_dtoa_r+0x796>
 8008524:	46d9      	mov	r9, fp
 8008526:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 800852a:	2b30      	cmp	r3, #48	; 0x30
 800852c:	d0fa      	beq.n	8008524 <_dtoa_r+0xaec>
 800852e:	e660      	b.n	80081f2 <_dtoa_r+0x7ba>
 8008530:	9b05      	ldr	r3, [sp, #20]
 8008532:	9a00      	ldr	r2, [sp, #0]
 8008534:	3301      	adds	r3, #1
 8008536:	9305      	str	r3, [sp, #20]
 8008538:	2331      	movs	r3, #49	; 0x31
 800853a:	7013      	strb	r3, [r2, #0]
 800853c:	e659      	b.n	80081f2 <_dtoa_r+0x7ba>
 800853e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008540:	2a00      	cmp	r2, #0
 8008542:	f000 8163 	beq.w	800880c <_dtoa_r+0xdd4>
 8008546:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800854a:	9a04      	ldr	r2, [sp, #16]
 800854c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8008550:	441a      	add	r2, r3
 8008552:	9204      	str	r2, [sp, #16]
 8008554:	9a08      	ldr	r2, [sp, #32]
 8008556:	4617      	mov	r7, r2
 8008558:	441a      	add	r2, r3
 800855a:	9208      	str	r2, [sp, #32]
 800855c:	e566      	b.n	800802c <_dtoa_r+0x5f4>
 800855e:	4650      	mov	r0, sl
 8008560:	f7f7 ffa0 	bl	80004a4 <__aeabi_i2d>
 8008564:	ec53 2b1a 	vmov	r2, r3, d10
 8008568:	f7f8 f806 	bl	8000578 <__aeabi_dmul>
 800856c:	4b63      	ldr	r3, [pc, #396]	; (80086fc <_dtoa_r+0xcc4>)
 800856e:	2200      	movs	r2, #0
 8008570:	f7f7 fe4c 	bl	800020c <__adddf3>
 8008574:	4680      	mov	r8, r0
 8008576:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800857a:	4b61      	ldr	r3, [pc, #388]	; (8008700 <_dtoa_r+0xcc8>)
 800857c:	2200      	movs	r2, #0
 800857e:	ec51 0b1a 	vmov	r0, r1, d10
 8008582:	f7f7 fe41 	bl	8000208 <__aeabi_dsub>
 8008586:	4642      	mov	r2, r8
 8008588:	464b      	mov	r3, r9
 800858a:	4606      	mov	r6, r0
 800858c:	460f      	mov	r7, r1
 800858e:	f7f8 fd8f 	bl	80010b0 <__aeabi_dcmpgt>
 8008592:	2800      	cmp	r0, #0
 8008594:	f040 817f 	bne.w	8008896 <_dtoa_r+0xe5e>
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	4642      	mov	r2, r8
 800859e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80085a2:	f7f8 fd67 	bl	8001074 <__aeabi_dcmplt>
 80085a6:	2800      	cmp	r0, #0
 80085a8:	f43f ac8c 	beq.w	8007ec4 <_dtoa_r+0x48c>
 80085ac:	f04f 0a00 	mov.w	sl, #0
 80085b0:	4656      	mov	r6, sl
 80085b2:	e4ae      	b.n	8007f12 <_dtoa_r+0x4da>
 80085b4:	4629      	mov	r1, r5
 80085b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 fe97 	bl	80092ec <__pow5mult>
 80085be:	4605      	mov	r5, r0
 80085c0:	e58d      	b.n	80080de <_dtoa_r+0x6a6>
 80085c2:	900c      	str	r0, [sp, #48]	; 0x30
 80085c4:	e53f      	b.n	8008046 <_dtoa_r+0x60e>
 80085c6:	f000 814e 	beq.w	8008866 <_dtoa_r+0xe2e>
 80085ca:	9a05      	ldr	r2, [sp, #20]
 80085cc:	4b4d      	ldr	r3, [pc, #308]	; (8008704 <_dtoa_r+0xccc>)
 80085ce:	4256      	negs	r6, r2
 80085d0:	f006 020f 	and.w	r2, r6, #15
 80085d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085dc:	ec51 0b19 	vmov	r0, r1, d9
 80085e0:	f7f7 ffca 	bl	8000578 <__aeabi_dmul>
 80085e4:	1136      	asrs	r6, r6, #4
 80085e6:	ec41 0b1a 	vmov	d10, r0, r1
 80085ea:	f000 8188 	beq.w	80088fe <_dtoa_r+0xec6>
 80085ee:	4f46      	ldr	r7, [pc, #280]	; (8008708 <_dtoa_r+0xcd0>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	f04f 0a02 	mov.w	sl, #2
 80085f6:	07f2      	lsls	r2, r6, #31
 80085f8:	d506      	bpl.n	8008608 <_dtoa_r+0xbd0>
 80085fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085fe:	f7f7 ffbb 	bl	8000578 <__aeabi_dmul>
 8008602:	f10a 0a01 	add.w	sl, sl, #1
 8008606:	2301      	movs	r3, #1
 8008608:	1076      	asrs	r6, r6, #1
 800860a:	f107 0708 	add.w	r7, r7, #8
 800860e:	d1f2      	bne.n	80085f6 <_dtoa_r+0xbbe>
 8008610:	2b00      	cmp	r3, #0
 8008612:	f43f ab9d 	beq.w	8007d50 <_dtoa_r+0x318>
 8008616:	ec41 0b1a 	vmov	d10, r0, r1
 800861a:	f7ff bb99 	b.w	8007d50 <_dtoa_r+0x318>
 800861e:	9b02      	ldr	r3, [sp, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	f47f ae27 	bne.w	8008274 <_dtoa_r+0x83c>
 8008626:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800862a:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800862e:	2b00      	cmp	r3, #0
 8008630:	f43f aef3 	beq.w	800841a <_dtoa_r+0x9e2>
 8008634:	e61e      	b.n	8008274 <_dtoa_r+0x83c>
 8008636:	2a00      	cmp	r2, #0
 8008638:	dd12      	ble.n	8008660 <_dtoa_r+0xc28>
 800863a:	4629      	mov	r1, r5
 800863c:	2201      	movs	r2, #1
 800863e:	4620      	mov	r0, r4
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	f000 feb3 	bl	80093ac <__lshift>
 8008646:	4651      	mov	r1, sl
 8008648:	4605      	mov	r5, r0
 800864a:	f000 ff27 	bl	800949c <__mcmp>
 800864e:	2800      	cmp	r0, #0
 8008650:	9b01      	ldr	r3, [sp, #4]
 8008652:	f340 8135 	ble.w	80088c0 <_dtoa_r+0xe88>
 8008656:	2b39      	cmp	r3, #57	; 0x39
 8008658:	f000 8113 	beq.w	8008882 <_dtoa_r+0xe4a>
 800865c:	f10b 0331 	add.w	r3, fp, #49	; 0x31
 8008660:	46b9      	mov	r9, r7
 8008662:	f809 3b01 	strb.w	r3, [r9], #1
 8008666:	9b05      	ldr	r3, [sp, #20]
 8008668:	3301      	adds	r3, #1
 800866a:	4637      	mov	r7, r6
 800866c:	9305      	str	r3, [sp, #20]
 800866e:	4646      	mov	r6, r8
 8008670:	e5bf      	b.n	80081f2 <_dtoa_r+0x7ba>
 8008672:	46a2      	mov	sl, r4
 8008674:	ee18 5a10 	vmov	r5, s16
 8008678:	ee18 4a90 	vmov	r4, s17
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	f7f7 fdc4 	bl	800020c <__adddf3>
 8008684:	4642      	mov	r2, r8
 8008686:	464b      	mov	r3, r9
 8008688:	4606      	mov	r6, r0
 800868a:	460f      	mov	r7, r1
 800868c:	f7f8 fd10 	bl	80010b0 <__aeabi_dcmpgt>
 8008690:	b960      	cbnz	r0, 80086ac <_dtoa_r+0xc74>
 8008692:	4642      	mov	r2, r8
 8008694:	464b      	mov	r3, r9
 8008696:	4630      	mov	r0, r6
 8008698:	4639      	mov	r1, r7
 800869a:	f7f8 fce1 	bl	8001060 <__aeabi_dcmpeq>
 800869e:	2800      	cmp	r0, #0
 80086a0:	f43f ac95 	beq.w	8007fce <_dtoa_r+0x596>
 80086a4:	ea5f 71cb 	movs.w	r1, fp, lsl #31
 80086a8:	f57f ac91 	bpl.w	8007fce <_dtoa_r+0x596>
 80086ac:	9a00      	ldr	r2, [sp, #0]
 80086ae:	f7ff bbf6 	b.w	8007e9e <_dtoa_r+0x466>
 80086b2:	6871      	ldr	r1, [r6, #4]
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 fc6b 	bl	8008f90 <_Balloc>
 80086ba:	4607      	mov	r7, r0
 80086bc:	2800      	cmp	r0, #0
 80086be:	f000 813a 	beq.w	8008936 <_dtoa_r+0xefe>
 80086c2:	6933      	ldr	r3, [r6, #16]
 80086c4:	3302      	adds	r3, #2
 80086c6:	009a      	lsls	r2, r3, #2
 80086c8:	f106 010c 	add.w	r1, r6, #12
 80086cc:	300c      	adds	r0, #12
 80086ce:	f7f8 fbd7 	bl	8000e80 <memcpy>
 80086d2:	4639      	mov	r1, r7
 80086d4:	2201      	movs	r2, #1
 80086d6:	4620      	mov	r0, r4
 80086d8:	f000 fe68 	bl	80093ac <__lshift>
 80086dc:	4680      	mov	r8, r0
 80086de:	e5ed      	b.n	80082bc <_dtoa_r+0x884>
 80086e0:	4629      	mov	r1, r5
 80086e2:	4620      	mov	r0, r4
 80086e4:	f000 fe02 	bl	80092ec <__pow5mult>
 80086e8:	4605      	mov	r5, r0
 80086ea:	e4f8      	b.n	80080de <_dtoa_r+0x6a6>
 80086ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80086f0:	1a9f      	subs	r7, r3, r2
 80086f2:	e49b      	b.n	800802c <_dtoa_r+0x5f4>
 80086f4:	0800b968 	.word	0x0800b968
 80086f8:	7ff00000 	.word	0x7ff00000
 80086fc:	401c0000 	.word	0x401c0000
 8008700:	40140000 	.word	0x40140000
 8008704:	0800bab8 	.word	0x0800bab8
 8008708:	0800ba90 	.word	0x0800ba90
 800870c:	2b39      	cmp	r3, #57	; 0x39
 800870e:	f000 80b8 	beq.w	8008882 <_dtoa_r+0xe4a>
 8008712:	46b9      	mov	r9, r7
 8008714:	3301      	adds	r3, #1
 8008716:	e7a4      	b.n	8008662 <_dtoa_r+0xc2a>
 8008718:	9a05      	ldr	r2, [sp, #20]
 800871a:	3201      	adds	r2, #1
 800871c:	4637      	mov	r7, r6
 800871e:	9205      	str	r2, [sp, #20]
 8008720:	4646      	mov	r6, r8
 8008722:	e547      	b.n	80081b4 <_dtoa_r+0x77c>
 8008724:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008726:	498d      	ldr	r1, [pc, #564]	; (800895c <_dtoa_r+0xf24>)
 8008728:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800872c:	4642      	mov	r2, r8
 800872e:	464b      	mov	r3, r9
 8008730:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 8008734:	f7f7 ff20 	bl	8000578 <__aeabi_dmul>
 8008738:	ec5a 9b1a 	vmov	r9, sl, d10
 800873c:	ec41 0b18 	vmov	d8, r0, r1
 8008740:	4651      	mov	r1, sl
 8008742:	ee1a 0a10 	vmov	r0, s20
 8008746:	f7f8 f929 	bl	800099c <__aeabi_d2iz>
 800874a:	4607      	mov	r7, r0
 800874c:	f7f7 feaa 	bl	80004a4 <__aeabi_i2d>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	ee1a 0a10 	vmov	r0, s20
 8008758:	4651      	mov	r1, sl
 800875a:	f7f7 fd55 	bl	8000208 <__aeabi_dsub>
 800875e:	4606      	mov	r6, r0
 8008760:	980e      	ldr	r0, [sp, #56]	; 0x38
 8008762:	f8dd 8000 	ldr.w	r8, [sp]
 8008766:	3730      	adds	r7, #48	; 0x30
 8008768:	2801      	cmp	r0, #1
 800876a:	f808 7b01 	strb.w	r7, [r8], #1
 800876e:	460f      	mov	r7, r1
 8008770:	f000 80ba 	beq.w	80088e8 <_dtoa_r+0xeb0>
 8008774:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008776:	9a00      	ldr	r2, [sp, #0]
 8008778:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800877c:	4413      	add	r3, r2
 800877e:	469b      	mov	fp, r3
 8008780:	46c2      	mov	sl, r8
 8008782:	4b77      	ldr	r3, [pc, #476]	; (8008960 <_dtoa_r+0xf28>)
 8008784:	2200      	movs	r2, #0
 8008786:	4630      	mov	r0, r6
 8008788:	4639      	mov	r1, r7
 800878a:	f7f7 fef5 	bl	8000578 <__aeabi_dmul>
 800878e:	4689      	mov	r9, r1
 8008790:	4680      	mov	r8, r0
 8008792:	f7f8 f903 	bl	800099c <__aeabi_d2iz>
 8008796:	4607      	mov	r7, r0
 8008798:	f7f7 fe84 	bl	80004a4 <__aeabi_i2d>
 800879c:	3730      	adds	r7, #48	; 0x30
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4640      	mov	r0, r8
 80087a4:	4649      	mov	r1, r9
 80087a6:	f7f7 fd2f 	bl	8000208 <__aeabi_dsub>
 80087aa:	f80a 7b01 	strb.w	r7, [sl], #1
 80087ae:	45da      	cmp	sl, fp
 80087b0:	4606      	mov	r6, r0
 80087b2:	460f      	mov	r7, r1
 80087b4:	d1e5      	bne.n	8008782 <_dtoa_r+0xd4a>
 80087b6:	46da      	mov	sl, fp
 80087b8:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80087bc:	4b69      	ldr	r3, [pc, #420]	; (8008964 <_dtoa_r+0xf2c>)
 80087be:	ec59 8b18 	vmov	r8, r9, d8
 80087c2:	2200      	movs	r2, #0
 80087c4:	ee18 0a10 	vmov	r0, s16
 80087c8:	4649      	mov	r1, r9
 80087ca:	f7f7 fd1f 	bl	800020c <__adddf3>
 80087ce:	4632      	mov	r2, r6
 80087d0:	463b      	mov	r3, r7
 80087d2:	f7f8 fc4f 	bl	8001074 <__aeabi_dcmplt>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d16d      	bne.n	80088b6 <_dtoa_r+0xe7e>
 80087da:	ee18 2a10 	vmov	r2, s16
 80087de:	464b      	mov	r3, r9
 80087e0:	4960      	ldr	r1, [pc, #384]	; (8008964 <_dtoa_r+0xf2c>)
 80087e2:	2000      	movs	r0, #0
 80087e4:	f7f7 fd10 	bl	8000208 <__aeabi_dsub>
 80087e8:	4632      	mov	r2, r6
 80087ea:	463b      	mov	r3, r7
 80087ec:	f7f8 fc60 	bl	80010b0 <__aeabi_dcmpgt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	f43f ab67 	beq.w	8007ec4 <_dtoa_r+0x48c>
 80087f6:	46d1      	mov	r9, sl
 80087f8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80087fc:	f819 3c01 	ldrb.w	r3, [r9, #-1]
 8008800:	2b30      	cmp	r3, #48	; 0x30
 8008802:	d0f8      	beq.n	80087f6 <_dtoa_r+0xdbe>
 8008804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008806:	3301      	adds	r3, #1
 8008808:	9305      	str	r3, [sp, #20]
 800880a:	e502      	b.n	8008212 <_dtoa_r+0x7da>
 800880c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800880e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008812:	e69a      	b.n	800854a <_dtoa_r+0xb12>
 8008814:	9b07      	ldr	r3, [sp, #28]
 8008816:	2b00      	cmp	r3, #0
 8008818:	f43f aea1 	beq.w	800855e <_dtoa_r+0xb26>
 800881c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800881e:	2b00      	cmp	r3, #0
 8008820:	f77f ab50 	ble.w	8007ec4 <_dtoa_r+0x48c>
 8008824:	9a05      	ldr	r2, [sp, #20]
 8008826:	930e      	str	r3, [sp, #56]	; 0x38
 8008828:	3a01      	subs	r2, #1
 800882a:	4b4d      	ldr	r3, [pc, #308]	; (8008960 <_dtoa_r+0xf28>)
 800882c:	9210      	str	r2, [sp, #64]	; 0x40
 800882e:	ee1a 0a10 	vmov	r0, s20
 8008832:	4639      	mov	r1, r7
 8008834:	2200      	movs	r2, #0
 8008836:	f7f7 fe9f 	bl	8000578 <__aeabi_dmul>
 800883a:	4602      	mov	r2, r0
 800883c:	4616      	mov	r6, r2
 800883e:	460f      	mov	r7, r1
 8008840:	f10a 0001 	add.w	r0, sl, #1
 8008844:	f7f7 fe2e 	bl	80004a4 <__aeabi_i2d>
 8008848:	4632      	mov	r2, r6
 800884a:	463b      	mov	r3, r7
 800884c:	f7f7 fe94 	bl	8000578 <__aeabi_dmul>
 8008850:	4b45      	ldr	r3, [pc, #276]	; (8008968 <_dtoa_r+0xf30>)
 8008852:	2200      	movs	r2, #0
 8008854:	f7f7 fcda 	bl	800020c <__adddf3>
 8008858:	ec47 6b1a 	vmov	d10, r6, r7
 800885c:	4680      	mov	r8, r0
 800885e:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8008862:	f7ff ba99 	b.w	8007d98 <_dtoa_r+0x360>
 8008866:	f04f 0a02 	mov.w	sl, #2
 800886a:	eeb0 aa49 	vmov.f32	s20, s18
 800886e:	eef0 aa69 	vmov.f32	s21, s19
 8008872:	f7ff ba6d 	b.w	8007d50 <_dtoa_r+0x318>
 8008876:	9b05      	ldr	r3, [sp, #20]
 8008878:	3301      	adds	r3, #1
 800887a:	9305      	str	r3, [sp, #20]
 800887c:	2331      	movs	r3, #49	; 0x31
 800887e:	f7ff bb15 	b.w	8007eac <_dtoa_r+0x474>
 8008882:	9b05      	ldr	r3, [sp, #20]
 8008884:	46bb      	mov	fp, r7
 8008886:	3301      	adds	r3, #1
 8008888:	9305      	str	r3, [sp, #20]
 800888a:	2339      	movs	r3, #57	; 0x39
 800888c:	4637      	mov	r7, r6
 800888e:	f80b 3b01 	strb.w	r3, [fp], #1
 8008892:	4646      	mov	r6, r8
 8008894:	e49d      	b.n	80081d2 <_dtoa_r+0x79a>
 8008896:	f04f 0a00 	mov.w	sl, #0
 800889a:	4656      	mov	r6, sl
 800889c:	e60b      	b.n	80084b6 <_dtoa_r+0xa7e>
 800889e:	4698      	mov	r8, r3
 80088a0:	e42c      	b.n	80080fc <_dtoa_r+0x6c4>
 80088a2:	46aa      	mov	sl, r5
 80088a4:	ee18 4a10 	vmov	r4, s16
 80088a8:	ee1a 5a10 	vmov	r5, s20
 80088ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088ae:	3301      	adds	r3, #1
 80088b0:	9305      	str	r3, [sp, #20]
 80088b2:	46d1      	mov	r9, sl
 80088b4:	e4ad      	b.n	8008212 <_dtoa_r+0x7da>
 80088b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80088b8:	9a00      	ldr	r2, [sp, #0]
 80088ba:	9305      	str	r3, [sp, #20]
 80088bc:	f7ff baef 	b.w	8007e9e <_dtoa_r+0x466>
 80088c0:	f47f aece 	bne.w	8008660 <_dtoa_r+0xc28>
 80088c4:	07da      	lsls	r2, r3, #31
 80088c6:	f57f aecb 	bpl.w	8008660 <_dtoa_r+0xc28>
 80088ca:	e6c4      	b.n	8008656 <_dtoa_r+0xc1e>
 80088cc:	2b39      	cmp	r3, #57	; 0x39
 80088ce:	d0d8      	beq.n	8008882 <_dtoa_r+0xe4a>
 80088d0:	f1b9 0f00 	cmp.w	r9, #0
 80088d4:	f73f aec2 	bgt.w	800865c <_dtoa_r+0xc24>
 80088d8:	e6c2      	b.n	8008660 <_dtoa_r+0xc28>
 80088da:	9b01      	ldr	r3, [sp, #4]
 80088dc:	2b02      	cmp	r3, #2
 80088de:	f73f add5 	bgt.w	800848c <_dtoa_r+0xa54>
 80088e2:	f8cd 9014 	str.w	r9, [sp, #20]
 80088e6:	e560      	b.n	80083aa <_dtoa_r+0x972>
 80088e8:	46c2      	mov	sl, r8
 80088ea:	e767      	b.n	80087bc <_dtoa_r+0xd84>
 80088ec:	9b01      	ldr	r3, [sp, #4]
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	f73f adcc 	bgt.w	800848c <_dtoa_r+0xa54>
 80088f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088f6:	f8cd 9014 	str.w	r9, [sp, #20]
 80088fa:	9307      	str	r3, [sp, #28]
 80088fc:	e4d6      	b.n	80082ac <_dtoa_r+0x874>
 80088fe:	f04f 0a02 	mov.w	sl, #2
 8008902:	f7ff ba25 	b.w	8007d50 <_dtoa_r+0x318>
 8008906:	4b19      	ldr	r3, [pc, #100]	; (800896c <_dtoa_r+0xf34>)
 8008908:	9300      	str	r3, [sp, #0]
 800890a:	f7ff b8d7 	b.w	8007abc <_dtoa_r+0x84>
 800890e:	f43f ac0d 	beq.w	800812c <_dtoa_r+0x6f4>
 8008912:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8008916:	e494      	b.n	8008242 <_dtoa_r+0x80a>
 8008918:	2600      	movs	r6, #0
 800891a:	6466      	str	r6, [r4, #68]	; 0x44
 800891c:	4631      	mov	r1, r6
 800891e:	4620      	mov	r0, r4
 8008920:	f000 fb36 	bl	8008f90 <_Balloc>
 8008924:	9000      	str	r0, [sp, #0]
 8008926:	b968      	cbnz	r0, 8008944 <_dtoa_r+0xf0c>
 8008928:	4b11      	ldr	r3, [pc, #68]	; (8008970 <_dtoa_r+0xf38>)
 800892a:	4812      	ldr	r0, [pc, #72]	; (8008974 <_dtoa_r+0xf3c>)
 800892c:	2200      	movs	r2, #0
 800892e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008932:	f001 fee3 	bl	800a6fc <__assert_func>
 8008936:	4b0e      	ldr	r3, [pc, #56]	; (8008970 <_dtoa_r+0xf38>)
 8008938:	480e      	ldr	r0, [pc, #56]	; (8008974 <_dtoa_r+0xf3c>)
 800893a:	463a      	mov	r2, r7
 800893c:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008940:	f001 fedc 	bl	800a6fc <__assert_func>
 8008944:	9b00      	ldr	r3, [sp, #0]
 8008946:	6423      	str	r3, [r4, #64]	; 0x40
 8008948:	2201      	movs	r2, #1
 800894a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800894e:	9609      	str	r6, [sp, #36]	; 0x24
 8008950:	930f      	str	r3, [sp, #60]	; 0x3c
 8008952:	920a      	str	r2, [sp, #40]	; 0x28
 8008954:	9307      	str	r3, [sp, #28]
 8008956:	f7ff bab5 	b.w	8007ec4 <_dtoa_r+0x48c>
 800895a:	bf00      	nop
 800895c:	0800bab8 	.word	0x0800bab8
 8008960:	40240000 	.word	0x40240000
 8008964:	3fe00000 	.word	0x3fe00000
 8008968:	401c0000 	.word	0x401c0000
 800896c:	0800b96c 	.word	0x0800b96c
 8008970:	0800b978 	.word	0x0800b978
 8008974:	0800b98c 	.word	0x0800b98c

08008978 <_fclose_r>:
 8008978:	b570      	push	{r4, r5, r6, lr}
 800897a:	2900      	cmp	r1, #0
 800897c:	d04b      	beq.n	8008a16 <_fclose_r+0x9e>
 800897e:	4606      	mov	r6, r0
 8008980:	460c      	mov	r4, r1
 8008982:	b110      	cbz	r0, 800898a <_fclose_r+0x12>
 8008984:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008986:	2b00      	cmp	r3, #0
 8008988:	d048      	beq.n	8008a1c <_fclose_r+0xa4>
 800898a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800898c:	07d8      	lsls	r0, r3, #31
 800898e:	d534      	bpl.n	80089fa <_fclose_r+0x82>
 8008990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d03e      	beq.n	8008a16 <_fclose_r+0x9e>
 8008998:	4621      	mov	r1, r4
 800899a:	4630      	mov	r0, r6
 800899c:	f000 f852 	bl	8008a44 <__sflush_r>
 80089a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80089a2:	4605      	mov	r5, r0
 80089a4:	b133      	cbz	r3, 80089b4 <_fclose_r+0x3c>
 80089a6:	69e1      	ldr	r1, [r4, #28]
 80089a8:	4630      	mov	r0, r6
 80089aa:	4798      	blx	r3
 80089ac:	2800      	cmp	r0, #0
 80089ae:	bfb8      	it	lt
 80089b0:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 80089b4:	89a3      	ldrh	r3, [r4, #12]
 80089b6:	061a      	lsls	r2, r3, #24
 80089b8:	d43b      	bmi.n	8008a32 <_fclose_r+0xba>
 80089ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80089bc:	b141      	cbz	r1, 80089d0 <_fclose_r+0x58>
 80089be:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80089c2:	4299      	cmp	r1, r3
 80089c4:	d002      	beq.n	80089cc <_fclose_r+0x54>
 80089c6:	4630      	mov	r0, r6
 80089c8:	f000 f952 	bl	8008c70 <_free_r>
 80089cc:	2300      	movs	r3, #0
 80089ce:	6323      	str	r3, [r4, #48]	; 0x30
 80089d0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80089d2:	b121      	cbz	r1, 80089de <_fclose_r+0x66>
 80089d4:	4630      	mov	r0, r6
 80089d6:	f000 f94b 	bl	8008c70 <_free_r>
 80089da:	2300      	movs	r3, #0
 80089dc:	6463      	str	r3, [r4, #68]	; 0x44
 80089de:	f7fc fd91 	bl	8005504 <__sfp_lock_acquire>
 80089e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089e4:	2200      	movs	r2, #0
 80089e6:	07db      	lsls	r3, r3, #31
 80089e8:	81a2      	strh	r2, [r4, #12]
 80089ea:	d527      	bpl.n	8008a3c <_fclose_r+0xc4>
 80089ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089ee:	f7f8 fc1d 	bl	800122c <__retarget_lock_close_recursive>
 80089f2:	f7fc fd8d 	bl	8005510 <__sfp_lock_release>
 80089f6:	4628      	mov	r0, r5
 80089f8:	bd70      	pop	{r4, r5, r6, pc}
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	0599      	lsls	r1, r3, #22
 80089fe:	d4cb      	bmi.n	8008998 <_fclose_r+0x20>
 8008a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a02:	f7f8 fc15 	bl	8001230 <__retarget_lock_acquire_recursive>
 8008a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d1c4      	bne.n	8008998 <_fclose_r+0x20>
 8008a0e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008a10:	f015 0501 	ands.w	r5, r5, #1
 8008a14:	d008      	beq.n	8008a28 <_fclose_r+0xb0>
 8008a16:	2500      	movs	r5, #0
 8008a18:	4628      	mov	r0, r5
 8008a1a:	bd70      	pop	{r4, r5, r6, pc}
 8008a1c:	f7fc fcec 	bl	80053f8 <__sinit>
 8008a20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a22:	07d8      	lsls	r0, r3, #31
 8008a24:	d4b4      	bmi.n	8008990 <_fclose_r+0x18>
 8008a26:	e7e8      	b.n	80089fa <_fclose_r+0x82>
 8008a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a2a:	f7f8 fc03 	bl	8001234 <__retarget_lock_release_recursive>
 8008a2e:	4628      	mov	r0, r5
 8008a30:	bd70      	pop	{r4, r5, r6, pc}
 8008a32:	6921      	ldr	r1, [r4, #16]
 8008a34:	4630      	mov	r0, r6
 8008a36:	f000 f91b 	bl	8008c70 <_free_r>
 8008a3a:	e7be      	b.n	80089ba <_fclose_r+0x42>
 8008a3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a3e:	f7f8 fbf9 	bl	8001234 <__retarget_lock_release_recursive>
 8008a42:	e7d3      	b.n	80089ec <_fclose_r+0x74>

08008a44 <__sflush_r>:
 8008a44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4c:	460c      	mov	r4, r1
 8008a4e:	0711      	lsls	r1, r2, #28
 8008a50:	4680      	mov	r8, r0
 8008a52:	d447      	bmi.n	8008ae4 <__sflush_r+0xa0>
 8008a54:	6863      	ldr	r3, [r4, #4]
 8008a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	81a2      	strh	r2, [r4, #12]
 8008a5e:	dd5e      	ble.n	8008b1e <__sflush_r+0xda>
 8008a60:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008a62:	2d00      	cmp	r5, #0
 8008a64:	d058      	beq.n	8008b18 <__sflush_r+0xd4>
 8008a66:	2300      	movs	r3, #0
 8008a68:	f8d8 6000 	ldr.w	r6, [r8]
 8008a6c:	f8c8 3000 	str.w	r3, [r8]
 8008a70:	b293      	uxth	r3, r2
 8008a72:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a76:	d156      	bne.n	8008b26 <__sflush_r+0xe2>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	69e1      	ldr	r1, [r4, #28]
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	47a8      	blx	r5
 8008a80:	1c43      	adds	r3, r0, #1
 8008a82:	d067      	beq.n	8008b54 <__sflush_r+0x110>
 8008a84:	89a3      	ldrh	r3, [r4, #12]
 8008a86:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8008a88:	075f      	lsls	r7, r3, #29
 8008a8a:	d505      	bpl.n	8008a98 <__sflush_r+0x54>
 8008a8c:	6863      	ldr	r3, [r4, #4]
 8008a8e:	1ac0      	subs	r0, r0, r3
 8008a90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a92:	b10b      	cbz	r3, 8008a98 <__sflush_r+0x54>
 8008a94:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008a96:	1ac0      	subs	r0, r0, r3
 8008a98:	69e1      	ldr	r1, [r4, #28]
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	47a8      	blx	r5
 8008aa2:	1c41      	adds	r1, r0, #1
 8008aa4:	d141      	bne.n	8008b2a <__sflush_r+0xe6>
 8008aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d03d      	beq.n	8008b2a <__sflush_r+0xe6>
 8008aae:	2b1d      	cmp	r3, #29
 8008ab0:	d001      	beq.n	8008ab6 <__sflush_r+0x72>
 8008ab2:	2b16      	cmp	r3, #22
 8008ab4:	d156      	bne.n	8008b64 <__sflush_r+0x120>
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	6922      	ldr	r2, [r4, #16]
 8008aba:	6022      	str	r2, [r4, #0]
 8008abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	6061      	str	r1, [r4, #4]
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008ac8:	f8c8 6000 	str.w	r6, [r8]
 8008acc:	b321      	cbz	r1, 8008b18 <__sflush_r+0xd4>
 8008ace:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8008ad2:	4299      	cmp	r1, r3
 8008ad4:	d002      	beq.n	8008adc <__sflush_r+0x98>
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	f000 f8ca 	bl	8008c70 <_free_r>
 8008adc:	2000      	movs	r0, #0
 8008ade:	6320      	str	r0, [r4, #48]	; 0x30
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	6926      	ldr	r6, [r4, #16]
 8008ae6:	b1be      	cbz	r6, 8008b18 <__sflush_r+0xd4>
 8008ae8:	b293      	uxth	r3, r2
 8008aea:	6825      	ldr	r5, [r4, #0]
 8008aec:	6026      	str	r6, [r4, #0]
 8008aee:	079a      	lsls	r2, r3, #30
 8008af0:	bf0c      	ite	eq
 8008af2:	6963      	ldreq	r3, [r4, #20]
 8008af4:	2300      	movne	r3, #0
 8008af6:	1bad      	subs	r5, r5, r6
 8008af8:	60a3      	str	r3, [r4, #8]
 8008afa:	e00b      	b.n	8008b14 <__sflush_r+0xd0>
 8008afc:	462b      	mov	r3, r5
 8008afe:	4632      	mov	r2, r6
 8008b00:	69e1      	ldr	r1, [r4, #28]
 8008b02:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8008b04:	4640      	mov	r0, r8
 8008b06:	47b8      	blx	r7
 8008b08:	f1b0 0c00 	subs.w	ip, r0, #0
 8008b0c:	eba5 050c 	sub.w	r5, r5, ip
 8008b10:	4466      	add	r6, ip
 8008b12:	dd17      	ble.n	8008b44 <__sflush_r+0x100>
 8008b14:	2d00      	cmp	r5, #0
 8008b16:	dcf1      	bgt.n	8008afc <__sflush_r+0xb8>
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	dc9d      	bgt.n	8008a60 <__sflush_r+0x1c>
 8008b24:	e7f8      	b.n	8008b18 <__sflush_r+0xd4>
 8008b26:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8008b28:	e7ae      	b.n	8008a88 <__sflush_r+0x44>
 8008b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b2e:	6922      	ldr	r2, [r4, #16]
 8008b30:	6022      	str	r2, [r4, #0]
 8008b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b36:	81a3      	strh	r3, [r4, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	04db      	lsls	r3, r3, #19
 8008b3c:	6062      	str	r2, [r4, #4]
 8008b3e:	d5c2      	bpl.n	8008ac6 <__sflush_r+0x82>
 8008b40:	6520      	str	r0, [r4, #80]	; 0x50
 8008b42:	e7c0      	b.n	8008ac6 <__sflush_r+0x82>
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b54:	f8d8 3000 	ldr.w	r3, [r8]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d093      	beq.n	8008a84 <__sflush_r+0x40>
 8008b5c:	2b1d      	cmp	r3, #29
 8008b5e:	d006      	beq.n	8008b6e <__sflush_r+0x12a>
 8008b60:	2b16      	cmp	r3, #22
 8008b62:	d004      	beq.n	8008b6e <__sflush_r+0x12a>
 8008b64:	89a3      	ldrh	r3, [r4, #12]
 8008b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b6a:	81a3      	strh	r3, [r4, #12]
 8008b6c:	e7d5      	b.n	8008b1a <__sflush_r+0xd6>
 8008b6e:	f8c8 6000 	str.w	r6, [r8]
 8008b72:	e7d1      	b.n	8008b18 <__sflush_r+0xd4>

08008b74 <_fflush_r>:
 8008b74:	b538      	push	{r3, r4, r5, lr}
 8008b76:	460c      	mov	r4, r1
 8008b78:	4605      	mov	r5, r0
 8008b7a:	b108      	cbz	r0, 8008b80 <_fflush_r+0xc>
 8008b7c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008b7e:	b1a3      	cbz	r3, 8008baa <_fflush_r+0x36>
 8008b80:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8008b84:	b1b8      	cbz	r0, 8008bb6 <_fflush_r+0x42>
 8008b86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b88:	07db      	lsls	r3, r3, #31
 8008b8a:	d401      	bmi.n	8008b90 <_fflush_r+0x1c>
 8008b8c:	0581      	lsls	r1, r0, #22
 8008b8e:	d515      	bpl.n	8008bbc <_fflush_r+0x48>
 8008b90:	4628      	mov	r0, r5
 8008b92:	4621      	mov	r1, r4
 8008b94:	f7ff ff56 	bl	8008a44 <__sflush_r>
 8008b98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b9a:	07da      	lsls	r2, r3, #31
 8008b9c:	4605      	mov	r5, r0
 8008b9e:	d402      	bmi.n	8008ba6 <_fflush_r+0x32>
 8008ba0:	89a3      	ldrh	r3, [r4, #12]
 8008ba2:	059b      	lsls	r3, r3, #22
 8008ba4:	d50e      	bpl.n	8008bc4 <_fflush_r+0x50>
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	bd38      	pop	{r3, r4, r5, pc}
 8008baa:	f7fc fc25 	bl	80053f8 <__sinit>
 8008bae:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d1e7      	bne.n	8008b86 <_fflush_r+0x12>
 8008bb6:	4605      	mov	r5, r0
 8008bb8:	4628      	mov	r0, r5
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
 8008bbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bbe:	f7f8 fb37 	bl	8001230 <__retarget_lock_acquire_recursive>
 8008bc2:	e7e5      	b.n	8008b90 <_fflush_r+0x1c>
 8008bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bc6:	f7f8 fb35 	bl	8001234 <__retarget_lock_release_recursive>
 8008bca:	4628      	mov	r0, r5
 8008bcc:	bd38      	pop	{r3, r4, r5, pc}
 8008bce:	bf00      	nop

08008bd0 <_malloc_trim_r>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	4f24      	ldr	r7, [pc, #144]	; (8008c64 <_malloc_trim_r+0x94>)
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	f7fc ff84 	bl	8005ae4 <__malloc_lock>
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	6855      	ldr	r5, [r2, #4]
 8008be0:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
 8008be4:	330f      	adds	r3, #15
 8008be6:	f025 0503 	bic.w	r5, r5, #3
 8008bea:	442b      	add	r3, r5
 8008bec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008bf0:	f023 030f 	bic.w	r3, r3, #15
 8008bf4:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
 8008bf8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8008bfc:	db07      	blt.n	8008c0e <_malloc_trim_r+0x3e>
 8008bfe:	2100      	movs	r1, #0
 8008c00:	4630      	mov	r0, r6
 8008c02:	f7fc ff8f 	bl	8005b24 <_sbrk_r>
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	442b      	add	r3, r5
 8008c0a:	4298      	cmp	r0, r3
 8008c0c:	d004      	beq.n	8008c18 <_malloc_trim_r+0x48>
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f7fc ff6e 	bl	8005af0 <__malloc_unlock>
 8008c14:	2000      	movs	r0, #0
 8008c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c18:	4261      	negs	r1, r4
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7fc ff82 	bl	8005b24 <_sbrk_r>
 8008c20:	3001      	adds	r0, #1
 8008c22:	d00d      	beq.n	8008c40 <_malloc_trim_r+0x70>
 8008c24:	4a10      	ldr	r2, [pc, #64]	; (8008c68 <_malloc_trim_r+0x98>)
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	1b2d      	subs	r5, r5, r4
 8008c2a:	f045 0501 	orr.w	r5, r5, #1
 8008c2e:	605d      	str	r5, [r3, #4]
 8008c30:	6813      	ldr	r3, [r2, #0]
 8008c32:	4630      	mov	r0, r6
 8008c34:	1b1b      	subs	r3, r3, r4
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	f7fc ff5a 	bl	8005af0 <__malloc_unlock>
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c40:	2100      	movs	r1, #0
 8008c42:	4630      	mov	r0, r6
 8008c44:	f7fc ff6e 	bl	8005b24 <_sbrk_r>
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	1a83      	subs	r3, r0, r2
 8008c4c:	2b0f      	cmp	r3, #15
 8008c4e:	ddde      	ble.n	8008c0e <_malloc_trim_r+0x3e>
 8008c50:	f043 0301 	orr.w	r3, r3, #1
 8008c54:	6053      	str	r3, [r2, #4]
 8008c56:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <_malloc_trim_r+0x9c>)
 8008c58:	4903      	ldr	r1, [pc, #12]	; (8008c68 <_malloc_trim_r+0x98>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	1ac0      	subs	r0, r0, r3
 8008c5e:	6008      	str	r0, [r1, #0]
 8008c60:	e7d5      	b.n	8008c0e <_malloc_trim_r+0x3e>
 8008c62:	bf00      	nop
 8008c64:	20000548 	.word	0x20000548
 8008c68:	200014a4 	.word	0x200014a4
 8008c6c:	20000950 	.word	0x20000950

08008c70 <_free_r>:
 8008c70:	2900      	cmp	r1, #0
 8008c72:	d061      	beq.n	8008d38 <_free_r+0xc8>
 8008c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c76:	460c      	mov	r4, r1
 8008c78:	4606      	mov	r6, r0
 8008c7a:	f7fc ff33 	bl	8005ae4 <__malloc_lock>
 8008c7e:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8008c82:	4f7b      	ldr	r7, [pc, #492]	; (8008e70 <_free_r+0x200>)
 8008c84:	f1a4 0508 	sub.w	r5, r4, #8
 8008c88:	f022 0101 	bic.w	r1, r2, #1
 8008c8c:	eb05 0c01 	add.w	ip, r5, r1
 8008c90:	68b8      	ldr	r0, [r7, #8]
 8008c92:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008c96:	4560      	cmp	r0, ip
 8008c98:	f023 0303 	bic.w	r3, r3, #3
 8008c9c:	f000 808b 	beq.w	8008db6 <_free_r+0x146>
 8008ca0:	07d2      	lsls	r2, r2, #31
 8008ca2:	f8cc 3004 	str.w	r3, [ip, #4]
 8008ca6:	d432      	bmi.n	8008d0e <_free_r+0x9e>
 8008ca8:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8008cac:	1aad      	subs	r5, r5, r2
 8008cae:	4411      	add	r1, r2
 8008cb0:	68aa      	ldr	r2, [r5, #8]
 8008cb2:	f107 0008 	add.w	r0, r7, #8
 8008cb6:	4282      	cmp	r2, r0
 8008cb8:	d06a      	beq.n	8008d90 <_free_r+0x120>
 8008cba:	eb0c 0403 	add.w	r4, ip, r3
 8008cbe:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8008cc2:	68ec      	ldr	r4, [r5, #12]
 8008cc4:	60d4      	str	r4, [r2, #12]
 8008cc6:	f01e 0f01 	tst.w	lr, #1
 8008cca:	60a2      	str	r2, [r4, #8]
 8008ccc:	f000 8097 	beq.w	8008dfe <_free_r+0x18e>
 8008cd0:	f041 0301 	orr.w	r3, r1, #1
 8008cd4:	606b      	str	r3, [r5, #4]
 8008cd6:	f8cc 1000 	str.w	r1, [ip]
 8008cda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008cde:	d235      	bcs.n	8008d4c <_free_r+0xdc>
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	08cb      	lsrs	r3, r1, #3
 8008ce4:	0948      	lsrs	r0, r1, #5
 8008ce6:	2101      	movs	r1, #1
 8008ce8:	3301      	adds	r3, #1
 8008cea:	4081      	lsls	r1, r0
 8008cec:	4311      	orrs	r1, r2
 8008cee:	6079      	str	r1, [r7, #4]
 8008cf0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8008cf4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8008cf8:	3a08      	subs	r2, #8
 8008cfa:	e9c5 1202 	strd	r1, r2, [r5, #8]
 8008cfe:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8008d02:	60cd      	str	r5, [r1, #12]
 8008d04:	4630      	mov	r0, r6
 8008d06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d0a:	f7fc bef1 	b.w	8005af0 <__malloc_unlock>
 8008d0e:	eb0c 0203 	add.w	r2, ip, r3
 8008d12:	6852      	ldr	r2, [r2, #4]
 8008d14:	07d0      	lsls	r0, r2, #31
 8008d16:	d410      	bmi.n	8008d3a <_free_r+0xca>
 8008d18:	4419      	add	r1, r3
 8008d1a:	f107 0008 	add.w	r0, r7, #8
 8008d1e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8008d22:	4283      	cmp	r3, r0
 8008d24:	d073      	beq.n	8008e0e <_free_r+0x19e>
 8008d26:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8008d2a:	60da      	str	r2, [r3, #12]
 8008d2c:	6093      	str	r3, [r2, #8]
 8008d2e:	f041 0301 	orr.w	r3, r1, #1
 8008d32:	606b      	str	r3, [r5, #4]
 8008d34:	5069      	str	r1, [r5, r1]
 8008d36:	e7d0      	b.n	8008cda <_free_r+0x6a>
 8008d38:	4770      	bx	lr
 8008d3a:	f041 0301 	orr.w	r3, r1, #1
 8008d3e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008d42:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d46:	f8cc 1000 	str.w	r1, [ip]
 8008d4a:	d3c9      	bcc.n	8008ce0 <_free_r+0x70>
 8008d4c:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8008d50:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8008d54:	d248      	bcs.n	8008de8 <_free_r+0x178>
 8008d56:	098b      	lsrs	r3, r1, #6
 8008d58:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8008d5c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008d60:	00c3      	lsls	r3, r0, #3
 8008d62:	18f8      	adds	r0, r7, r3
 8008d64:	58fb      	ldr	r3, [r7, r3]
 8008d66:	3808      	subs	r0, #8
 8008d68:	4298      	cmp	r0, r3
 8008d6a:	d059      	beq.n	8008e20 <_free_r+0x1b0>
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	f022 0203 	bic.w	r2, r2, #3
 8008d72:	428a      	cmp	r2, r1
 8008d74:	d902      	bls.n	8008d7c <_free_r+0x10c>
 8008d76:	689b      	ldr	r3, [r3, #8]
 8008d78:	4298      	cmp	r0, r3
 8008d7a:	d1f7      	bne.n	8008d6c <_free_r+0xfc>
 8008d7c:	68d8      	ldr	r0, [r3, #12]
 8008d7e:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8008d82:	6085      	str	r5, [r0, #8]
 8008d84:	60dd      	str	r5, [r3, #12]
 8008d86:	4630      	mov	r0, r6
 8008d88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d8c:	f7fc beb0 	b.w	8005af0 <__malloc_unlock>
 8008d90:	eb0c 0203 	add.w	r2, ip, r3
 8008d94:	6852      	ldr	r2, [r2, #4]
 8008d96:	07d2      	lsls	r2, r2, #31
 8008d98:	d463      	bmi.n	8008e62 <_free_r+0x1f2>
 8008d9a:	440b      	add	r3, r1
 8008d9c:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8008da0:	60ca      	str	r2, [r1, #12]
 8008da2:	6091      	str	r1, [r2, #8]
 8008da4:	f043 0201 	orr.w	r2, r3, #1
 8008da8:	606a      	str	r2, [r5, #4]
 8008daa:	4630      	mov	r0, r6
 8008dac:	50eb      	str	r3, [r5, r3]
 8008dae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008db2:	f7fc be9d 	b.w	8005af0 <__malloc_unlock>
 8008db6:	440b      	add	r3, r1
 8008db8:	07d1      	lsls	r1, r2, #31
 8008dba:	d407      	bmi.n	8008dcc <_free_r+0x15c>
 8008dbc:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8008dc0:	1aad      	subs	r5, r5, r2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8008dc8:	60ca      	str	r2, [r1, #12]
 8008dca:	6091      	str	r1, [r2, #8]
 8008dcc:	f043 0201 	orr.w	r2, r3, #1
 8008dd0:	606a      	str	r2, [r5, #4]
 8008dd2:	4a28      	ldr	r2, [pc, #160]	; (8008e74 <_free_r+0x204>)
 8008dd4:	60bd      	str	r5, [r7, #8]
 8008dd6:	6812      	ldr	r2, [r2, #0]
 8008dd8:	429a      	cmp	r2, r3
 8008dda:	d893      	bhi.n	8008d04 <_free_r+0x94>
 8008ddc:	4b26      	ldr	r3, [pc, #152]	; (8008e78 <_free_r+0x208>)
 8008dde:	4630      	mov	r0, r6
 8008de0:	6819      	ldr	r1, [r3, #0]
 8008de2:	f7ff fef5 	bl	8008bd0 <_malloc_trim_r>
 8008de6:	e78d      	b.n	8008d04 <_free_r+0x94>
 8008de8:	2b14      	cmp	r3, #20
 8008dea:	d90a      	bls.n	8008e02 <_free_r+0x192>
 8008dec:	2b54      	cmp	r3, #84	; 0x54
 8008dee:	d81f      	bhi.n	8008e30 <_free_r+0x1c0>
 8008df0:	0b0b      	lsrs	r3, r1, #12
 8008df2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8008df6:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8008dfa:	00c3      	lsls	r3, r0, #3
 8008dfc:	e7b1      	b.n	8008d62 <_free_r+0xf2>
 8008dfe:	4419      	add	r1, r3
 8008e00:	e78d      	b.n	8008d1e <_free_r+0xae>
 8008e02:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8008e06:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8008e0a:	00c3      	lsls	r3, r0, #3
 8008e0c:	e7a9      	b.n	8008d62 <_free_r+0xf2>
 8008e0e:	f041 0301 	orr.w	r3, r1, #1
 8008e12:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8008e16:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8008e1a:	606b      	str	r3, [r5, #4]
 8008e1c:	5069      	str	r1, [r5, r1]
 8008e1e:	e771      	b.n	8008d04 <_free_r+0x94>
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	1092      	asrs	r2, r2, #2
 8008e24:	2401      	movs	r4, #1
 8008e26:	fa04 f202 	lsl.w	r2, r4, r2
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	607a      	str	r2, [r7, #4]
 8008e2e:	e7a6      	b.n	8008d7e <_free_r+0x10e>
 8008e30:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008e34:	d806      	bhi.n	8008e44 <_free_r+0x1d4>
 8008e36:	0bcb      	lsrs	r3, r1, #15
 8008e38:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8008e3c:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8008e40:	00c3      	lsls	r3, r0, #3
 8008e42:	e78e      	b.n	8008d62 <_free_r+0xf2>
 8008e44:	f240 5254 	movw	r2, #1364	; 0x554
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d806      	bhi.n	8008e5a <_free_r+0x1ea>
 8008e4c:	0c8b      	lsrs	r3, r1, #18
 8008e4e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8008e52:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8008e56:	00c3      	lsls	r3, r0, #3
 8008e58:	e783      	b.n	8008d62 <_free_r+0xf2>
 8008e5a:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8008e5e:	227e      	movs	r2, #126	; 0x7e
 8008e60:	e77f      	b.n	8008d62 <_free_r+0xf2>
 8008e62:	f041 0301 	orr.w	r3, r1, #1
 8008e66:	606b      	str	r3, [r5, #4]
 8008e68:	f8cc 1000 	str.w	r1, [ip]
 8008e6c:	e74a      	b.n	8008d04 <_free_r+0x94>
 8008e6e:	bf00      	nop
 8008e70:	20000548 	.word	0x20000548
 8008e74:	20000954 	.word	0x20000954
 8008e78:	200014d4 	.word	0x200014d4

08008e7c <_localeconv_r>:
 8008e7c:	4800      	ldr	r0, [pc, #0]	; (8008e80 <_localeconv_r+0x4>)
 8008e7e:	4770      	bx	lr
 8008e80:	20000a48 	.word	0x20000a48

08008e84 <_lseek_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	460c      	mov	r4, r1
 8008e88:	4d08      	ldr	r5, [pc, #32]	; (8008eac <_lseek_r+0x28>)
 8008e8a:	4684      	mov	ip, r0
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	4620      	mov	r0, r4
 8008e90:	461a      	mov	r2, r3
 8008e92:	2300      	movs	r3, #0
 8008e94:	602b      	str	r3, [r5, #0]
 8008e96:	4664      	mov	r4, ip
 8008e98:	f7f8 face 	bl	8001438 <_lseek>
 8008e9c:	1c43      	adds	r3, r0, #1
 8008e9e:	d000      	beq.n	8008ea2 <_lseek_r+0x1e>
 8008ea0:	bd38      	pop	{r3, r4, r5, pc}
 8008ea2:	682b      	ldr	r3, [r5, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0fb      	beq.n	8008ea0 <_lseek_r+0x1c>
 8008ea8:	6023      	str	r3, [r4, #0]
 8008eaa:	bd38      	pop	{r3, r4, r5, pc}
 8008eac:	200014d8 	.word	0x200014d8

08008eb0 <__smakebuf_r>:
 8008eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb4:	898b      	ldrh	r3, [r1, #12]
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	0799      	lsls	r1, r3, #30
 8008eba:	b096      	sub	sp, #88	; 0x58
 8008ebc:	d508      	bpl.n	8008ed0 <__smakebuf_r+0x20>
 8008ebe:	f104 0343 	add.w	r3, r4, #67	; 0x43
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	e9c4 3204 	strd	r3, r2, [r4, #16]
 8008ec8:	6023      	str	r3, [r4, #0]
 8008eca:	b016      	add	sp, #88	; 0x58
 8008ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ed4:	2900      	cmp	r1, #0
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	db27      	blt.n	8008f2a <__smakebuf_r+0x7a>
 8008eda:	466a      	mov	r2, sp
 8008edc:	f001 fcfa 	bl	800a8d4 <_fstat_r>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	db21      	blt.n	8008f28 <__smakebuf_r+0x78>
 8008ee4:	9d01      	ldr	r5, [sp, #4]
 8008ee6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8008eea:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 8008eee:	fab5 f585 	clz	r5, r5
 8008ef2:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8008ef6:	096d      	lsrs	r5, r5, #5
 8008ef8:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8008efc:	4641      	mov	r1, r8
 8008efe:	4630      	mov	r0, r6
 8008f00:	f7fc fb40 	bl	8005584 <_malloc_r>
 8008f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f08:	b1f0      	cbz	r0, 8008f48 <__smakebuf_r+0x98>
 8008f0a:	4a20      	ldr	r2, [pc, #128]	; (8008f8c <__smakebuf_r+0xdc>)
 8008f0c:	63f2      	str	r2, [r6, #60]	; 0x3c
 8008f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f12:	f8c4 8014 	str.w	r8, [r4, #20]
 8008f16:	81a3      	strh	r3, [r4, #12]
 8008f18:	6020      	str	r0, [r4, #0]
 8008f1a:	6120      	str	r0, [r4, #16]
 8008f1c:	bb35      	cbnz	r5, 8008f6c <__smakebuf_r+0xbc>
 8008f1e:	433b      	orrs	r3, r7
 8008f20:	81a3      	strh	r3, [r4, #12]
 8008f22:	b016      	add	sp, #88	; 0x58
 8008f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 8008f2e:	d019      	beq.n	8008f64 <__smakebuf_r+0xb4>
 8008f30:	f04f 0840 	mov.w	r8, #64	; 0x40
 8008f34:	4641      	mov	r1, r8
 8008f36:	4630      	mov	r0, r6
 8008f38:	f7fc fb24 	bl	8005584 <_malloc_r>
 8008f3c:	2500      	movs	r5, #0
 8008f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f42:	462f      	mov	r7, r5
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d1e0      	bne.n	8008f0a <__smakebuf_r+0x5a>
 8008f48:	059a      	lsls	r2, r3, #22
 8008f4a:	d4be      	bmi.n	8008eca <__smakebuf_r+0x1a>
 8008f4c:	f023 0303 	bic.w	r3, r3, #3
 8008f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f54:	f043 0302 	orr.w	r3, r3, #2
 8008f58:	2101      	movs	r1, #1
 8008f5a:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8008f5e:	81a3      	strh	r3, [r4, #12]
 8008f60:	6022      	str	r2, [r4, #0]
 8008f62:	e7b2      	b.n	8008eca <__smakebuf_r+0x1a>
 8008f64:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8008f68:	462f      	mov	r7, r5
 8008f6a:	e7c7      	b.n	8008efc <__smakebuf_r+0x4c>
 8008f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f70:	4630      	mov	r0, r6
 8008f72:	f001 fe3d 	bl	800abf0 <_isatty_r>
 8008f76:	b910      	cbnz	r0, 8008f7e <__smakebuf_r+0xce>
 8008f78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7c:	e7cf      	b.n	8008f1e <__smakebuf_r+0x6e>
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f023 0303 	bic.w	r3, r3, #3
 8008f84:	f043 0301 	orr.w	r3, r3, #1
 8008f88:	b21b      	sxth	r3, r3
 8008f8a:	e7c8      	b.n	8008f1e <__smakebuf_r+0x6e>
 8008f8c:	080053ed 	.word	0x080053ed

08008f90 <_Balloc>:
 8008f90:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008f92:	b570      	push	{r4, r5, r6, lr}
 8008f94:	4605      	mov	r5, r0
 8008f96:	460c      	mov	r4, r1
 8008f98:	b14b      	cbz	r3, 8008fae <_Balloc+0x1e>
 8008f9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008f9e:	b180      	cbz	r0, 8008fc2 <_Balloc+0x32>
 8008fa0:	6802      	ldr	r2, [r0, #0]
 8008fa2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fac:	bd70      	pop	{r4, r5, r6, pc}
 8008fae:	2221      	movs	r2, #33	; 0x21
 8008fb0:	2104      	movs	r1, #4
 8008fb2:	f001 fbc3 	bl	800a73c <_calloc_r>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	64e8      	str	r0, [r5, #76]	; 0x4c
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d1ed      	bne.n	8008f9a <_Balloc+0xa>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	bd70      	pop	{r4, r5, r6, pc}
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	fa01 f604 	lsl.w	r6, r1, r4
 8008fc8:	1d72      	adds	r2, r6, #5
 8008fca:	0092      	lsls	r2, r2, #2
 8008fcc:	4628      	mov	r0, r5
 8008fce:	f001 fbb5 	bl	800a73c <_calloc_r>
 8008fd2:	2800      	cmp	r0, #0
 8008fd4:	d0f3      	beq.n	8008fbe <_Balloc+0x2e>
 8008fd6:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008fda:	e7e4      	b.n	8008fa6 <_Balloc+0x16>

08008fdc <_Bfree>:
 8008fdc:	b131      	cbz	r1, 8008fec <_Bfree+0x10>
 8008fde:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008fe0:	684a      	ldr	r2, [r1, #4]
 8008fe2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008fe6:	6008      	str	r0, [r1, #0]
 8008fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008fec:	4770      	bx	lr
 8008fee:	bf00      	nop

08008ff0 <__multadd>:
 8008ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ff2:	690c      	ldr	r4, [r1, #16]
 8008ff4:	4606      	mov	r6, r0
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	f101 0e14 	add.w	lr, r1, #20
 8008ffe:	2000      	movs	r0, #0
 8009000:	f8de 1000 	ldr.w	r1, [lr]
 8009004:	fa1f fc81 	uxth.w	ip, r1
 8009008:	fb02 330c 	mla	r3, r2, ip, r3
 800900c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8009010:	0c09      	lsrs	r1, r1, #16
 8009012:	fb02 cc01 	mla	ip, r2, r1, ip
 8009016:	3001      	adds	r0, #1
 8009018:	b29b      	uxth	r3, r3
 800901a:	eb03 430c 	add.w	r3, r3, ip, lsl #16
 800901e:	4284      	cmp	r4, r0
 8009020:	f84e 3b04 	str.w	r3, [lr], #4
 8009024:	ea4f 431c 	mov.w	r3, ip, lsr #16
 8009028:	dcea      	bgt.n	8009000 <__multadd+0x10>
 800902a:	b13b      	cbz	r3, 800903c <__multadd+0x4c>
 800902c:	68aa      	ldr	r2, [r5, #8]
 800902e:	42a2      	cmp	r2, r4
 8009030:	dd07      	ble.n	8009042 <__multadd+0x52>
 8009032:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8009036:	3401      	adds	r4, #1
 8009038:	6153      	str	r3, [r2, #20]
 800903a:	612c      	str	r4, [r5, #16]
 800903c:	4628      	mov	r0, r5
 800903e:	b003      	add	sp, #12
 8009040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009042:	6869      	ldr	r1, [r5, #4]
 8009044:	9301      	str	r3, [sp, #4]
 8009046:	3101      	adds	r1, #1
 8009048:	4630      	mov	r0, r6
 800904a:	f7ff ffa1 	bl	8008f90 <_Balloc>
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	4607      	mov	r7, r0
 8009052:	b1b8      	cbz	r0, 8009084 <__multadd+0x94>
 8009054:	692a      	ldr	r2, [r5, #16]
 8009056:	9301      	str	r3, [sp, #4]
 8009058:	3202      	adds	r2, #2
 800905a:	f105 010c 	add.w	r1, r5, #12
 800905e:	0092      	lsls	r2, r2, #2
 8009060:	300c      	adds	r0, #12
 8009062:	f7f7 ff0d 	bl	8000e80 <memcpy>
 8009066:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8009068:	6869      	ldr	r1, [r5, #4]
 800906a:	9b01      	ldr	r3, [sp, #4]
 800906c:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8009070:	6028      	str	r0, [r5, #0]
 8009072:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8009076:	463d      	mov	r5, r7
 8009078:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800907c:	3401      	adds	r4, #1
 800907e:	6153      	str	r3, [r2, #20]
 8009080:	612c      	str	r4, [r5, #16]
 8009082:	e7db      	b.n	800903c <__multadd+0x4c>
 8009084:	4b02      	ldr	r3, [pc, #8]	; (8009090 <__multadd+0xa0>)
 8009086:	4803      	ldr	r0, [pc, #12]	; (8009094 <__multadd+0xa4>)
 8009088:	463a      	mov	r2, r7
 800908a:	21b5      	movs	r1, #181	; 0xb5
 800908c:	f001 fb36 	bl	800a6fc <__assert_func>
 8009090:	0800b978 	.word	0x0800b978
 8009094:	0800ba0c 	.word	0x0800ba0c

08009098 <__hi0bits>:
 8009098:	0c03      	lsrs	r3, r0, #16
 800909a:	041b      	lsls	r3, r3, #16
 800909c:	b9d3      	cbnz	r3, 80090d4 <__hi0bits+0x3c>
 800909e:	0400      	lsls	r0, r0, #16
 80090a0:	2310      	movs	r3, #16
 80090a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090a6:	bf04      	itt	eq
 80090a8:	0200      	lsleq	r0, r0, #8
 80090aa:	3308      	addeq	r3, #8
 80090ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80090b0:	bf04      	itt	eq
 80090b2:	0100      	lsleq	r0, r0, #4
 80090b4:	3304      	addeq	r3, #4
 80090b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80090ba:	bf04      	itt	eq
 80090bc:	0080      	lsleq	r0, r0, #2
 80090be:	3302      	addeq	r3, #2
 80090c0:	2800      	cmp	r0, #0
 80090c2:	db05      	blt.n	80090d0 <__hi0bits+0x38>
 80090c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80090c8:	f103 0301 	add.w	r3, r3, #1
 80090cc:	bf08      	it	eq
 80090ce:	2320      	moveq	r3, #32
 80090d0:	4618      	mov	r0, r3
 80090d2:	4770      	bx	lr
 80090d4:	2300      	movs	r3, #0
 80090d6:	e7e4      	b.n	80090a2 <__hi0bits+0xa>

080090d8 <__lo0bits>:
 80090d8:	6803      	ldr	r3, [r0, #0]
 80090da:	f013 0207 	ands.w	r2, r3, #7
 80090de:	4601      	mov	r1, r0
 80090e0:	d007      	beq.n	80090f2 <__lo0bits+0x1a>
 80090e2:	07da      	lsls	r2, r3, #31
 80090e4:	d41f      	bmi.n	8009126 <__lo0bits+0x4e>
 80090e6:	0798      	lsls	r0, r3, #30
 80090e8:	d521      	bpl.n	800912e <__lo0bits+0x56>
 80090ea:	085b      	lsrs	r3, r3, #1
 80090ec:	600b      	str	r3, [r1, #0]
 80090ee:	2001      	movs	r0, #1
 80090f0:	4770      	bx	lr
 80090f2:	b298      	uxth	r0, r3
 80090f4:	b1a0      	cbz	r0, 8009120 <__lo0bits+0x48>
 80090f6:	4610      	mov	r0, r2
 80090f8:	b2da      	uxtb	r2, r3
 80090fa:	b90a      	cbnz	r2, 8009100 <__lo0bits+0x28>
 80090fc:	3008      	adds	r0, #8
 80090fe:	0a1b      	lsrs	r3, r3, #8
 8009100:	071a      	lsls	r2, r3, #28
 8009102:	bf04      	itt	eq
 8009104:	091b      	lsreq	r3, r3, #4
 8009106:	3004      	addeq	r0, #4
 8009108:	079a      	lsls	r2, r3, #30
 800910a:	bf04      	itt	eq
 800910c:	089b      	lsreq	r3, r3, #2
 800910e:	3002      	addeq	r0, #2
 8009110:	07da      	lsls	r2, r3, #31
 8009112:	d403      	bmi.n	800911c <__lo0bits+0x44>
 8009114:	085b      	lsrs	r3, r3, #1
 8009116:	f100 0001 	add.w	r0, r0, #1
 800911a:	d006      	beq.n	800912a <__lo0bits+0x52>
 800911c:	600b      	str	r3, [r1, #0]
 800911e:	4770      	bx	lr
 8009120:	0c1b      	lsrs	r3, r3, #16
 8009122:	2010      	movs	r0, #16
 8009124:	e7e8      	b.n	80090f8 <__lo0bits+0x20>
 8009126:	2000      	movs	r0, #0
 8009128:	4770      	bx	lr
 800912a:	2020      	movs	r0, #32
 800912c:	4770      	bx	lr
 800912e:	089b      	lsrs	r3, r3, #2
 8009130:	600b      	str	r3, [r1, #0]
 8009132:	2002      	movs	r0, #2
 8009134:	4770      	bx	lr
 8009136:	bf00      	nop

08009138 <__i2b>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800913c:	4604      	mov	r4, r0
 800913e:	460d      	mov	r5, r1
 8009140:	b14b      	cbz	r3, 8009156 <__i2b+0x1e>
 8009142:	6858      	ldr	r0, [r3, #4]
 8009144:	b1b0      	cbz	r0, 8009174 <__i2b+0x3c>
 8009146:	6802      	ldr	r2, [r0, #0]
 8009148:	605a      	str	r2, [r3, #4]
 800914a:	2200      	movs	r2, #0
 800914c:	2301      	movs	r3, #1
 800914e:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009152:	60c2      	str	r2, [r0, #12]
 8009154:	bd38      	pop	{r3, r4, r5, pc}
 8009156:	2221      	movs	r2, #33	; 0x21
 8009158:	2104      	movs	r1, #4
 800915a:	f001 faef 	bl	800a73c <_calloc_r>
 800915e:	4603      	mov	r3, r0
 8009160:	64e0      	str	r0, [r4, #76]	; 0x4c
 8009162:	2800      	cmp	r0, #0
 8009164:	d1ed      	bne.n	8009142 <__i2b+0xa>
 8009166:	4b09      	ldr	r3, [pc, #36]	; (800918c <__i2b+0x54>)
 8009168:	4809      	ldr	r0, [pc, #36]	; (8009190 <__i2b+0x58>)
 800916a:	2200      	movs	r2, #0
 800916c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009170:	f001 fac4 	bl	800a6fc <__assert_func>
 8009174:	221c      	movs	r2, #28
 8009176:	2101      	movs	r1, #1
 8009178:	4620      	mov	r0, r4
 800917a:	f001 fadf 	bl	800a73c <_calloc_r>
 800917e:	2800      	cmp	r0, #0
 8009180:	d0f1      	beq.n	8009166 <__i2b+0x2e>
 8009182:	2201      	movs	r2, #1
 8009184:	2302      	movs	r3, #2
 8009186:	e9c0 2301 	strd	r2, r3, [r0, #4]
 800918a:	e7de      	b.n	800914a <__i2b+0x12>
 800918c:	0800b978 	.word	0x0800b978
 8009190:	0800ba0c 	.word	0x0800ba0c

08009194 <__multiply>:
 8009194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009198:	690e      	ldr	r6, [r1, #16]
 800919a:	6915      	ldr	r5, [r2, #16]
 800919c:	42ae      	cmp	r6, r5
 800919e:	b085      	sub	sp, #20
 80091a0:	4688      	mov	r8, r1
 80091a2:	4614      	mov	r4, r2
 80091a4:	db05      	blt.n	80091b2 <__multiply+0x1e>
 80091a6:	462a      	mov	r2, r5
 80091a8:	4623      	mov	r3, r4
 80091aa:	4635      	mov	r5, r6
 80091ac:	460c      	mov	r4, r1
 80091ae:	4616      	mov	r6, r2
 80091b0:	4698      	mov	r8, r3
 80091b2:	68a3      	ldr	r3, [r4, #8]
 80091b4:	6861      	ldr	r1, [r4, #4]
 80091b6:	19af      	adds	r7, r5, r6
 80091b8:	42bb      	cmp	r3, r7
 80091ba:	bfb8      	it	lt
 80091bc:	3101      	addlt	r1, #1
 80091be:	f7ff fee7 	bl	8008f90 <_Balloc>
 80091c2:	9001      	str	r0, [sp, #4]
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f000 8086 	beq.w	80092d6 <__multiply+0x142>
 80091ca:	9b01      	ldr	r3, [sp, #4]
 80091cc:	f103 0914 	add.w	r9, r3, #20
 80091d0:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 80091d4:	45d1      	cmp	r9, sl
 80091d6:	d205      	bcs.n	80091e4 <__multiply+0x50>
 80091d8:	464b      	mov	r3, r9
 80091da:	2200      	movs	r2, #0
 80091dc:	f843 2b04 	str.w	r2, [r3], #4
 80091e0:	459a      	cmp	sl, r3
 80091e2:	d8fb      	bhi.n	80091dc <__multiply+0x48>
 80091e4:	f108 0814 	add.w	r8, r8, #20
 80091e8:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 80091ec:	f104 0314 	add.w	r3, r4, #20
 80091f0:	45d8      	cmp	r8, fp
 80091f2:	461a      	mov	r2, r3
 80091f4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80091f8:	d25f      	bcs.n	80092ba <__multiply+0x126>
 80091fa:	1b2b      	subs	r3, r5, r4
 80091fc:	3b15      	subs	r3, #21
 80091fe:	f023 0303 	bic.w	r3, r3, #3
 8009202:	3304      	adds	r3, #4
 8009204:	3415      	adds	r4, #21
 8009206:	42a5      	cmp	r5, r4
 8009208:	bf38      	it	cc
 800920a:	2304      	movcc	r3, #4
 800920c:	e9cd a702 	strd	sl, r7, [sp, #8]
 8009210:	46ac      	mov	ip, r5
 8009212:	461f      	mov	r7, r3
 8009214:	4692      	mov	sl, r2
 8009216:	e005      	b.n	8009224 <__multiply+0x90>
 8009218:	0c00      	lsrs	r0, r0, #16
 800921a:	d129      	bne.n	8009270 <__multiply+0xdc>
 800921c:	45c3      	cmp	fp, r8
 800921e:	f109 0904 	add.w	r9, r9, #4
 8009222:	d948      	bls.n	80092b6 <__multiply+0x122>
 8009224:	f858 0b04 	ldr.w	r0, [r8], #4
 8009228:	b285      	uxth	r5, r0
 800922a:	2d00      	cmp	r5, #0
 800922c:	d0f4      	beq.n	8009218 <__multiply+0x84>
 800922e:	4656      	mov	r6, sl
 8009230:	464c      	mov	r4, r9
 8009232:	2300      	movs	r3, #0
 8009234:	f856 0b04 	ldr.w	r0, [r6], #4
 8009238:	6821      	ldr	r1, [r4, #0]
 800923a:	b282      	uxth	r2, r0
 800923c:	fa1f fe81 	uxth.w	lr, r1
 8009240:	fb05 ee02 	mla	lr, r5, r2, lr
 8009244:	0c00      	lsrs	r0, r0, #16
 8009246:	0c0a      	lsrs	r2, r1, #16
 8009248:	4473      	add	r3, lr
 800924a:	fb05 2200 	mla	r2, r5, r0, r2
 800924e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009252:	b29b      	uxth	r3, r3
 8009254:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009258:	45b4      	cmp	ip, r6
 800925a:	f844 3b04 	str.w	r3, [r4], #4
 800925e:	ea4f 4312 	mov.w	r3, r2, lsr #16
 8009262:	d8e7      	bhi.n	8009234 <__multiply+0xa0>
 8009264:	f849 3007 	str.w	r3, [r9, r7]
 8009268:	f858 0c04 	ldr.w	r0, [r8, #-4]
 800926c:	0c00      	lsrs	r0, r0, #16
 800926e:	d0d5      	beq.n	800921c <__multiply+0x88>
 8009270:	f8d9 3000 	ldr.w	r3, [r9]
 8009274:	4654      	mov	r4, sl
 8009276:	4619      	mov	r1, r3
 8009278:	464d      	mov	r5, r9
 800927a:	2200      	movs	r2, #0
 800927c:	8826      	ldrh	r6, [r4, #0]
 800927e:	0c09      	lsrs	r1, r1, #16
 8009280:	fb00 1106 	mla	r1, r0, r6, r1
 8009284:	440a      	add	r2, r1
 8009286:	b29b      	uxth	r3, r3
 8009288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800928c:	f845 3b04 	str.w	r3, [r5], #4
 8009290:	f854 6b04 	ldr.w	r6, [r4], #4
 8009294:	6829      	ldr	r1, [r5, #0]
 8009296:	0c36      	lsrs	r6, r6, #16
 8009298:	b28b      	uxth	r3, r1
 800929a:	fb00 3306 	mla	r3, r0, r6, r3
 800929e:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80092a2:	45a4      	cmp	ip, r4
 80092a4:	ea4f 4213 	mov.w	r2, r3, lsr #16
 80092a8:	d8e8      	bhi.n	800927c <__multiply+0xe8>
 80092aa:	45c3      	cmp	fp, r8
 80092ac:	f849 3007 	str.w	r3, [r9, r7]
 80092b0:	f109 0904 	add.w	r9, r9, #4
 80092b4:	d8b6      	bhi.n	8009224 <__multiply+0x90>
 80092b6:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 80092ba:	2f00      	cmp	r7, #0
 80092bc:	dc02      	bgt.n	80092c4 <__multiply+0x130>
 80092be:	e005      	b.n	80092cc <__multiply+0x138>
 80092c0:	3f01      	subs	r7, #1
 80092c2:	d003      	beq.n	80092cc <__multiply+0x138>
 80092c4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d0f9      	beq.n	80092c0 <__multiply+0x12c>
 80092cc:	9801      	ldr	r0, [sp, #4]
 80092ce:	6107      	str	r7, [r0, #16]
 80092d0:	b005      	add	sp, #20
 80092d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d6:	4b03      	ldr	r3, [pc, #12]	; (80092e4 <__multiply+0x150>)
 80092d8:	4803      	ldr	r0, [pc, #12]	; (80092e8 <__multiply+0x154>)
 80092da:	9a01      	ldr	r2, [sp, #4]
 80092dc:	f240 115d 	movw	r1, #349	; 0x15d
 80092e0:	f001 fa0c 	bl	800a6fc <__assert_func>
 80092e4:	0800b978 	.word	0x0800b978
 80092e8:	0800ba0c 	.word	0x0800ba0c

080092ec <__pow5mult>:
 80092ec:	f012 0303 	ands.w	r3, r2, #3
 80092f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092f4:	4614      	mov	r4, r2
 80092f6:	4606      	mov	r6, r0
 80092f8:	d132      	bne.n	8009360 <__pow5mult+0x74>
 80092fa:	460d      	mov	r5, r1
 80092fc:	10a4      	asrs	r4, r4, #2
 80092fe:	d020      	beq.n	8009342 <__pow5mult+0x56>
 8009300:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 8009304:	f1b8 0f00 	cmp.w	r8, #0
 8009308:	d033      	beq.n	8009372 <__pow5mult+0x86>
 800930a:	07e3      	lsls	r3, r4, #31
 800930c:	f04f 0700 	mov.w	r7, #0
 8009310:	d407      	bmi.n	8009322 <__pow5mult+0x36>
 8009312:	1064      	asrs	r4, r4, #1
 8009314:	d015      	beq.n	8009342 <__pow5mult+0x56>
 8009316:	f8d8 0000 	ldr.w	r0, [r8]
 800931a:	b1a8      	cbz	r0, 8009348 <__pow5mult+0x5c>
 800931c:	4680      	mov	r8, r0
 800931e:	07e3      	lsls	r3, r4, #31
 8009320:	d5f7      	bpl.n	8009312 <__pow5mult+0x26>
 8009322:	4642      	mov	r2, r8
 8009324:	4629      	mov	r1, r5
 8009326:	4630      	mov	r0, r6
 8009328:	f7ff ff34 	bl	8009194 <__multiply>
 800932c:	b1b5      	cbz	r5, 800935c <__pow5mult+0x70>
 800932e:	6869      	ldr	r1, [r5, #4]
 8009330:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8009332:	1064      	asrs	r4, r4, #1
 8009334:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8009338:	602a      	str	r2, [r5, #0]
 800933a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 800933e:	4605      	mov	r5, r0
 8009340:	d1e9      	bne.n	8009316 <__pow5mult+0x2a>
 8009342:	4628      	mov	r0, r5
 8009344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009348:	4642      	mov	r2, r8
 800934a:	4641      	mov	r1, r8
 800934c:	4630      	mov	r0, r6
 800934e:	f7ff ff21 	bl	8009194 <__multiply>
 8009352:	f8c8 0000 	str.w	r0, [r8]
 8009356:	6007      	str	r7, [r0, #0]
 8009358:	4680      	mov	r8, r0
 800935a:	e7e0      	b.n	800931e <__pow5mult+0x32>
 800935c:	4605      	mov	r5, r0
 800935e:	e7d8      	b.n	8009312 <__pow5mult+0x26>
 8009360:	3b01      	subs	r3, #1
 8009362:	4a0f      	ldr	r2, [pc, #60]	; (80093a0 <__pow5mult+0xb4>)
 8009364:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009368:	2300      	movs	r3, #0
 800936a:	f7ff fe41 	bl	8008ff0 <__multadd>
 800936e:	4605      	mov	r5, r0
 8009370:	e7c4      	b.n	80092fc <__pow5mult+0x10>
 8009372:	2101      	movs	r1, #1
 8009374:	4630      	mov	r0, r6
 8009376:	f7ff fe0b 	bl	8008f90 <_Balloc>
 800937a:	4680      	mov	r8, r0
 800937c:	b140      	cbz	r0, 8009390 <__pow5mult+0xa4>
 800937e:	2301      	movs	r3, #1
 8009380:	f240 2271 	movw	r2, #625	; 0x271
 8009384:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8009388:	2300      	movs	r3, #0
 800938a:	64b0      	str	r0, [r6, #72]	; 0x48
 800938c:	6003      	str	r3, [r0, #0]
 800938e:	e7bc      	b.n	800930a <__pow5mult+0x1e>
 8009390:	4b04      	ldr	r3, [pc, #16]	; (80093a4 <__pow5mult+0xb8>)
 8009392:	4805      	ldr	r0, [pc, #20]	; (80093a8 <__pow5mult+0xbc>)
 8009394:	4642      	mov	r2, r8
 8009396:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800939a:	f001 f9af 	bl	800a6fc <__assert_func>
 800939e:	bf00      	nop
 80093a0:	0800bb80 	.word	0x0800bb80
 80093a4:	0800b978 	.word	0x0800b978
 80093a8:	0800ba0c 	.word	0x0800ba0c

080093ac <__lshift>:
 80093ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093b0:	460c      	mov	r4, r1
 80093b2:	4690      	mov	r8, r2
 80093b4:	6926      	ldr	r6, [r4, #16]
 80093b6:	68a3      	ldr	r3, [r4, #8]
 80093b8:	6849      	ldr	r1, [r1, #4]
 80093ba:	eb06 1662 	add.w	r6, r6, r2, asr #5
 80093be:	1c75      	adds	r5, r6, #1
 80093c0:	429d      	cmp	r5, r3
 80093c2:	4607      	mov	r7, r0
 80093c4:	ea4f 1962 	mov.w	r9, r2, asr #5
 80093c8:	dd04      	ble.n	80093d4 <__lshift+0x28>
 80093ca:	005b      	lsls	r3, r3, #1
 80093cc:	429d      	cmp	r5, r3
 80093ce:	f101 0101 	add.w	r1, r1, #1
 80093d2:	dcfa      	bgt.n	80093ca <__lshift+0x1e>
 80093d4:	4638      	mov	r0, r7
 80093d6:	f7ff fddb 	bl	8008f90 <_Balloc>
 80093da:	4684      	mov	ip, r0
 80093dc:	2800      	cmp	r0, #0
 80093de:	d051      	beq.n	8009484 <__lshift+0xd8>
 80093e0:	f1b9 0f00 	cmp.w	r9, #0
 80093e4:	f100 0014 	add.w	r0, r0, #20
 80093e8:	dd0e      	ble.n	8009408 <__lshift+0x5c>
 80093ea:	f109 0205 	add.w	r2, r9, #5
 80093ee:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 80093f2:	4603      	mov	r3, r0
 80093f4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80093f8:	2100      	movs	r1, #0
 80093fa:	f843 1b04 	str.w	r1, [r3], #4
 80093fe:	4293      	cmp	r3, r2
 8009400:	d1fb      	bne.n	80093fa <__lshift+0x4e>
 8009402:	f1ae 0314 	sub.w	r3, lr, #20
 8009406:	4418      	add	r0, r3
 8009408:	6921      	ldr	r1, [r4, #16]
 800940a:	f104 0314 	add.w	r3, r4, #20
 800940e:	f018 081f 	ands.w	r8, r8, #31
 8009412:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8009416:	d02d      	beq.n	8009474 <__lshift+0xc8>
 8009418:	f1c8 0920 	rsb	r9, r8, #32
 800941c:	4686      	mov	lr, r0
 800941e:	f04f 0a00 	mov.w	sl, #0
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	fa02 f208 	lsl.w	r2, r2, r8
 8009428:	ea42 020a 	orr.w	r2, r2, sl
 800942c:	f84e 2b04 	str.w	r2, [lr], #4
 8009430:	f853 2b04 	ldr.w	r2, [r3], #4
 8009434:	4299      	cmp	r1, r3
 8009436:	fa22 fa09 	lsr.w	sl, r2, r9
 800943a:	d8f2      	bhi.n	8009422 <__lshift+0x76>
 800943c:	1b0b      	subs	r3, r1, r4
 800943e:	3b15      	subs	r3, #21
 8009440:	f023 0303 	bic.w	r3, r3, #3
 8009444:	3304      	adds	r3, #4
 8009446:	f104 0215 	add.w	r2, r4, #21
 800944a:	4291      	cmp	r1, r2
 800944c:	bf38      	it	cc
 800944e:	2304      	movcc	r3, #4
 8009450:	f1ba 0f00 	cmp.w	sl, #0
 8009454:	bf18      	it	ne
 8009456:	462e      	movne	r6, r5
 8009458:	f840 a003 	str.w	sl, [r0, r3]
 800945c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800945e:	6862      	ldr	r2, [r4, #4]
 8009460:	f8cc 6010 	str.w	r6, [ip, #16]
 8009464:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009468:	6021      	str	r1, [r4, #0]
 800946a:	4660      	mov	r0, ip
 800946c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009474:	3804      	subs	r0, #4
 8009476:	f853 2b04 	ldr.w	r2, [r3], #4
 800947a:	f840 2f04 	str.w	r2, [r0, #4]!
 800947e:	4299      	cmp	r1, r3
 8009480:	d8f9      	bhi.n	8009476 <__lshift+0xca>
 8009482:	e7eb      	b.n	800945c <__lshift+0xb0>
 8009484:	4b03      	ldr	r3, [pc, #12]	; (8009494 <__lshift+0xe8>)
 8009486:	4804      	ldr	r0, [pc, #16]	; (8009498 <__lshift+0xec>)
 8009488:	4662      	mov	r2, ip
 800948a:	f240 11d9 	movw	r1, #473	; 0x1d9
 800948e:	f001 f935 	bl	800a6fc <__assert_func>
 8009492:	bf00      	nop
 8009494:	0800b978 	.word	0x0800b978
 8009498:	0800ba0c 	.word	0x0800ba0c

0800949c <__mcmp>:
 800949c:	690b      	ldr	r3, [r1, #16]
 800949e:	4684      	mov	ip, r0
 80094a0:	6900      	ldr	r0, [r0, #16]
 80094a2:	1ac0      	subs	r0, r0, r3
 80094a4:	d116      	bne.n	80094d4 <__mcmp+0x38>
 80094a6:	f10c 0c14 	add.w	ip, ip, #20
 80094aa:	3114      	adds	r1, #20
 80094ac:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80094b0:	b410      	push	{r4}
 80094b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80094b6:	e001      	b.n	80094bc <__mcmp+0x20>
 80094b8:	4594      	cmp	ip, r2
 80094ba:	d208      	bcs.n	80094ce <__mcmp+0x32>
 80094bc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 80094c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094c4:	428c      	cmp	r4, r1
 80094c6:	d0f7      	beq.n	80094b8 <__mcmp+0x1c>
 80094c8:	d205      	bcs.n	80094d6 <__mcmp+0x3a>
 80094ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094d2:	4770      	bx	lr
 80094d4:	4770      	bx	lr
 80094d6:	2001      	movs	r0, #1
 80094d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop

080094e0 <__mdiff>:
 80094e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	690f      	ldr	r7, [r1, #16]
 80094e6:	6913      	ldr	r3, [r2, #16]
 80094e8:	1aff      	subs	r7, r7, r3
 80094ea:	2f00      	cmp	r7, #0
 80094ec:	460e      	mov	r6, r1
 80094ee:	4690      	mov	r8, r2
 80094f0:	d17a      	bne.n	80095e8 <__mdiff+0x108>
 80094f2:	f101 0514 	add.w	r5, r1, #20
 80094f6:	3214      	adds	r2, #20
 80094f8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80094fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009500:	e001      	b.n	8009506 <__mdiff+0x26>
 8009502:	429d      	cmp	r5, r3
 8009504:	d273      	bcs.n	80095ee <__mdiff+0x10e>
 8009506:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800950a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 800950e:	42a1      	cmp	r1, r4
 8009510:	d0f7      	beq.n	8009502 <__mdiff+0x22>
 8009512:	d364      	bcc.n	80095de <__mdiff+0xfe>
 8009514:	6871      	ldr	r1, [r6, #4]
 8009516:	f7ff fd3b 	bl	8008f90 <_Balloc>
 800951a:	4681      	mov	r9, r0
 800951c:	2800      	cmp	r0, #0
 800951e:	d072      	beq.n	8009606 <__mdiff+0x126>
 8009520:	6935      	ldr	r5, [r6, #16]
 8009522:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009526:	60c7      	str	r7, [r0, #12]
 8009528:	f108 0e14 	add.w	lr, r8, #20
 800952c:	f106 0014 	add.w	r0, r6, #20
 8009530:	f109 0a14 	add.w	sl, r9, #20
 8009534:	f106 0c10 	add.w	ip, r6, #16
 8009538:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 800953c:	eb00 0785 	add.w	r7, r0, r5, lsl #2
 8009540:	4656      	mov	r6, sl
 8009542:	2100      	movs	r1, #0
 8009544:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009548:	f85c bf04 	ldr.w	fp, [ip, #4]!
 800954c:	b2a3      	uxth	r3, r4
 800954e:	fa11 f18b 	uxtah	r1, r1, fp
 8009552:	1acb      	subs	r3, r1, r3
 8009554:	0c21      	lsrs	r1, r4, #16
 8009556:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 800955a:	eb01 4123 	add.w	r1, r1, r3, asr #16
 800955e:	b29b      	uxth	r3, r3
 8009560:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009564:	4572      	cmp	r2, lr
 8009566:	f846 3b04 	str.w	r3, [r6], #4
 800956a:	ea4f 4121 	mov.w	r1, r1, asr #16
 800956e:	d8e9      	bhi.n	8009544 <__mdiff+0x64>
 8009570:	eba2 0408 	sub.w	r4, r2, r8
 8009574:	3c15      	subs	r4, #21
 8009576:	f108 0815 	add.w	r8, r8, #21
 800957a:	4542      	cmp	r2, r8
 800957c:	f024 0603 	bic.w	r6, r4, #3
 8009580:	f106 0604 	add.w	r6, r6, #4
 8009584:	bf38      	it	cc
 8009586:	2604      	movcc	r6, #4
 8009588:	4430      	add	r0, r6
 800958a:	f024 0203 	bic.w	r2, r4, #3
 800958e:	bf38      	it	cc
 8009590:	2200      	movcc	r2, #0
 8009592:	4287      	cmp	r7, r0
 8009594:	4452      	add	r2, sl
 8009596:	44b2      	add	sl, r6
 8009598:	d916      	bls.n	80095c8 <__mdiff+0xe8>
 800959a:	4656      	mov	r6, sl
 800959c:	4604      	mov	r4, r0
 800959e:	f854 3b04 	ldr.w	r3, [r4], #4
 80095a2:	fa11 f183 	uxtah	r1, r1, r3
 80095a6:	140a      	asrs	r2, r1, #16
 80095a8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80095ac:	b289      	uxth	r1, r1
 80095ae:	ea41 4302 	orr.w	r3, r1, r2, lsl #16
 80095b2:	42a7      	cmp	r7, r4
 80095b4:	f846 3b04 	str.w	r3, [r6], #4
 80095b8:	ea4f 4122 	mov.w	r1, r2, asr #16
 80095bc:	d8ef      	bhi.n	800959e <__mdiff+0xbe>
 80095be:	1e7a      	subs	r2, r7, #1
 80095c0:	1a10      	subs	r0, r2, r0
 80095c2:	f020 0203 	bic.w	r2, r0, #3
 80095c6:	4452      	add	r2, sl
 80095c8:	b923      	cbnz	r3, 80095d4 <__mdiff+0xf4>
 80095ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095ce:	3d01      	subs	r5, #1
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d0fa      	beq.n	80095ca <__mdiff+0xea>
 80095d4:	f8c9 5010 	str.w	r5, [r9, #16]
 80095d8:	4648      	mov	r0, r9
 80095da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095de:	4633      	mov	r3, r6
 80095e0:	2701      	movs	r7, #1
 80095e2:	4646      	mov	r6, r8
 80095e4:	4698      	mov	r8, r3
 80095e6:	e795      	b.n	8009514 <__mdiff+0x34>
 80095e8:	dbf9      	blt.n	80095de <__mdiff+0xfe>
 80095ea:	2700      	movs	r7, #0
 80095ec:	e792      	b.n	8009514 <__mdiff+0x34>
 80095ee:	2100      	movs	r1, #0
 80095f0:	f7ff fcce 	bl	8008f90 <_Balloc>
 80095f4:	4681      	mov	r9, r0
 80095f6:	b168      	cbz	r0, 8009614 <__mdiff+0x134>
 80095f8:	2201      	movs	r2, #1
 80095fa:	2300      	movs	r3, #0
 80095fc:	e9c9 2304 	strd	r2, r3, [r9, #16]
 8009600:	4648      	mov	r0, r9
 8009602:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <__mdiff+0x144>)
 8009608:	4807      	ldr	r0, [pc, #28]	; (8009628 <__mdiff+0x148>)
 800960a:	464a      	mov	r2, r9
 800960c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009610:	f001 f874 	bl	800a6fc <__assert_func>
 8009614:	4b03      	ldr	r3, [pc, #12]	; (8009624 <__mdiff+0x144>)
 8009616:	4804      	ldr	r0, [pc, #16]	; (8009628 <__mdiff+0x148>)
 8009618:	464a      	mov	r2, r9
 800961a:	f240 2132 	movw	r1, #562	; 0x232
 800961e:	f001 f86d 	bl	800a6fc <__assert_func>
 8009622:	bf00      	nop
 8009624:	0800b978 	.word	0x0800b978
 8009628:	0800ba0c 	.word	0x0800ba0c

0800962c <__d2b>:
 800962c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009630:	4688      	mov	r8, r1
 8009632:	b083      	sub	sp, #12
 8009634:	2101      	movs	r1, #1
 8009636:	ec57 6b10 	vmov	r6, r7, d0
 800963a:	4615      	mov	r5, r2
 800963c:	f7ff fca8 	bl	8008f90 <_Balloc>
 8009640:	4604      	mov	r4, r0
 8009642:	2800      	cmp	r0, #0
 8009644:	d04f      	beq.n	80096e6 <__d2b+0xba>
 8009646:	f3c7 590a 	ubfx	r9, r7, #20, #11
 800964a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800964e:	f1b9 0f00 	cmp.w	r9, #0
 8009652:	d001      	beq.n	8009658 <__d2b+0x2c>
 8009654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009658:	2e00      	cmp	r6, #0
 800965a:	9301      	str	r3, [sp, #4]
 800965c:	d024      	beq.n	80096a8 <__d2b+0x7c>
 800965e:	4668      	mov	r0, sp
 8009660:	9600      	str	r6, [sp, #0]
 8009662:	f7ff fd39 	bl	80090d8 <__lo0bits>
 8009666:	2800      	cmp	r0, #0
 8009668:	d039      	beq.n	80096de <__d2b+0xb2>
 800966a:	e9dd 1300 	ldrd	r1, r3, [sp]
 800966e:	f1c0 0220 	rsb	r2, r0, #32
 8009672:	fa03 f202 	lsl.w	r2, r3, r2
 8009676:	430a      	orrs	r2, r1
 8009678:	40c3      	lsrs	r3, r0
 800967a:	6162      	str	r2, [r4, #20]
 800967c:	9301      	str	r3, [sp, #4]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf14      	ite	ne
 8009682:	2202      	movne	r2, #2
 8009684:	2201      	moveq	r2, #1
 8009686:	61a3      	str	r3, [r4, #24]
 8009688:	6122      	str	r2, [r4, #16]
 800968a:	f1b9 0f00 	cmp.w	r9, #0
 800968e:	d016      	beq.n	80096be <__d2b+0x92>
 8009690:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
 8009694:	4403      	add	r3, r0
 8009696:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800969a:	f8c8 3000 	str.w	r3, [r8]
 800969e:	6028      	str	r0, [r5, #0]
 80096a0:	4620      	mov	r0, r4
 80096a2:	b003      	add	sp, #12
 80096a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096a8:	a801      	add	r0, sp, #4
 80096aa:	f7ff fd15 	bl	80090d8 <__lo0bits>
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	6163      	str	r3, [r4, #20]
 80096b2:	2201      	movs	r2, #1
 80096b4:	3020      	adds	r0, #32
 80096b6:	6122      	str	r2, [r4, #16]
 80096b8:	f1b9 0f00 	cmp.w	r9, #0
 80096bc:	d1e8      	bne.n	8009690 <__d2b+0x64>
 80096be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80096c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80096c6:	f8c8 0000 	str.w	r0, [r8]
 80096ca:	6918      	ldr	r0, [r3, #16]
 80096cc:	f7ff fce4 	bl	8009098 <__hi0bits>
 80096d0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80096d4:	6028      	str	r0, [r5, #0]
 80096d6:	4620      	mov	r0, r4
 80096d8:	b003      	add	sp, #12
 80096da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096de:	9b00      	ldr	r3, [sp, #0]
 80096e0:	6163      	str	r3, [r4, #20]
 80096e2:	9b01      	ldr	r3, [sp, #4]
 80096e4:	e7cb      	b.n	800967e <__d2b+0x52>
 80096e6:	4b03      	ldr	r3, [pc, #12]	; (80096f4 <__d2b+0xc8>)
 80096e8:	4803      	ldr	r0, [pc, #12]	; (80096f8 <__d2b+0xcc>)
 80096ea:	4622      	mov	r2, r4
 80096ec:	f240 310a 	movw	r1, #778	; 0x30a
 80096f0:	f001 f804 	bl	800a6fc <__assert_func>
 80096f4:	0800b978 	.word	0x0800b978
 80096f8:	0800ba0c 	.word	0x0800ba0c

080096fc <_read_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	460c      	mov	r4, r1
 8009700:	4d08      	ldr	r5, [pc, #32]	; (8009724 <_read_r+0x28>)
 8009702:	4684      	mov	ip, r0
 8009704:	4611      	mov	r1, r2
 8009706:	4620      	mov	r0, r4
 8009708:	461a      	mov	r2, r3
 800970a:	2300      	movs	r3, #0
 800970c:	602b      	str	r3, [r5, #0]
 800970e:	4664      	mov	r4, ip
 8009710:	f7f7 fdd8 	bl	80012c4 <_read>
 8009714:	1c43      	adds	r3, r0, #1
 8009716:	d000      	beq.n	800971a <_read_r+0x1e>
 8009718:	bd38      	pop	{r3, r4, r5, pc}
 800971a:	682b      	ldr	r3, [r5, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0fb      	beq.n	8009718 <_read_r+0x1c>
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	bd38      	pop	{r3, r4, r5, pc}
 8009724:	200014d8 	.word	0x200014d8

08009728 <frexp>:
 8009728:	ec53 2b10 	vmov	r2, r3, d0
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	4e16      	ldr	r6, [pc, #88]	; (8009788 <frexp+0x60>)
 8009730:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009734:	2500      	movs	r5, #0
 8009736:	42b1      	cmp	r1, r6
 8009738:	4604      	mov	r4, r0
 800973a:	6005      	str	r5, [r0, #0]
 800973c:	dc21      	bgt.n	8009782 <frexp+0x5a>
 800973e:	ee10 6a10 	vmov	r6, s0
 8009742:	430e      	orrs	r6, r1
 8009744:	d01d      	beq.n	8009782 <frexp+0x5a>
 8009746:	4e11      	ldr	r6, [pc, #68]	; (800978c <frexp+0x64>)
 8009748:	401e      	ands	r6, r3
 800974a:	4618      	mov	r0, r3
 800974c:	b966      	cbnz	r6, 8009768 <frexp+0x40>
 800974e:	4619      	mov	r1, r3
 8009750:	2200      	movs	r2, #0
 8009752:	ee10 0a10 	vmov	r0, s0
 8009756:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <frexp+0x68>)
 8009758:	f7f6 ff0e 	bl	8000578 <__aeabi_dmul>
 800975c:	f06f 0535 	mvn.w	r5, #53	; 0x35
 8009760:	4602      	mov	r2, r0
 8009762:	4608      	mov	r0, r1
 8009764:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009768:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800976c:	1509      	asrs	r1, r1, #20
 800976e:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
 8009772:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 8009776:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800977a:	4429      	add	r1, r5
 800977c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009780:	6021      	str	r1, [r4, #0]
 8009782:	ec43 2b10 	vmov	d0, r2, r3
 8009786:	bd70      	pop	{r4, r5, r6, pc}
 8009788:	7fefffff 	.word	0x7fefffff
 800978c:	7ff00000 	.word	0x7ff00000
 8009790:	43500000 	.word	0x43500000

08009794 <strncpy>:
 8009794:	b530      	push	{r4, r5, lr}
 8009796:	ea40 0401 	orr.w	r4, r0, r1
 800979a:	07a3      	lsls	r3, r4, #30
 800979c:	d101      	bne.n	80097a2 <strncpy+0xe>
 800979e:	2a03      	cmp	r2, #3
 80097a0:	d80f      	bhi.n	80097c2 <strncpy+0x2e>
 80097a2:	4684      	mov	ip, r0
 80097a4:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 80097a8:	e007      	b.n	80097ba <strncpy+0x26>
 80097aa:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 80097ae:	f803 1b01 	strb.w	r1, [r3], #1
 80097b2:	1e54      	subs	r4, r2, #1
 80097b4:	b1c1      	cbz	r1, 80097e8 <strncpy+0x54>
 80097b6:	469c      	mov	ip, r3
 80097b8:	4622      	mov	r2, r4
 80097ba:	4663      	mov	r3, ip
 80097bc:	2a00      	cmp	r2, #0
 80097be:	d1f4      	bne.n	80097aa <strncpy+0x16>
 80097c0:	bd30      	pop	{r4, r5, pc}
 80097c2:	460b      	mov	r3, r1
 80097c4:	4684      	mov	ip, r0
 80097c6:	4619      	mov	r1, r3
 80097c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80097cc:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 80097d0:	ea24 0405 	bic.w	r4, r4, r5
 80097d4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 80097d8:	d1e4      	bne.n	80097a4 <strncpy+0x10>
 80097da:	3a04      	subs	r2, #4
 80097dc:	2a03      	cmp	r2, #3
 80097de:	f84c 5b04 	str.w	r5, [ip], #4
 80097e2:	4619      	mov	r1, r3
 80097e4:	d8ef      	bhi.n	80097c6 <strncpy+0x32>
 80097e6:	e7dd      	b.n	80097a4 <strncpy+0x10>
 80097e8:	4462      	add	r2, ip
 80097ea:	2c00      	cmp	r4, #0
 80097ec:	d0e8      	beq.n	80097c0 <strncpy+0x2c>
 80097ee:	f803 1b01 	strb.w	r1, [r3], #1
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d1fb      	bne.n	80097ee <strncpy+0x5a>
 80097f6:	bd30      	pop	{r4, r5, pc}

080097f8 <__sprint_r.part.0>:
 80097f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80097fe:	049c      	lsls	r4, r3, #18
 8009800:	4690      	mov	r8, r2
 8009802:	d52d      	bpl.n	8009860 <__sprint_r.part.0+0x68>
 8009804:	6893      	ldr	r3, [r2, #8]
 8009806:	6812      	ldr	r2, [r2, #0]
 8009808:	b343      	cbz	r3, 800985c <__sprint_r.part.0+0x64>
 800980a:	468b      	mov	fp, r1
 800980c:	4606      	mov	r6, r0
 800980e:	f102 0908 	add.w	r9, r2, #8
 8009812:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 8009816:	ea5f 079a 	movs.w	r7, sl, lsr #2
 800981a:	d015      	beq.n	8009848 <__sprint_r.part.0+0x50>
 800981c:	3d04      	subs	r5, #4
 800981e:	2400      	movs	r4, #0
 8009820:	e001      	b.n	8009826 <__sprint_r.part.0+0x2e>
 8009822:	42a7      	cmp	r7, r4
 8009824:	d00e      	beq.n	8009844 <__sprint_r.part.0+0x4c>
 8009826:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800982a:	465a      	mov	r2, fp
 800982c:	4630      	mov	r0, r6
 800982e:	f001 f81d 	bl	800a86c <_fputwc_r>
 8009832:	1c43      	adds	r3, r0, #1
 8009834:	f104 0401 	add.w	r4, r4, #1
 8009838:	d1f3      	bne.n	8009822 <__sprint_r.part.0+0x2a>
 800983a:	2300      	movs	r3, #0
 800983c:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8009840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009848:	f02a 0a03 	bic.w	sl, sl, #3
 800984c:	eba3 030a 	sub.w	r3, r3, sl
 8009850:	f8c8 3008 	str.w	r3, [r8, #8]
 8009854:	f109 0908 	add.w	r9, r9, #8
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1da      	bne.n	8009812 <__sprint_r.part.0+0x1a>
 800985c:	2000      	movs	r0, #0
 800985e:	e7ec      	b.n	800983a <__sprint_r.part.0+0x42>
 8009860:	f001 f84e 	bl	800a900 <__sfvwrite_r>
 8009864:	2300      	movs	r3, #0
 8009866:	e9c8 3301 	strd	r3, r3, [r8, #4]
 800986a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986e:	bf00      	nop

08009870 <__sprint_r>:
 8009870:	b410      	push	{r4}
 8009872:	6894      	ldr	r4, [r2, #8]
 8009874:	b11c      	cbz	r4, 800987e <__sprint_r+0xe>
 8009876:	f85d 4b04 	ldr.w	r4, [sp], #4
 800987a:	f7ff bfbd 	b.w	80097f8 <__sprint_r.part.0>
 800987e:	4620      	mov	r0, r4
 8009880:	6054      	str	r4, [r2, #4]
 8009882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009886:	4770      	bx	lr

08009888 <_vfiprintf_r>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	ed2d 8b02 	vpush	{d8}
 8009890:	b0bb      	sub	sp, #236	; 0xec
 8009892:	ee08 1a10 	vmov	s16, r1
 8009896:	ee08 0a90 	vmov	s17, r0
 800989a:	461c      	mov	r4, r3
 800989c:	4617      	mov	r7, r2
 800989e:	9303      	str	r3, [sp, #12]
 80098a0:	b118      	cbz	r0, 80098aa <_vfiprintf_r+0x22>
 80098a2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 829c 	beq.w	8009de2 <_vfiprintf_r+0x55a>
 80098aa:	ee18 2a10 	vmov	r2, s16
 80098ae:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80098b0:	07de      	lsls	r6, r3, #31
 80098b2:	f140 819e 	bpl.w	8009bf2 <_vfiprintf_r+0x36a>
 80098b6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 80098ba:	b28a      	uxth	r2, r1
 80098bc:	0490      	lsls	r0, r2, #18
 80098be:	d409      	bmi.n	80098d4 <_vfiprintf_r+0x4c>
 80098c0:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 80098c4:	ee18 1a10 	vmov	r1, s16
 80098c8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80098ca:	818a      	strh	r2, [r1, #12]
 80098cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098d0:	b292      	uxth	r2, r2
 80098d2:	664b      	str	r3, [r1, #100]	; 0x64
 80098d4:	0711      	lsls	r1, r2, #28
 80098d6:	f140 80f8 	bpl.w	8009aca <_vfiprintf_r+0x242>
 80098da:	ee18 3a10 	vmov	r3, s16
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	f000 80f2 	beq.w	8009aca <_vfiprintf_r+0x242>
 80098e6:	f002 031a 	and.w	r3, r2, #26
 80098ea:	2b0a      	cmp	r3, #10
 80098ec:	f000 80fe 	beq.w	8009aec <_vfiprintf_r+0x264>
 80098f0:	ab11      	add	r3, sp, #68	; 0x44
 80098f2:	930e      	str	r3, [sp, #56]	; 0x38
 80098f4:	2300      	movs	r3, #0
 80098f6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 80098fa:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80098fe:	9306      	str	r3, [sp, #24]
 8009900:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009904:	9307      	str	r3, [sp, #28]
 8009906:	9302      	str	r3, [sp, #8]
 8009908:	783b      	ldrb	r3, [r7, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 815b 	beq.w	8009bc6 <_vfiprintf_r+0x33e>
 8009910:	463c      	mov	r4, r7
 8009912:	e004      	b.n	800991e <_vfiprintf_r+0x96>
 8009914:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009918:	2b00      	cmp	r3, #0
 800991a:	f000 8134 	beq.w	8009b86 <_vfiprintf_r+0x2fe>
 800991e:	2b25      	cmp	r3, #37	; 0x25
 8009920:	d1f8      	bne.n	8009914 <_vfiprintf_r+0x8c>
 8009922:	1be5      	subs	r5, r4, r7
 8009924:	f040 8131 	bne.w	8009b8a <_vfiprintf_r+0x302>
 8009928:	7823      	ldrb	r3, [r4, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	f000 814b 	beq.w	8009bc6 <_vfiprintf_r+0x33e>
 8009930:	f04f 0300 	mov.w	r3, #0
 8009934:	2500      	movs	r5, #0
 8009936:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800993a:	1c67      	adds	r7, r4, #1
 800993c:	7863      	ldrb	r3, [r4, #1]
 800993e:	9501      	str	r5, [sp, #4]
 8009940:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8009944:	242b      	movs	r4, #43	; 0x2b
 8009946:	3701      	adds	r7, #1
 8009948:	f1a3 0220 	sub.w	r2, r3, #32
 800994c:	2a5a      	cmp	r2, #90	; 0x5a
 800994e:	f200 8161 	bhi.w	8009c14 <_vfiprintf_r+0x38c>
 8009952:	e8df f012 	tbh	[pc, r2, lsl #1]
 8009956:	02ab      	.short	0x02ab
 8009958:	015f015f 	.word	0x015f015f
 800995c:	015f02a7 	.word	0x015f02a7
 8009960:	015f015f 	.word	0x015f015f
 8009964:	015f006a 	.word	0x015f006a
 8009968:	0249015f 	.word	0x0249015f
 800996c:	015f027e 	.word	0x015f027e
 8009970:	02b90254 	.word	0x02b90254
 8009974:	02b5015f 	.word	0x02b5015f
 8009978:	005b005b 	.word	0x005b005b
 800997c:	005b005b 	.word	0x005b005b
 8009980:	005b005b 	.word	0x005b005b
 8009984:	005b005b 	.word	0x005b005b
 8009988:	015f005b 	.word	0x015f005b
 800998c:	015f015f 	.word	0x015f015f
 8009990:	015f015f 	.word	0x015f015f
 8009994:	015f015f 	.word	0x015f015f
 8009998:	015f015f 	.word	0x015f015f
 800999c:	00840236 	.word	0x00840236
 80099a0:	015f015f 	.word	0x015f015f
 80099a4:	015f015f 	.word	0x015f015f
 80099a8:	015f015f 	.word	0x015f015f
 80099ac:	015f015f 	.word	0x015f015f
 80099b0:	015f015f 	.word	0x015f015f
 80099b4:	015f00e5 	.word	0x015f00e5
 80099b8:	015f015f 	.word	0x015f015f
 80099bc:	015f021a 	.word	0x015f021a
 80099c0:	015f026c 	.word	0x015f026c
 80099c4:	0548015f 	.word	0x0548015f
 80099c8:	015f015f 	.word	0x015f015f
 80099cc:	015f015f 	.word	0x015f015f
 80099d0:	015f015f 	.word	0x015f015f
 80099d4:	015f015f 	.word	0x015f015f
 80099d8:	015f015f 	.word	0x015f015f
 80099dc:	00860236 	.word	0x00860236
 80099e0:	015f015f 	.word	0x015f015f
 80099e4:	0262015f 	.word	0x0262015f
 80099e8:	00800086 	.word	0x00800086
 80099ec:	0258015f 	.word	0x0258015f
 80099f0:	0294015f 	.word	0x0294015f
 80099f4:	028200e7 	.word	0x028200e7
 80099f8:	015f0080 	.word	0x015f0080
 80099fc:	007e021a 	.word	0x007e021a
 8009a00:	015f0568 	.word	0x015f0568
 8009a04:	056a015f 	.word	0x056a015f
 8009a08:	007e015f 	.word	0x007e015f
 8009a0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009a10:	2100      	movs	r1, #0
 8009a12:	f817 3b01 	ldrb.w	r3, [r7], #1
 8009a16:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8009a1a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8009a1e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009a22:	2a09      	cmp	r2, #9
 8009a24:	d9f5      	bls.n	8009a12 <_vfiprintf_r+0x18a>
 8009a26:	9101      	str	r1, [sp, #4]
 8009a28:	e78e      	b.n	8009948 <_vfiprintf_r+0xc0>
 8009a2a:	ee18 0a90 	vmov	r0, s17
 8009a2e:	f7ff fa25 	bl	8008e7c <_localeconv_r>
 8009a32:	6843      	ldr	r3, [r0, #4]
 8009a34:	9308      	str	r3, [sp, #32]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7f7 f962 	bl	8000d00 <strlen>
 8009a3c:	9009      	str	r0, [sp, #36]	; 0x24
 8009a3e:	4606      	mov	r6, r0
 8009a40:	ee18 0a90 	vmov	r0, s17
 8009a44:	f7ff fa1a 	bl	8008e7c <_localeconv_r>
 8009a48:	6883      	ldr	r3, [r0, #8]
 8009a4a:	9307      	str	r3, [sp, #28]
 8009a4c:	2e00      	cmp	r6, #0
 8009a4e:	f040 84a5 	bne.w	800a39c <_vfiprintf_r+0xb14>
 8009a52:	783b      	ldrb	r3, [r7, #0]
 8009a54:	e777      	b.n	8009946 <_vfiprintf_r+0xbe>
 8009a56:	783b      	ldrb	r3, [r7, #0]
 8009a58:	f045 0520 	orr.w	r5, r5, #32
 8009a5c:	e773      	b.n	8009946 <_vfiprintf_r+0xbe>
 8009a5e:	f045 0510 	orr.w	r5, r5, #16
 8009a62:	06ac      	lsls	r4, r5, #26
 8009a64:	9e03      	ldr	r6, [sp, #12]
 8009a66:	f140 8182 	bpl.w	8009d6e <_vfiprintf_r+0x4e6>
 8009a6a:	3607      	adds	r6, #7
 8009a6c:	f026 0607 	bic.w	r6, r6, #7
 8009a70:	4632      	mov	r2, r6
 8009a72:	6873      	ldr	r3, [r6, #4]
 8009a74:	f852 6b08 	ldr.w	r6, [r2], #8
 8009a78:	9203      	str	r2, [sp, #12]
 8009a7a:	4698      	mov	r8, r3
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f2c0 8455 	blt.w	800a32c <_vfiprintf_r+0xaa4>
 8009a82:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8009a86:	f000 853a 	beq.w	800a4fe <_vfiprintf_r+0xc76>
 8009a8a:	ea56 0308 	orrs.w	r3, r6, r8
 8009a8e:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
 8009a92:	f000 8430 	beq.w	800a2f6 <_vfiprintf_r+0xa6e>
 8009a96:	2e0a      	cmp	r6, #10
 8009a98:	f178 0300 	sbcs.w	r3, r8, #0
 8009a9c:	f080 84e7 	bcs.w	800a46e <_vfiprintf_r+0xbe6>
 8009aa0:	3630      	adds	r6, #48	; 0x30
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f88d 60e7 	strb.w	r6, [sp, #231]	; 0xe7
 8009aa8:	4655      	mov	r5, sl
 8009aaa:	9300      	str	r3, [sp, #0]
 8009aac:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
 8009ab0:	9a00      	ldr	r2, [sp, #0]
 8009ab2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009ab6:	455a      	cmp	r2, fp
 8009ab8:	bfb8      	it	lt
 8009aba:	465a      	movlt	r2, fp
 8009abc:	4690      	mov	r8, r2
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	f000 80b7 	beq.w	8009c32 <_vfiprintf_r+0x3aa>
 8009ac4:	f102 0801 	add.w	r8, r2, #1
 8009ac8:	e0b3      	b.n	8009c32 <_vfiprintf_r+0x3aa>
 8009aca:	ee18 1a10 	vmov	r1, s16
 8009ace:	ee18 0a90 	vmov	r0, s17
 8009ad2:	ee18 5a10 	vmov	r5, s16
 8009ad6:	f7fd fe9f 	bl	8007818 <__swsetup_r>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f040 85a8 	bne.w	800a630 <_vfiprintf_r+0xda8>
 8009ae0:	89aa      	ldrh	r2, [r5, #12]
 8009ae2:	f002 031a 	and.w	r3, r2, #26
 8009ae6:	2b0a      	cmp	r3, #10
 8009ae8:	f47f af02 	bne.w	80098f0 <_vfiprintf_r+0x68>
 8009aec:	ee18 1a10 	vmov	r1, s16
 8009af0:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f6ff aefb 	blt.w	80098f0 <_vfiprintf_r+0x68>
 8009afa:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8009afc:	07de      	lsls	r6, r3, #31
 8009afe:	d402      	bmi.n	8009b06 <_vfiprintf_r+0x27e>
 8009b00:	0595      	lsls	r5, r2, #22
 8009b02:	f140 8573 	bpl.w	800a5ec <_vfiprintf_r+0xd64>
 8009b06:	ee18 1a10 	vmov	r1, s16
 8009b0a:	ee18 0a90 	vmov	r0, s17
 8009b0e:	4623      	mov	r3, r4
 8009b10:	463a      	mov	r2, r7
 8009b12:	b03b      	add	sp, #236	; 0xec
 8009b14:	ecbd 8b02 	vpop	{d8}
 8009b18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	f000 bdae 	b.w	800a67c <__sbprintf>
 8009b20:	f045 0510 	orr.w	r5, r5, #16
 8009b24:	f015 0820 	ands.w	r8, r5, #32
 8009b28:	f000 8112 	beq.w	8009d50 <_vfiprintf_r+0x4c8>
 8009b2c:	9e03      	ldr	r6, [sp, #12]
 8009b2e:	3607      	adds	r6, #7
 8009b30:	f026 0607 	bic.w	r6, r6, #7
 8009b34:	4633      	mov	r3, r6
 8009b36:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8009b3a:	f853 6b08 	ldr.w	r6, [r3], #8
 8009b3e:	9303      	str	r3, [sp, #12]
 8009b40:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 8009b44:	2300      	movs	r3, #0
 8009b46:	f04f 0200 	mov.w	r2, #0
 8009b4a:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8009b4e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8009b52:	f000 81d3 	beq.w	8009efc <_vfiprintf_r+0x674>
 8009b56:	ea56 0208 	orrs.w	r2, r6, r8
 8009b5a:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
 8009b5e:	f040 81cc 	bne.w	8009efa <_vfiprintf_r+0x672>
 8009b62:	f1bb 0f00 	cmp.w	fp, #0
 8009b66:	f040 84cd 	bne.w	800a504 <_vfiprintf_r+0xc7c>
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f040 83c8 	bne.w	800a300 <_vfiprintf_r+0xa78>
 8009b70:	f01a 0301 	ands.w	r3, sl, #1
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	f000 83f8 	beq.w	800a36a <_vfiprintf_r+0xae2>
 8009b7a:	2330      	movs	r3, #48	; 0x30
 8009b7c:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8009b80:	f10d 04e7 	add.w	r4, sp, #231	; 0xe7
 8009b84:	e794      	b.n	8009ab0 <_vfiprintf_r+0x228>
 8009b86:	1be5      	subs	r5, r4, r7
 8009b88:	d01d      	beq.n	8009bc6 <_vfiprintf_r+0x33e>
 8009b8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009b8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b8e:	3301      	adds	r3, #1
 8009b90:	442a      	add	r2, r5
 8009b92:	2b07      	cmp	r3, #7
 8009b94:	e9c9 7500 	strd	r7, r5, [r9]
 8009b98:	9210      	str	r2, [sp, #64]	; 0x40
 8009b9a:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b9c:	dc05      	bgt.n	8009baa <_vfiprintf_r+0x322>
 8009b9e:	f109 0908 	add.w	r9, r9, #8
 8009ba2:	9b02      	ldr	r3, [sp, #8]
 8009ba4:	442b      	add	r3, r5
 8009ba6:	9302      	str	r3, [sp, #8]
 8009ba8:	e6be      	b.n	8009928 <_vfiprintf_r+0xa0>
 8009baa:	2a00      	cmp	r2, #0
 8009bac:	f000 839f 	beq.w	800a2ee <_vfiprintf_r+0xa66>
 8009bb0:	ee18 1a10 	vmov	r1, s16
 8009bb4:	ee18 0a90 	vmov	r0, s17
 8009bb8:	aa0e      	add	r2, sp, #56	; 0x38
 8009bba:	f7ff fe1d 	bl	80097f8 <__sprint_r.part.0>
 8009bbe:	b940      	cbnz	r0, 8009bd2 <_vfiprintf_r+0x34a>
 8009bc0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009bc4:	e7ed      	b.n	8009ba2 <_vfiprintf_r+0x31a>
 8009bc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f040 8520 	bne.w	800a60e <_vfiprintf_r+0xd86>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bd2:	ee18 2a10 	vmov	r2, s16
 8009bd6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009bd8:	07d9      	lsls	r1, r3, #31
 8009bda:	f140 80ae 	bpl.w	8009d3a <_vfiprintf_r+0x4b2>
 8009bde:	8993      	ldrh	r3, [r2, #12]
 8009be0:	065b      	lsls	r3, r3, #25
 8009be2:	f100 852e 	bmi.w	800a642 <_vfiprintf_r+0xdba>
 8009be6:	9802      	ldr	r0, [sp, #8]
 8009be8:	b03b      	add	sp, #236	; 0xec
 8009bea:	ecbd 8b02 	vpop	{d8}
 8009bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf2:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8009bf6:	058d      	lsls	r5, r1, #22
 8009bf8:	ee18 3a10 	vmov	r3, s16
 8009bfc:	b28a      	uxth	r2, r1
 8009bfe:	f53f ae5d 	bmi.w	80098bc <_vfiprintf_r+0x34>
 8009c02:	ee18 5a10 	vmov	r5, s16
 8009c06:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009c08:	f7f7 fb12 	bl	8001230 <__retarget_lock_acquire_recursive>
 8009c0c:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 8009c10:	b28a      	uxth	r2, r1
 8009c12:	e653      	b.n	80098bc <_vfiprintf_r+0x34>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0d6      	beq.n	8009bc6 <_vfiprintf_r+0x33e>
 8009c18:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8009c1c:	f04f 0801 	mov.w	r8, #1
 8009c20:	f04f 0300 	mov.w	r3, #0
 8009c24:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8009c28:	f8cd 8000 	str.w	r8, [sp]
 8009c2c:	ac21      	add	r4, sp, #132	; 0x84
 8009c2e:	f04f 0b00 	mov.w	fp, #0
 8009c32:	f015 0302 	ands.w	r3, r5, #2
 8009c36:	9304      	str	r3, [sp, #16]
 8009c38:	bf18      	it	ne
 8009c3a:	f108 0802 	addne.w	r8, r8, #2
 8009c3e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8009c42:	9305      	str	r3, [sp, #20]
 8009c44:	d105      	bne.n	8009c52 <_vfiprintf_r+0x3ca>
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	eba3 0608 	sub.w	r6, r3, r8
 8009c4c:	2e00      	cmp	r6, #0
 8009c4e:	f300 827f 	bgt.w	800a150 <_vfiprintf_r+0x8c8>
 8009c52:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8009c56:	1c50      	adds	r0, r2, #1
 8009c58:	f89d 6033 	ldrb.w	r6, [sp, #51]	; 0x33
 8009c5c:	b18e      	cbz	r6, 8009c82 <_vfiprintf_r+0x3fa>
 8009c5e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8009c62:	3101      	adds	r1, #1
 8009c64:	f8c9 2000 	str.w	r2, [r9]
 8009c68:	2807      	cmp	r0, #7
 8009c6a:	f04f 0201 	mov.w	r2, #1
 8009c6e:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 8009c72:	f8c9 2004 	str.w	r2, [r9, #4]
 8009c76:	f300 824c 	bgt.w	800a112 <_vfiprintf_r+0x88a>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	f109 0908 	add.w	r9, r9, #8
 8009c80:	3001      	adds	r0, #1
 8009c82:	9b04      	ldr	r3, [sp, #16]
 8009c84:	b1eb      	cbz	r3, 8009cc2 <_vfiprintf_r+0x43a>
 8009c86:	ab0d      	add	r3, sp, #52	; 0x34
 8009c88:	3102      	adds	r1, #2
 8009c8a:	f8c9 3000 	str.w	r3, [r9]
 8009c8e:	2807      	cmp	r0, #7
 8009c90:	f04f 0302 	mov.w	r3, #2
 8009c94:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 8009c98:	f8c9 3004 	str.w	r3, [r9, #4]
 8009c9c:	f340 8253 	ble.w	800a146 <_vfiprintf_r+0x8be>
 8009ca0:	2900      	cmp	r1, #0
 8009ca2:	f000 831f 	beq.w	800a2e4 <_vfiprintf_r+0xa5c>
 8009ca6:	ee18 1a10 	vmov	r1, s16
 8009caa:	ee18 0a90 	vmov	r0, s17
 8009cae:	aa0e      	add	r2, sp, #56	; 0x38
 8009cb0:	f7ff fda2 	bl	80097f8 <__sprint_r.part.0>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d18c      	bne.n	8009bd2 <_vfiprintf_r+0x34a>
 8009cb8:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8009cbc:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009cc0:	1c50      	adds	r0, r2, #1
 8009cc2:	9b05      	ldr	r3, [sp, #20]
 8009cc4:	2b80      	cmp	r3, #128	; 0x80
 8009cc6:	f000 815a 	beq.w	8009f7e <_vfiprintf_r+0x6f6>
 8009cca:	9b00      	ldr	r3, [sp, #0]
 8009ccc:	ebab 0603 	sub.w	r6, fp, r3
 8009cd0:	2e00      	cmp	r6, #0
 8009cd2:	f300 81bd 	bgt.w	800a050 <_vfiprintf_r+0x7c8>
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	f8c9 4000 	str.w	r4, [r9]
 8009cdc:	4419      	add	r1, r3
 8009cde:	2807      	cmp	r0, #7
 8009ce0:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 8009ce4:	f8c9 3004 	str.w	r3, [r9, #4]
 8009ce8:	f340 8146 	ble.w	8009f78 <_vfiprintf_r+0x6f0>
 8009cec:	2900      	cmp	r1, #0
 8009cee:	f000 8285 	beq.w	800a1fc <_vfiprintf_r+0x974>
 8009cf2:	ee18 1a10 	vmov	r1, s16
 8009cf6:	ee18 0a90 	vmov	r0, s17
 8009cfa:	aa0e      	add	r2, sp, #56	; 0x38
 8009cfc:	f7ff fd7c 	bl	80097f8 <__sprint_r.part.0>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	f47f af66 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 8009d06:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009d08:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009d0c:	0768      	lsls	r0, r5, #29
 8009d0e:	d505      	bpl.n	8009d1c <_vfiprintf_r+0x494>
 8009d10:	9b01      	ldr	r3, [sp, #4]
 8009d12:	eba3 0408 	sub.w	r4, r3, r8
 8009d16:	2c00      	cmp	r4, #0
 8009d18:	f300 827a 	bgt.w	800a210 <_vfiprintf_r+0x988>
 8009d1c:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009d20:	4542      	cmp	r2, r8
 8009d22:	bfac      	ite	ge
 8009d24:	189b      	addge	r3, r3, r2
 8009d26:	4443      	addlt	r3, r8
 8009d28:	9302      	str	r3, [sp, #8]
 8009d2a:	2900      	cmp	r1, #0
 8009d2c:	f040 81e0 	bne.w	800a0f0 <_vfiprintf_r+0x868>
 8009d30:	2300      	movs	r3, #0
 8009d32:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d34:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009d38:	e5e6      	b.n	8009908 <_vfiprintf_r+0x80>
 8009d3a:	8993      	ldrh	r3, [r2, #12]
 8009d3c:	059a      	lsls	r2, r3, #22
 8009d3e:	f53f af4f 	bmi.w	8009be0 <_vfiprintf_r+0x358>
 8009d42:	ee18 4a10 	vmov	r4, s16
 8009d46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d48:	f7f7 fa74 	bl	8001234 <__retarget_lock_release_recursive>
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	e747      	b.n	8009be0 <_vfiprintf_r+0x358>
 8009d50:	f015 0310 	ands.w	r3, r5, #16
 8009d54:	f040 833a 	bne.w	800a3cc <_vfiprintf_r+0xb44>
 8009d58:	f015 0240 	ands.w	r2, r5, #64	; 0x40
 8009d5c:	f000 83f9 	beq.w	800a552 <_vfiprintf_r+0xcca>
 8009d60:	9a03      	ldr	r2, [sp, #12]
 8009d62:	f852 6b04 	ldr.w	r6, [r2], #4
 8009d66:	9203      	str	r2, [sp, #12]
 8009d68:	4698      	mov	r8, r3
 8009d6a:	b2b6      	uxth	r6, r6
 8009d6c:	e6e8      	b.n	8009b40 <_vfiprintf_r+0x2b8>
 8009d6e:	f856 3b04 	ldr.w	r3, [r6], #4
 8009d72:	9603      	str	r6, [sp, #12]
 8009d74:	06e8      	lsls	r0, r5, #27
 8009d76:	f100 8304 	bmi.w	800a382 <_vfiprintf_r+0xafa>
 8009d7a:	0669      	lsls	r1, r5, #25
 8009d7c:	f140 82fe 	bpl.w	800a37c <_vfiprintf_r+0xaf4>
 8009d80:	f343 38c0 	sbfx	r8, r3, #15, #1
 8009d84:	b21e      	sxth	r6, r3
 8009d86:	4643      	mov	r3, r8
 8009d88:	e678      	b.n	8009a7c <_vfiprintf_r+0x1f4>
 8009d8a:	9e03      	ldr	r6, [sp, #12]
 8009d8c:	f856 4b04 	ldr.w	r4, [r6], #4
 8009d90:	f04f 0300 	mov.w	r3, #0
 8009d94:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8009d98:	2c00      	cmp	r4, #0
 8009d9a:	f000 83c1 	beq.w	800a520 <_vfiprintf_r+0xc98>
 8009d9e:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8009da2:	f000 8345 	beq.w	800a430 <_vfiprintf_r+0xba8>
 8009da6:	465a      	mov	r2, fp
 8009da8:	2100      	movs	r1, #0
 8009daa:	4620      	mov	r0, r4
 8009dac:	f7f7 f818 	bl	8000de0 <memchr>
 8009db0:	2800      	cmp	r0, #0
 8009db2:	f000 8420 	beq.w	800a5f6 <_vfiprintf_r+0xd6e>
 8009db6:	1b03      	subs	r3, r0, r4
 8009db8:	9300      	str	r3, [sp, #0]
 8009dba:	9603      	str	r6, [sp, #12]
 8009dbc:	f04f 0b00 	mov.w	fp, #0
 8009dc0:	e676      	b.n	8009ab0 <_vfiprintf_r+0x228>
 8009dc2:	9e03      	ldr	r6, [sp, #12]
 8009dc4:	f04f 0300 	mov.w	r3, #0
 8009dc8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8009dcc:	f04f 0801 	mov.w	r8, #1
 8009dd0:	f856 3b04 	ldr.w	r3, [r6], #4
 8009dd4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8009dd8:	9603      	str	r6, [sp, #12]
 8009dda:	f8cd 8000 	str.w	r8, [sp]
 8009dde:	ac21      	add	r4, sp, #132	; 0x84
 8009de0:	e725      	b.n	8009c2e <_vfiprintf_r+0x3a6>
 8009de2:	f7fb fb09 	bl	80053f8 <__sinit>
 8009de6:	e560      	b.n	80098aa <_vfiprintf_r+0x22>
 8009de8:	9b03      	ldr	r3, [sp, #12]
 8009dea:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	f280 82b6 	bge.w	800a362 <_vfiprintf_r+0xada>
 8009df6:	9a01      	ldr	r2, [sp, #4]
 8009df8:	9303      	str	r3, [sp, #12]
 8009dfa:	4252      	negs	r2, r2
 8009dfc:	9201      	str	r2, [sp, #4]
 8009dfe:	783b      	ldrb	r3, [r7, #0]
 8009e00:	f045 0504 	orr.w	r5, r5, #4
 8009e04:	e59f      	b.n	8009946 <_vfiprintf_r+0xbe>
 8009e06:	783b      	ldrb	r3, [r7, #0]
 8009e08:	2b6c      	cmp	r3, #108	; 0x6c
 8009e0a:	bf03      	ittte	eq
 8009e0c:	787b      	ldrbeq	r3, [r7, #1]
 8009e0e:	f045 0520 	orreq.w	r5, r5, #32
 8009e12:	3701      	addeq	r7, #1
 8009e14:	f045 0510 	orrne.w	r5, r5, #16
 8009e18:	e595      	b.n	8009946 <_vfiprintf_r+0xbe>
 8009e1a:	783b      	ldrb	r3, [r7, #0]
 8009e1c:	2b68      	cmp	r3, #104	; 0x68
 8009e1e:	bf03      	ittte	eq
 8009e20:	787b      	ldrbeq	r3, [r7, #1]
 8009e22:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
 8009e26:	3701      	addeq	r7, #1
 8009e28:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
 8009e2c:	e58b      	b.n	8009946 <_vfiprintf_r+0xbe>
 8009e2e:	f045 0a10 	orr.w	sl, r5, #16
 8009e32:	f01a 0820 	ands.w	r8, sl, #32
 8009e36:	f000 826a 	beq.w	800a30e <_vfiprintf_r+0xa86>
 8009e3a:	9e03      	ldr	r6, [sp, #12]
 8009e3c:	3607      	adds	r6, #7
 8009e3e:	f026 0607 	bic.w	r6, r6, #7
 8009e42:	4633      	mov	r3, r6
 8009e44:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8009e48:	f853 6b08 	ldr.w	r6, [r3], #8
 8009e4c:	9303      	str	r3, [sp, #12]
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e679      	b.n	8009b46 <_vfiprintf_r+0x2be>
 8009e52:	783b      	ldrb	r3, [r7, #0]
 8009e54:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
 8009e58:	e575      	b.n	8009946 <_vfiprintf_r+0xbe>
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	f853 6b04 	ldr.w	r6, [r3], #4
 8009e60:	9303      	str	r3, [sp, #12]
 8009e62:	2330      	movs	r3, #48	; 0x30
 8009e64:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8009e68:	2378      	movs	r3, #120	; 0x78
 8009e6a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8009e6e:	4bc1      	ldr	r3, [pc, #772]	; (800a174 <_vfiprintf_r+0x8ec>)
 8009e70:	9306      	str	r3, [sp, #24]
 8009e72:	f045 0a02 	orr.w	sl, r5, #2
 8009e76:	f04f 0800 	mov.w	r8, #0
 8009e7a:	2302      	movs	r3, #2
 8009e7c:	e663      	b.n	8009b46 <_vfiprintf_r+0x2be>
 8009e7e:	06ae      	lsls	r6, r5, #26
 8009e80:	f100 829a 	bmi.w	800a3b8 <_vfiprintf_r+0xb30>
 8009e84:	06ec      	lsls	r4, r5, #27
 8009e86:	f100 8343 	bmi.w	800a510 <_vfiprintf_r+0xc88>
 8009e8a:	0668      	lsls	r0, r5, #25
 8009e8c:	f100 83a0 	bmi.w	800a5d0 <_vfiprintf_r+0xd48>
 8009e90:	05a9      	lsls	r1, r5, #22
 8009e92:	f140 833d 	bpl.w	800a510 <_vfiprintf_r+0xc88>
 8009e96:	9e03      	ldr	r6, [sp, #12]
 8009e98:	9a02      	ldr	r2, [sp, #8]
 8009e9a:	f856 3b04 	ldr.w	r3, [r6], #4
 8009e9e:	9603      	str	r6, [sp, #12]
 8009ea0:	701a      	strb	r2, [r3, #0]
 8009ea2:	e531      	b.n	8009908 <_vfiprintf_r+0x80>
 8009ea4:	783b      	ldrb	r3, [r7, #0]
 8009ea6:	f045 0501 	orr.w	r5, r5, #1
 8009eaa:	e54c      	b.n	8009946 <_vfiprintf_r+0xbe>
 8009eac:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f47f adce 	bne.w	8009a52 <_vfiprintf_r+0x1ca>
 8009eb6:	2320      	movs	r3, #32
 8009eb8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8009ebc:	783b      	ldrb	r3, [r7, #0]
 8009ebe:	e542      	b.n	8009946 <_vfiprintf_r+0xbe>
 8009ec0:	783b      	ldrb	r3, [r7, #0]
 8009ec2:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8009ec6:	e53e      	b.n	8009946 <_vfiprintf_r+0xbe>
 8009ec8:	4639      	mov	r1, r7
 8009eca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ece:	2b2a      	cmp	r3, #42	; 0x2a
 8009ed0:	f000 83c0 	beq.w	800a654 <_vfiprintf_r+0xdcc>
 8009ed4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009ed8:	2a09      	cmp	r2, #9
 8009eda:	460f      	mov	r7, r1
 8009edc:	f04f 0b00 	mov.w	fp, #0
 8009ee0:	f63f ad32 	bhi.w	8009948 <_vfiprintf_r+0xc0>
 8009ee4:	f817 3b01 	ldrb.w	r3, [r7], #1
 8009ee8:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
 8009eec:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
 8009ef0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009ef4:	2a09      	cmp	r2, #9
 8009ef6:	d9f5      	bls.n	8009ee4 <_vfiprintf_r+0x65c>
 8009ef8:	e526      	b.n	8009948 <_vfiprintf_r+0xc0>
 8009efa:	46aa      	mov	sl, r5
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	f43f adca 	beq.w	8009a96 <_vfiprintf_r+0x20e>
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	ac3a      	add	r4, sp, #232	; 0xe8
 8009f06:	d112      	bne.n	8009f2e <_vfiprintf_r+0x6a6>
 8009f08:	9a06      	ldr	r2, [sp, #24]
 8009f0a:	f006 030f 	and.w	r3, r6, #15
 8009f0e:	0936      	lsrs	r6, r6, #4
 8009f10:	5cd3      	ldrb	r3, [r2, r3]
 8009f12:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8009f16:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
 8009f1a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009f1e:	ea56 0308 	orrs.w	r3, r6, r8
 8009f22:	d1f2      	bne.n	8009f0a <_vfiprintf_r+0x682>
 8009f24:	ab3a      	add	r3, sp, #232	; 0xe8
 8009f26:	1b1b      	subs	r3, r3, r4
 8009f28:	4655      	mov	r5, sl
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	e5c0      	b.n	8009ab0 <_vfiprintf_r+0x228>
 8009f2e:	f006 0307 	and.w	r3, r6, #7
 8009f32:	08f6      	lsrs	r6, r6, #3
 8009f34:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
 8009f38:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8009f3c:	3330      	adds	r3, #48	; 0x30
 8009f3e:	ea56 0108 	orrs.w	r1, r6, r8
 8009f42:	4622      	mov	r2, r4
 8009f44:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8009f48:	d1f1      	bne.n	8009f2e <_vfiprintf_r+0x6a6>
 8009f4a:	f01a 0f01 	tst.w	sl, #1
 8009f4e:	d0e9      	beq.n	8009f24 <_vfiprintf_r+0x69c>
 8009f50:	2b30      	cmp	r3, #48	; 0x30
 8009f52:	d0e7      	beq.n	8009f24 <_vfiprintf_r+0x69c>
 8009f54:	2330      	movs	r3, #48	; 0x30
 8009f56:	3a02      	subs	r2, #2
 8009f58:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009f5c:	ab3a      	add	r3, sp, #232	; 0xe8
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	4655      	mov	r5, sl
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	4614      	mov	r4, r2
 8009f66:	e5a3      	b.n	8009ab0 <_vfiprintf_r+0x228>
 8009f68:	9900      	ldr	r1, [sp, #0]
 8009f6a:	9411      	str	r4, [sp, #68]	; 0x44
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	9112      	str	r1, [sp, #72]	; 0x48
 8009f70:	9110      	str	r1, [sp, #64]	; 0x40
 8009f72:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f74:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009f78:	f109 0908 	add.w	r9, r9, #8
 8009f7c:	e6c6      	b.n	8009d0c <_vfiprintf_r+0x484>
 8009f7e:	9b01      	ldr	r3, [sp, #4]
 8009f80:	eba3 0608 	sub.w	r6, r3, r8
 8009f84:	2e00      	cmp	r6, #0
 8009f86:	f77f aea0 	ble.w	8009cca <_vfiprintf_r+0x442>
 8009f8a:	2e10      	cmp	r6, #16
 8009f8c:	f340 835e 	ble.w	800a64c <_vfiprintf_r+0xdc4>
 8009f90:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 800a178 <_vfiprintf_r+0x8f0>
 8009f94:	4653      	mov	r3, sl
 8009f96:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009f9a:	46ba      	mov	sl, r7
 8009f9c:	ee18 4a90 	vmov	r4, s17
 8009fa0:	ee18 5a10 	vmov	r5, s16
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4696      	mov	lr, r2
 8009fa8:	461f      	mov	r7, r3
 8009faa:	e007      	b.n	8009fbc <_vfiprintf_r+0x734>
 8009fac:	f10e 0c02 	add.w	ip, lr, #2
 8009fb0:	f109 0908 	add.w	r9, r9, #8
 8009fb4:	4696      	mov	lr, r2
 8009fb6:	3e10      	subs	r6, #16
 8009fb8:	2e10      	cmp	r6, #16
 8009fba:	dd1f      	ble.n	8009ffc <_vfiprintf_r+0x774>
 8009fbc:	f10e 0201 	add.w	r2, lr, #1
 8009fc0:	3010      	adds	r0, #16
 8009fc2:	2310      	movs	r3, #16
 8009fc4:	2a07      	cmp	r2, #7
 8009fc6:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
 8009fca:	f8c9 7000 	str.w	r7, [r9]
 8009fce:	f8c9 3004 	str.w	r3, [r9, #4]
 8009fd2:	ddeb      	ble.n	8009fac <_vfiprintf_r+0x724>
 8009fd4:	aa0e      	add	r2, sp, #56	; 0x38
 8009fd6:	2800      	cmp	r0, #0
 8009fd8:	f000 8095 	beq.w	800a106 <_vfiprintf_r+0x87e>
 8009fdc:	4629      	mov	r1, r5
 8009fde:	4620      	mov	r0, r4
 8009fe0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 8009fe4:	f7ff fc08 	bl	80097f8 <__sprint_r.part.0>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	f47f adf2 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 8009fee:	e9dd e00f 	ldrd	lr, r0, [sp, #60]	; 0x3c
 8009ff2:	3e10      	subs	r6, #16
 8009ff4:	2e10      	cmp	r6, #16
 8009ff6:	f10e 0c01 	add.w	ip, lr, #1
 8009ffa:	dcdf      	bgt.n	8009fbc <_vfiprintf_r+0x734>
 8009ffc:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a000:	463b      	mov	r3, r7
 800a002:	4601      	mov	r1, r0
 800a004:	4657      	mov	r7, sl
 800a006:	469a      	mov	sl, r3
 800a008:	4431      	add	r1, r6
 800a00a:	f1bc 0f07 	cmp.w	ip, #7
 800a00e:	e9cd c10f 	strd	ip, r1, [sp, #60]	; 0x3c
 800a012:	f8c9 a000 	str.w	sl, [r9]
 800a016:	f8c9 6004 	str.w	r6, [r9, #4]
 800a01a:	f340 81a9 	ble.w	800a370 <_vfiprintf_r+0xae8>
 800a01e:	2900      	cmp	r1, #0
 800a020:	f000 82c6 	beq.w	800a5b0 <_vfiprintf_r+0xd28>
 800a024:	ee18 1a10 	vmov	r1, s16
 800a028:	ee18 0a90 	vmov	r0, s17
 800a02c:	aa0e      	add	r2, sp, #56	; 0x38
 800a02e:	f7ff fbe3 	bl	80097f8 <__sprint_r.part.0>
 800a032:	2800      	cmp	r0, #0
 800a034:	f47f adcd 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 800a038:	9b00      	ldr	r3, [sp, #0]
 800a03a:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800a03e:	ebab 0603 	sub.w	r6, fp, r3
 800a042:	2e00      	cmp	r6, #0
 800a044:	f102 0001 	add.w	r0, r2, #1
 800a048:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a04c:	f77f ae43 	ble.w	8009cd6 <_vfiprintf_r+0x44e>
 800a050:	2e10      	cmp	r6, #16
 800a052:	f8df a124 	ldr.w	sl, [pc, #292]	; 800a178 <_vfiprintf_r+0x8f0>
 800a056:	dd37      	ble.n	800a0c8 <_vfiprintf_r+0x840>
 800a058:	4653      	mov	r3, sl
 800a05a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a05e:	46ba      	mov	sl, r7
 800a060:	ee18 4a90 	vmov	r4, s17
 800a064:	ee18 5a10 	vmov	r5, s16
 800a068:	f04f 0b10 	mov.w	fp, #16
 800a06c:	4608      	mov	r0, r1
 800a06e:	4694      	mov	ip, r2
 800a070:	461f      	mov	r7, r3
 800a072:	e007      	b.n	800a084 <_vfiprintf_r+0x7fc>
 800a074:	f10c 0e02 	add.w	lr, ip, #2
 800a078:	f109 0908 	add.w	r9, r9, #8
 800a07c:	4694      	mov	ip, r2
 800a07e:	3e10      	subs	r6, #16
 800a080:	2e10      	cmp	r6, #16
 800a082:	dd1a      	ble.n	800a0ba <_vfiprintf_r+0x832>
 800a084:	f10c 0201 	add.w	r2, ip, #1
 800a088:	3010      	adds	r0, #16
 800a08a:	2a07      	cmp	r2, #7
 800a08c:	e9c9 7b00 	strd	r7, fp, [r9]
 800a090:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
 800a094:	ddee      	ble.n	800a074 <_vfiprintf_r+0x7ec>
 800a096:	aa0e      	add	r2, sp, #56	; 0x38
 800a098:	b320      	cbz	r0, 800a0e4 <_vfiprintf_r+0x85c>
 800a09a:	4629      	mov	r1, r5
 800a09c:	4620      	mov	r0, r4
 800a09e:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a0a2:	f7ff fba9 	bl	80097f8 <__sprint_r.part.0>
 800a0a6:	2800      	cmp	r0, #0
 800a0a8:	f47f ad93 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 800a0ac:	e9dd c00f 	ldrd	ip, r0, [sp, #60]	; 0x3c
 800a0b0:	3e10      	subs	r6, #16
 800a0b2:	2e10      	cmp	r6, #16
 800a0b4:	f10c 0e01 	add.w	lr, ip, #1
 800a0b8:	dce4      	bgt.n	800a084 <_vfiprintf_r+0x7fc>
 800a0ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a0be:	463b      	mov	r3, r7
 800a0c0:	4601      	mov	r1, r0
 800a0c2:	4657      	mov	r7, sl
 800a0c4:	4670      	mov	r0, lr
 800a0c6:	469a      	mov	sl, r3
 800a0c8:	4431      	add	r1, r6
 800a0ca:	2807      	cmp	r0, #7
 800a0cc:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 800a0d0:	f8c9 a000 	str.w	sl, [r9]
 800a0d4:	f8c9 6004 	str.w	r6, [r9, #4]
 800a0d8:	f300 80ee 	bgt.w	800a2b8 <_vfiprintf_r+0xa30>
 800a0dc:	f109 0908 	add.w	r9, r9, #8
 800a0e0:	3001      	adds	r0, #1
 800a0e2:	e5f8      	b.n	8009cd6 <_vfiprintf_r+0x44e>
 800a0e4:	f04f 0e01 	mov.w	lr, #1
 800a0e8:	4684      	mov	ip, r0
 800a0ea:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a0ee:	e7c6      	b.n	800a07e <_vfiprintf_r+0x7f6>
 800a0f0:	ee18 1a10 	vmov	r1, s16
 800a0f4:	ee18 0a90 	vmov	r0, s17
 800a0f8:	aa0e      	add	r2, sp, #56	; 0x38
 800a0fa:	f7ff fb7d 	bl	80097f8 <__sprint_r.part.0>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f43f ae16 	beq.w	8009d30 <_vfiprintf_r+0x4a8>
 800a104:	e565      	b.n	8009bd2 <_vfiprintf_r+0x34a>
 800a106:	f04f 0c01 	mov.w	ip, #1
 800a10a:	4686      	mov	lr, r0
 800a10c:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a110:	e751      	b.n	8009fb6 <_vfiprintf_r+0x72e>
 800a112:	2900      	cmp	r1, #0
 800a114:	f000 80e3 	beq.w	800a2de <_vfiprintf_r+0xa56>
 800a118:	ee18 1a10 	vmov	r1, s16
 800a11c:	ee18 0a90 	vmov	r0, s17
 800a120:	aa0e      	add	r2, sp, #56	; 0x38
 800a122:	f7ff fb69 	bl	80097f8 <__sprint_r.part.0>
 800a126:	2800      	cmp	r0, #0
 800a128:	f47f ad53 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 800a12c:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800a130:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a134:	1c50      	adds	r0, r2, #1
 800a136:	e5a4      	b.n	8009c82 <_vfiprintf_r+0x3fa>
 800a138:	2102      	movs	r1, #2
 800a13a:	ab0d      	add	r3, sp, #52	; 0x34
 800a13c:	9112      	str	r1, [sp, #72]	; 0x48
 800a13e:	9311      	str	r3, [sp, #68]	; 0x44
 800a140:	2001      	movs	r0, #1
 800a142:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a146:	4602      	mov	r2, r0
 800a148:	f109 0908 	add.w	r9, r9, #8
 800a14c:	1c50      	adds	r0, r2, #1
 800a14e:	e5b8      	b.n	8009cc2 <_vfiprintf_r+0x43a>
 800a150:	2e10      	cmp	r6, #16
 800a152:	f340 8256 	ble.w	800a602 <_vfiprintf_r+0xd7a>
 800a156:	e9dd c10f 	ldrd	ip, r1, [sp, #60]	; 0x3c
 800a15a:	f8df a020 	ldr.w	sl, [pc, #32]	; 800a17c <_vfiprintf_r+0x8f4>
 800a15e:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800a162:	2310      	movs	r3, #16
 800a164:	4654      	mov	r4, sl
 800a166:	ee18 5a10 	vmov	r5, s16
 800a16a:	ee18 aa90 	vmov	sl, s17
 800a16e:	4608      	mov	r0, r1
 800a170:	e00e      	b.n	800a190 <_vfiprintf_r+0x908>
 800a172:	bf00      	nop
 800a174:	0800b914 	.word	0x0800b914
 800a178:	0800bb9c 	.word	0x0800bb9c
 800a17c:	0800bb8c 	.word	0x0800bb8c
 800a180:	f10c 0e02 	add.w	lr, ip, #2
 800a184:	f109 0908 	add.w	r9, r9, #8
 800a188:	4694      	mov	ip, r2
 800a18a:	3e10      	subs	r6, #16
 800a18c:	2e10      	cmp	r6, #16
 800a18e:	dd1c      	ble.n	800a1ca <_vfiprintf_r+0x942>
 800a190:	f10c 0201 	add.w	r2, ip, #1
 800a194:	3010      	adds	r0, #16
 800a196:	2a07      	cmp	r2, #7
 800a198:	e9c9 4300 	strd	r4, r3, [r9]
 800a19c:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
 800a1a0:	ddee      	ble.n	800a180 <_vfiprintf_r+0x8f8>
 800a1a2:	aa0e      	add	r2, sp, #56	; 0x38
 800a1a4:	b320      	cbz	r0, 800a1f0 <_vfiprintf_r+0x968>
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	4650      	mov	r0, sl
 800a1aa:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a1ae:	f7ff fb23 	bl	80097f8 <__sprint_r.part.0>
 800a1b2:	2800      	cmp	r0, #0
 800a1b4:	f47f ad0d 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 800a1b8:	e9dd c00f 	ldrd	ip, r0, [sp, #60]	; 0x3c
 800a1bc:	3e10      	subs	r6, #16
 800a1be:	2e10      	cmp	r6, #16
 800a1c0:	f10c 0e01 	add.w	lr, ip, #1
 800a1c4:	f04f 0310 	mov.w	r3, #16
 800a1c8:	dce2      	bgt.n	800a190 <_vfiprintf_r+0x908>
 800a1ca:	46a2      	mov	sl, r4
 800a1cc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800a1ce:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a1d0:	4601      	mov	r1, r0
 800a1d2:	4672      	mov	r2, lr
 800a1d4:	4431      	add	r1, r6
 800a1d6:	2a07      	cmp	r2, #7
 800a1d8:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800a1dc:	f8c9 a000 	str.w	sl, [r9]
 800a1e0:	f8c9 6004 	str.w	r6, [r9, #4]
 800a1e4:	f300 80ab 	bgt.w	800a33e <_vfiprintf_r+0xab6>
 800a1e8:	f109 0908 	add.w	r9, r9, #8
 800a1ec:	1c50      	adds	r0, r2, #1
 800a1ee:	e533      	b.n	8009c58 <_vfiprintf_r+0x3d0>
 800a1f0:	4684      	mov	ip, r0
 800a1f2:	f04f 0e01 	mov.w	lr, #1
 800a1f6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a1fa:	e7c6      	b.n	800a18a <_vfiprintf_r+0x902>
 800a1fc:	076c      	lsls	r4, r5, #29
 800a1fe:	910f      	str	r1, [sp, #60]	; 0x3c
 800a200:	d552      	bpl.n	800a2a8 <_vfiprintf_r+0xa20>
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	eba3 0408 	sub.w	r4, r3, r8
 800a208:	2c00      	cmp	r4, #0
 800a20a:	dd4d      	ble.n	800a2a8 <_vfiprintf_r+0xa20>
 800a20c:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a210:	2c10      	cmp	r4, #16
 800a212:	f340 8208 	ble.w	800a626 <_vfiprintf_r+0xd9e>
 800a216:	f8df a45c 	ldr.w	sl, [pc, #1116]	; 800a674 <_vfiprintf_r+0xdec>
 800a21a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a21c:	460b      	mov	r3, r1
 800a21e:	46bb      	mov	fp, r7
 800a220:	4649      	mov	r1, r9
 800a222:	4657      	mov	r7, sl
 800a224:	ee18 9a10 	vmov	r9, s16
 800a228:	ee18 aa90 	vmov	sl, s17
 800a22c:	2510      	movs	r5, #16
 800a22e:	e005      	b.n	800a23c <_vfiprintf_r+0x9b4>
 800a230:	1c90      	adds	r0, r2, #2
 800a232:	3108      	adds	r1, #8
 800a234:	4632      	mov	r2, r6
 800a236:	3c10      	subs	r4, #16
 800a238:	2c10      	cmp	r4, #16
 800a23a:	dd18      	ble.n	800a26e <_vfiprintf_r+0x9e6>
 800a23c:	1c56      	adds	r6, r2, #1
 800a23e:	3310      	adds	r3, #16
 800a240:	2e07      	cmp	r6, #7
 800a242:	e9c1 7500 	strd	r7, r5, [r1]
 800a246:	e9cd 630f 	strd	r6, r3, [sp, #60]	; 0x3c
 800a24a:	ddf1      	ble.n	800a230 <_vfiprintf_r+0x9a8>
 800a24c:	aa0e      	add	r2, sp, #56	; 0x38
 800a24e:	b33b      	cbz	r3, 800a2a0 <_vfiprintf_r+0xa18>
 800a250:	4649      	mov	r1, r9
 800a252:	4650      	mov	r0, sl
 800a254:	f7ff fad0 	bl	80097f8 <__sprint_r.part.0>
 800a258:	2800      	cmp	r0, #0
 800a25a:	f47f acba 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 800a25e:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	; 0x3c
 800a262:	3c10      	subs	r4, #16
 800a264:	2c10      	cmp	r4, #16
 800a266:	f102 0001 	add.w	r0, r2, #1
 800a26a:	a911      	add	r1, sp, #68	; 0x44
 800a26c:	dce6      	bgt.n	800a23c <_vfiprintf_r+0x9b4>
 800a26e:	4689      	mov	r9, r1
 800a270:	46ba      	mov	sl, r7
 800a272:	4619      	mov	r1, r3
 800a274:	465f      	mov	r7, fp
 800a276:	4421      	add	r1, r4
 800a278:	2807      	cmp	r0, #7
 800a27a:	e9c9 a400 	strd	sl, r4, [r9]
 800a27e:	e9cd 010f 	strd	r0, r1, [sp, #60]	; 0x3c
 800a282:	f77f ad4b 	ble.w	8009d1c <_vfiprintf_r+0x494>
 800a286:	b179      	cbz	r1, 800a2a8 <_vfiprintf_r+0xa20>
 800a288:	ee18 1a10 	vmov	r1, s16
 800a28c:	ee18 0a90 	vmov	r0, s17
 800a290:	aa0e      	add	r2, sp, #56	; 0x38
 800a292:	f7ff fab1 	bl	80097f8 <__sprint_r.part.0>
 800a296:	2800      	cmp	r0, #0
 800a298:	f47f ac9b 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 800a29c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a29e:	e53d      	b.n	8009d1c <_vfiprintf_r+0x494>
 800a2a0:	2001      	movs	r0, #1
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	a911      	add	r1, sp, #68	; 0x44
 800a2a6:	e7c6      	b.n	800a236 <_vfiprintf_r+0x9ae>
 800a2a8:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a2ac:	4542      	cmp	r2, r8
 800a2ae:	bfac      	ite	ge
 800a2b0:	189b      	addge	r3, r3, r2
 800a2b2:	4443      	addlt	r3, r8
 800a2b4:	9302      	str	r3, [sp, #8]
 800a2b6:	e53b      	b.n	8009d30 <_vfiprintf_r+0x4a8>
 800a2b8:	2900      	cmp	r1, #0
 800a2ba:	f43f ae55 	beq.w	8009f68 <_vfiprintf_r+0x6e0>
 800a2be:	ee18 1a10 	vmov	r1, s16
 800a2c2:	ee18 0a90 	vmov	r0, s17
 800a2c6:	aa0e      	add	r2, sp, #56	; 0x38
 800a2c8:	f7ff fa96 	bl	80097f8 <__sprint_r.part.0>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	f47f ac80 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 800a2d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a2d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a2dc:	e4fb      	b.n	8009cd6 <_vfiprintf_r+0x44e>
 800a2de:	9b04      	ldr	r3, [sp, #16]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d179      	bne.n	800a3d8 <_vfiprintf_r+0xb50>
 800a2e4:	2001      	movs	r0, #1
 800a2e6:	460a      	mov	r2, r1
 800a2e8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a2ec:	e4e9      	b.n	8009cc2 <_vfiprintf_r+0x43a>
 800a2ee:	920f      	str	r2, [sp, #60]	; 0x3c
 800a2f0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a2f4:	e455      	b.n	8009ba2 <_vfiprintf_r+0x31a>
 800a2f6:	f1bb 0f00 	cmp.w	fp, #0
 800a2fa:	f47f abd1 	bne.w	8009aa0 <_vfiprintf_r+0x218>
 800a2fe:	4655      	mov	r5, sl
 800a300:	f04f 0b00 	mov.w	fp, #0
 800a304:	f8cd b000 	str.w	fp, [sp]
 800a308:	ac3a      	add	r4, sp, #232	; 0xe8
 800a30a:	f7ff bbd1 	b.w	8009ab0 <_vfiprintf_r+0x228>
 800a30e:	f01a 0310 	ands.w	r3, sl, #16
 800a312:	d13c      	bne.n	800a38e <_vfiprintf_r+0xb06>
 800a314:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 800a318:	f000 810c 	beq.w	800a534 <_vfiprintf_r+0xcac>
 800a31c:	9a03      	ldr	r2, [sp, #12]
 800a31e:	f852 6b04 	ldr.w	r6, [r2], #4
 800a322:	9203      	str	r2, [sp, #12]
 800a324:	4698      	mov	r8, r3
 800a326:	b2b6      	uxth	r6, r6
 800a328:	2301      	movs	r3, #1
 800a32a:	e40c      	b.n	8009b46 <_vfiprintf_r+0x2be>
 800a32c:	232d      	movs	r3, #45	; 0x2d
 800a32e:	4276      	negs	r6, r6
 800a330:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800a334:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 800a338:	46aa      	mov	sl, r5
 800a33a:	2301      	movs	r3, #1
 800a33c:	e407      	b.n	8009b4e <_vfiprintf_r+0x2c6>
 800a33e:	2900      	cmp	r1, #0
 800a340:	d07f      	beq.n	800a442 <_vfiprintf_r+0xbba>
 800a342:	ee18 1a10 	vmov	r1, s16
 800a346:	ee18 0a90 	vmov	r0, s17
 800a34a:	aa0e      	add	r2, sp, #56	; 0x38
 800a34c:	f7ff fa54 	bl	80097f8 <__sprint_r.part.0>
 800a350:	2800      	cmp	r0, #0
 800a352:	f47f ac3e 	bne.w	8009bd2 <_vfiprintf_r+0x34a>
 800a356:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800a35a:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a35e:	1c50      	adds	r0, r2, #1
 800a360:	e47a      	b.n	8009c58 <_vfiprintf_r+0x3d0>
 800a362:	9303      	str	r3, [sp, #12]
 800a364:	783b      	ldrb	r3, [r7, #0]
 800a366:	f7ff baee 	b.w	8009946 <_vfiprintf_r+0xbe>
 800a36a:	ac3a      	add	r4, sp, #232	; 0xe8
 800a36c:	f7ff bba0 	b.w	8009ab0 <_vfiprintf_r+0x228>
 800a370:	f109 0908 	add.w	r9, r9, #8
 800a374:	f10c 0001 	add.w	r0, ip, #1
 800a378:	4662      	mov	r2, ip
 800a37a:	e4a6      	b.n	8009cca <_vfiprintf_r+0x442>
 800a37c:	05aa      	lsls	r2, r5, #22
 800a37e:	f100 812f 	bmi.w	800a5e0 <_vfiprintf_r+0xd58>
 800a382:	ea4f 78e3 	mov.w	r8, r3, asr #31
 800a386:	461e      	mov	r6, r3
 800a388:	4643      	mov	r3, r8
 800a38a:	f7ff bb77 	b.w	8009a7c <_vfiprintf_r+0x1f4>
 800a38e:	9b03      	ldr	r3, [sp, #12]
 800a390:	f853 6b04 	ldr.w	r6, [r3], #4
 800a394:	9303      	str	r3, [sp, #12]
 800a396:	2301      	movs	r3, #1
 800a398:	f7ff bbd5 	b.w	8009b46 <_vfiprintf_r+0x2be>
 800a39c:	9b07      	ldr	r3, [sp, #28]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f43f ab57 	beq.w	8009a52 <_vfiprintf_r+0x1ca>
 800a3a4:	9b07      	ldr	r3, [sp, #28]
 800a3a6:	781b      	ldrb	r3, [r3, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f43f ab52 	beq.w	8009a52 <_vfiprintf_r+0x1ca>
 800a3ae:	783b      	ldrb	r3, [r7, #0]
 800a3b0:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
 800a3b4:	f7ff bac7 	b.w	8009946 <_vfiprintf_r+0xbe>
 800a3b8:	e9dd 1602 	ldrd	r1, r6, [sp, #8]
 800a3bc:	f856 2b04 	ldr.w	r2, [r6], #4
 800a3c0:	9603      	str	r6, [sp, #12]
 800a3c2:	17cb      	asrs	r3, r1, #31
 800a3c4:	e9c2 1300 	strd	r1, r3, [r2]
 800a3c8:	f7ff ba9e 	b.w	8009908 <_vfiprintf_r+0x80>
 800a3cc:	9b03      	ldr	r3, [sp, #12]
 800a3ce:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3d2:	9303      	str	r3, [sp, #12]
 800a3d4:	f7ff bbb4 	b.w	8009b40 <_vfiprintf_r+0x2b8>
 800a3d8:	2102      	movs	r1, #2
 800a3da:	ab0d      	add	r3, sp, #52	; 0x34
 800a3dc:	9112      	str	r1, [sp, #72]	; 0x48
 800a3de:	9311      	str	r3, [sp, #68]	; 0x44
 800a3e0:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a3e4:	e6b0      	b.n	800a148 <_vfiprintf_r+0x8c0>
 800a3e6:	4aa0      	ldr	r2, [pc, #640]	; (800a668 <_vfiprintf_r+0xde0>)
 800a3e8:	9206      	str	r2, [sp, #24]
 800a3ea:	f015 0820 	ands.w	r8, r5, #32
 800a3ee:	d036      	beq.n	800a45e <_vfiprintf_r+0xbd6>
 800a3f0:	9e03      	ldr	r6, [sp, #12]
 800a3f2:	3607      	adds	r6, #7
 800a3f4:	f026 0607 	bic.w	r6, r6, #7
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	f8d6 8004 	ldr.w	r8, [r6, #4]
 800a3fe:	f852 6b08 	ldr.w	r6, [r2], #8
 800a402:	9203      	str	r2, [sp, #12]
 800a404:	07ea      	lsls	r2, r5, #31
 800a406:	d509      	bpl.n	800a41c <_vfiprintf_r+0xb94>
 800a408:	ea56 0208 	orrs.w	r2, r6, r8
 800a40c:	d006      	beq.n	800a41c <_vfiprintf_r+0xb94>
 800a40e:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800a412:	2330      	movs	r3, #48	; 0x30
 800a414:	f045 0502 	orr.w	r5, r5, #2
 800a418:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800a41c:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
 800a420:	2302      	movs	r3, #2
 800a422:	f7ff bb90 	b.w	8009b46 <_vfiprintf_r+0x2be>
 800a426:	46aa      	mov	sl, r5
 800a428:	e503      	b.n	8009e32 <_vfiprintf_r+0x5aa>
 800a42a:	4a90      	ldr	r2, [pc, #576]	; (800a66c <_vfiprintf_r+0xde4>)
 800a42c:	9206      	str	r2, [sp, #24]
 800a42e:	e7dc      	b.n	800a3ea <_vfiprintf_r+0xb62>
 800a430:	4620      	mov	r0, r4
 800a432:	9603      	str	r6, [sp, #12]
 800a434:	f7f6 fc64 	bl	8000d00 <strlen>
 800a438:	f04f 0b00 	mov.w	fp, #0
 800a43c:	9000      	str	r0, [sp, #0]
 800a43e:	f7ff bb37 	b.w	8009ab0 <_vfiprintf_r+0x228>
 800a442:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 800a446:	2a00      	cmp	r2, #0
 800a448:	f000 80b8 	beq.w	800a5bc <_vfiprintf_r+0xd34>
 800a44c:	2001      	movs	r0, #1
 800a44e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a452:	9012      	str	r0, [sp, #72]	; 0x48
 800a454:	9211      	str	r2, [sp, #68]	; 0x44
 800a456:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a45a:	4601      	mov	r1, r0
 800a45c:	e40d      	b.n	8009c7a <_vfiprintf_r+0x3f2>
 800a45e:	f015 0210 	ands.w	r2, r5, #16
 800a462:	d042      	beq.n	800a4ea <_vfiprintf_r+0xc62>
 800a464:	9a03      	ldr	r2, [sp, #12]
 800a466:	f852 6b04 	ldr.w	r6, [r2], #4
 800a46a:	9203      	str	r2, [sp, #12]
 800a46c:	e7ca      	b.n	800a404 <_vfiprintf_r+0xb7c>
 800a46e:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 800a472:	f8cd a000 	str.w	sl, [sp]
 800a476:	f8cd 9010 	str.w	r9, [sp, #16]
 800a47a:	46ba      	mov	sl, r7
 800a47c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800a480:	2500      	movs	r5, #0
 800a482:	ac3a      	add	r4, sp, #232	; 0xe8
 800a484:	461f      	mov	r7, r3
 800a486:	e009      	b.n	800a49c <_vfiprintf_r+0xc14>
 800a488:	4630      	mov	r0, r6
 800a48a:	4641      	mov	r1, r8
 800a48c:	f7f6 faae 	bl	80009ec <__aeabi_uldivmod>
 800a490:	2e0a      	cmp	r6, #10
 800a492:	f178 0300 	sbcs.w	r3, r8, #0
 800a496:	d31b      	bcc.n	800a4d0 <_vfiprintf_r+0xc48>
 800a498:	4606      	mov	r6, r0
 800a49a:	4688      	mov	r8, r1
 800a49c:	4630      	mov	r0, r6
 800a49e:	4641      	mov	r1, r8
 800a4a0:	220a      	movs	r2, #10
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f7f6 faa2 	bl	80009ec <__aeabi_uldivmod>
 800a4a8:	4611      	mov	r1, r2
 800a4aa:	3130      	adds	r1, #48	; 0x30
 800a4ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a4b0:	220a      	movs	r2, #10
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	3c01      	subs	r4, #1
 800a4b6:	3501      	adds	r5, #1
 800a4b8:	2f00      	cmp	r7, #0
 800a4ba:	d0e5      	beq.n	800a488 <_vfiprintf_r+0xc00>
 800a4bc:	f899 1000 	ldrb.w	r1, [r9]
 800a4c0:	42a9      	cmp	r1, r5
 800a4c2:	d1e1      	bne.n	800a488 <_vfiprintf_r+0xc00>
 800a4c4:	2dff      	cmp	r5, #255	; 0xff
 800a4c6:	d0df      	beq.n	800a488 <_vfiprintf_r+0xc00>
 800a4c8:	2e0a      	cmp	r6, #10
 800a4ca:	f178 0300 	sbcs.w	r3, r8, #0
 800a4ce:	d25b      	bcs.n	800a588 <_vfiprintf_r+0xd00>
 800a4d0:	4657      	mov	r7, sl
 800a4d2:	ab3a      	add	r3, sp, #232	; 0xe8
 800a4d4:	f8dd a000 	ldr.w	sl, [sp]
 800a4d8:	f8cd 901c 	str.w	r9, [sp, #28]
 800a4dc:	1b1b      	subs	r3, r3, r4
 800a4de:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800a4e2:	9300      	str	r3, [sp, #0]
 800a4e4:	4655      	mov	r5, sl
 800a4e6:	f7ff bae3 	b.w	8009ab0 <_vfiprintf_r+0x228>
 800a4ea:	f015 0140 	ands.w	r1, r5, #64	; 0x40
 800a4ee:	d03e      	beq.n	800a56e <_vfiprintf_r+0xce6>
 800a4f0:	9903      	ldr	r1, [sp, #12]
 800a4f2:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4f6:	9103      	str	r1, [sp, #12]
 800a4f8:	4690      	mov	r8, r2
 800a4fa:	b2b6      	uxth	r6, r6
 800a4fc:	e782      	b.n	800a404 <_vfiprintf_r+0xb7c>
 800a4fe:	46aa      	mov	sl, r5
 800a500:	f7ff bac9 	b.w	8009a96 <_vfiprintf_r+0x20e>
 800a504:	2b01      	cmp	r3, #1
 800a506:	46aa      	mov	sl, r5
 800a508:	f47f acfb 	bne.w	8009f02 <_vfiprintf_r+0x67a>
 800a50c:	f7ff bac8 	b.w	8009aa0 <_vfiprintf_r+0x218>
 800a510:	9e03      	ldr	r6, [sp, #12]
 800a512:	9a02      	ldr	r2, [sp, #8]
 800a514:	f856 3b04 	ldr.w	r3, [r6], #4
 800a518:	601a      	str	r2, [r3, #0]
 800a51a:	9603      	str	r6, [sp, #12]
 800a51c:	f7ff b9f4 	b.w	8009908 <_vfiprintf_r+0x80>
 800a520:	465b      	mov	r3, fp
 800a522:	2b06      	cmp	r3, #6
 800a524:	bf28      	it	cs
 800a526:	2306      	movcs	r3, #6
 800a528:	4c51      	ldr	r4, [pc, #324]	; (800a670 <_vfiprintf_r+0xde8>)
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	9603      	str	r6, [sp, #12]
 800a52e:	4698      	mov	r8, r3
 800a530:	f7ff bb7d 	b.w	8009c2e <_vfiprintf_r+0x3a6>
 800a534:	9b03      	ldr	r3, [sp, #12]
 800a536:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
 800a53a:	bf14      	ite	ne
 800a53c:	f853 6b04 	ldrne.w	r6, [r3], #4
 800a540:	f853 6b04 	ldreq.w	r6, [r3], #4
 800a544:	9303      	str	r3, [sp, #12]
 800a546:	bf1c      	itt	ne
 800a548:	4690      	movne	r8, r2
 800a54a:	b2f6      	uxtbne	r6, r6
 800a54c:	2301      	movs	r3, #1
 800a54e:	f7ff bafa 	b.w	8009b46 <_vfiprintf_r+0x2be>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 800a558:	bf14      	ite	ne
 800a55a:	f853 6b04 	ldrne.w	r6, [r3], #4
 800a55e:	f853 6b04 	ldreq.w	r6, [r3], #4
 800a562:	9303      	str	r3, [sp, #12]
 800a564:	bf1c      	itt	ne
 800a566:	4690      	movne	r8, r2
 800a568:	b2f6      	uxtbne	r6, r6
 800a56a:	f7ff bae9 	b.w	8009b40 <_vfiprintf_r+0x2b8>
 800a56e:	9a03      	ldr	r2, [sp, #12]
 800a570:	f415 7800 	ands.w	r8, r5, #512	; 0x200
 800a574:	bf14      	ite	ne
 800a576:	f852 6b04 	ldrne.w	r6, [r2], #4
 800a57a:	f852 6b04 	ldreq.w	r6, [r2], #4
 800a57e:	9203      	str	r2, [sp, #12]
 800a580:	bf1c      	itt	ne
 800a582:	4688      	movne	r8, r1
 800a584:	b2f6      	uxtbne	r6, r6
 800a586:	e73d      	b.n	800a404 <_vfiprintf_r+0xb7c>
 800a588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a58a:	9908      	ldr	r1, [sp, #32]
 800a58c:	1ae4      	subs	r4, r4, r3
 800a58e:	461a      	mov	r2, r3
 800a590:	4620      	mov	r0, r4
 800a592:	f7ff f8ff 	bl	8009794 <strncpy>
 800a596:	f899 3001 	ldrb.w	r3, [r9, #1]
 800a59a:	b10b      	cbz	r3, 800a5a0 <_vfiprintf_r+0xd18>
 800a59c:	f109 0901 	add.w	r9, r9, #1
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	4641      	mov	r1, r8
 800a5a4:	220a      	movs	r2, #10
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	2500      	movs	r5, #0
 800a5aa:	f7f6 fa1f 	bl	80009ec <__aeabi_uldivmod>
 800a5ae:	e773      	b.n	800a498 <_vfiprintf_r+0xc10>
 800a5b0:	2001      	movs	r0, #1
 800a5b2:	460a      	mov	r2, r1
 800a5b4:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a5b8:	f7ff bb87 	b.w	8009cca <_vfiprintf_r+0x442>
 800a5bc:	9b04      	ldr	r3, [sp, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	f47f adba 	bne.w	800a138 <_vfiprintf_r+0x8b0>
 800a5c4:	460a      	mov	r2, r1
 800a5c6:	2001      	movs	r0, #1
 800a5c8:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 800a5cc:	f7ff bb7d 	b.w	8009cca <_vfiprintf_r+0x442>
 800a5d0:	9e03      	ldr	r6, [sp, #12]
 800a5d2:	9a02      	ldr	r2, [sp, #8]
 800a5d4:	f856 3b04 	ldr.w	r3, [r6], #4
 800a5d8:	9603      	str	r6, [sp, #12]
 800a5da:	801a      	strh	r2, [r3, #0]
 800a5dc:	f7ff b994 	b.w	8009908 <_vfiprintf_r+0x80>
 800a5e0:	f343 18c0 	sbfx	r8, r3, #7, #1
 800a5e4:	b25e      	sxtb	r6, r3
 800a5e6:	4643      	mov	r3, r8
 800a5e8:	f7ff ba48 	b.w	8009a7c <_vfiprintf_r+0x1f4>
 800a5ec:	6d88      	ldr	r0, [r1, #88]	; 0x58
 800a5ee:	f7f6 fe21 	bl	8001234 <__retarget_lock_release_recursive>
 800a5f2:	f7ff ba88 	b.w	8009b06 <_vfiprintf_r+0x27e>
 800a5f6:	f8cd b000 	str.w	fp, [sp]
 800a5fa:	9603      	str	r6, [sp, #12]
 800a5fc:	4683      	mov	fp, r0
 800a5fe:	f7ff ba57 	b.w	8009ab0 <_vfiprintf_r+0x228>
 800a602:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a604:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a606:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a674 <_vfiprintf_r+0xdec>
 800a60a:	3201      	adds	r2, #1
 800a60c:	e5e2      	b.n	800a1d4 <_vfiprintf_r+0x94c>
 800a60e:	ee18 1a10 	vmov	r1, s16
 800a612:	ee18 0a90 	vmov	r0, s17
 800a616:	aa0e      	add	r2, sp, #56	; 0x38
 800a618:	f7ff f8ee 	bl	80097f8 <__sprint_r.part.0>
 800a61c:	2800      	cmp	r0, #0
 800a61e:	f43f aad6 	beq.w	8009bce <_vfiprintf_r+0x346>
 800a622:	f7ff bad6 	b.w	8009bd2 <_vfiprintf_r+0x34a>
 800a626:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a628:	f8df a048 	ldr.w	sl, [pc, #72]	; 800a674 <_vfiprintf_r+0xdec>
 800a62c:	3001      	adds	r0, #1
 800a62e:	e622      	b.n	800a276 <_vfiprintf_r+0x9ee>
 800a630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a632:	07db      	lsls	r3, r3, #31
 800a634:	d405      	bmi.n	800a642 <_vfiprintf_r+0xdba>
 800a636:	89ab      	ldrh	r3, [r5, #12]
 800a638:	059f      	lsls	r7, r3, #22
 800a63a:	d402      	bmi.n	800a642 <_vfiprintf_r+0xdba>
 800a63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a63e:	f7f6 fdf9 	bl	8001234 <__retarget_lock_release_recursive>
 800a642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a646:	9302      	str	r3, [sp, #8]
 800a648:	f7ff bacd 	b.w	8009be6 <_vfiprintf_r+0x35e>
 800a64c:	f8df a028 	ldr.w	sl, [pc, #40]	; 800a678 <_vfiprintf_r+0xdf0>
 800a650:	4684      	mov	ip, r0
 800a652:	e4d9      	b.n	800a008 <_vfiprintf_r+0x780>
 800a654:	9a03      	ldr	r2, [sp, #12]
 800a656:	787b      	ldrb	r3, [r7, #1]
 800a658:	460f      	mov	r7, r1
 800a65a:	f852 1b04 	ldr.w	r1, [r2], #4
 800a65e:	9203      	str	r2, [sp, #12]
 800a660:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800a664:	f7ff b96f 	b.w	8009946 <_vfiprintf_r+0xbe>
 800a668:	0800b928 	.word	0x0800b928
 800a66c:	0800b914 	.word	0x0800b914
 800a670:	0800b93c 	.word	0x0800b93c
 800a674:	0800bb8c 	.word	0x0800bb8c
 800a678:	0800bb9c 	.word	0x0800bb9c

0800a67c <__sbprintf>:
 800a67c:	b570      	push	{r4, r5, r6, lr}
 800a67e:	460c      	mov	r4, r1
 800a680:	8989      	ldrh	r1, [r1, #12]
 800a682:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800a686:	f021 0102 	bic.w	r1, r1, #2
 800a68a:	f8ad 1014 	strh.w	r1, [sp, #20]
 800a68e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a690:	911b      	str	r1, [sp, #108]	; 0x6c
 800a692:	89e1      	ldrh	r1, [r4, #14]
 800a694:	f8ad 1016 	strh.w	r1, [sp, #22]
 800a698:	69e1      	ldr	r1, [r4, #28]
 800a69a:	9109      	str	r1, [sp, #36]	; 0x24
 800a69c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a69e:	910b      	str	r1, [sp, #44]	; 0x2c
 800a6a0:	a91c      	add	r1, sp, #112	; 0x70
 800a6a2:	9102      	str	r1, [sp, #8]
 800a6a4:	9106      	str	r1, [sp, #24]
 800a6a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a6aa:	4606      	mov	r6, r0
 800a6ac:	9104      	str	r1, [sp, #16]
 800a6ae:	9107      	str	r1, [sp, #28]
 800a6b0:	a818      	add	r0, sp, #96	; 0x60
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	e9cd 3200 	strd	r3, r2, [sp]
 800a6b8:	9108      	str	r1, [sp, #32]
 800a6ba:	f7f6 fdb5 	bl	8001228 <__retarget_lock_init_recursive>
 800a6be:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a6c2:	a902      	add	r1, sp, #8
 800a6c4:	4630      	mov	r0, r6
 800a6c6:	f7ff f8df 	bl	8009888 <_vfiprintf_r>
 800a6ca:	1e05      	subs	r5, r0, #0
 800a6cc:	db07      	blt.n	800a6de <__sbprintf+0x62>
 800a6ce:	a902      	add	r1, sp, #8
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7fe fa4f 	bl	8008b74 <_fflush_r>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	bf18      	it	ne
 800a6da:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 800a6de:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800a6e2:	065b      	lsls	r3, r3, #25
 800a6e4:	d503      	bpl.n	800a6ee <__sbprintf+0x72>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6ec:	81a3      	strh	r3, [r4, #12]
 800a6ee:	9818      	ldr	r0, [sp, #96]	; 0x60
 800a6f0:	f7f6 fd9c 	bl	800122c <__retarget_lock_close_recursive>
 800a6f4:	4628      	mov	r0, r5
 800a6f6:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800a6fa:	bd70      	pop	{r4, r5, r6, pc}

0800a6fc <__assert_func>:
 800a6fc:	b500      	push	{lr}
 800a6fe:	4c0b      	ldr	r4, [pc, #44]	; (800a72c <__assert_func+0x30>)
 800a700:	6825      	ldr	r5, [r4, #0]
 800a702:	4614      	mov	r4, r2
 800a704:	68ee      	ldr	r6, [r5, #12]
 800a706:	461a      	mov	r2, r3
 800a708:	b085      	sub	sp, #20
 800a70a:	4603      	mov	r3, r0
 800a70c:	460d      	mov	r5, r1
 800a70e:	b14c      	cbz	r4, 800a724 <__assert_func+0x28>
 800a710:	4907      	ldr	r1, [pc, #28]	; (800a730 <__assert_func+0x34>)
 800a712:	9500      	str	r5, [sp, #0]
 800a714:	e9cd 1401 	strd	r1, r4, [sp, #4]
 800a718:	4630      	mov	r0, r6
 800a71a:	4906      	ldr	r1, [pc, #24]	; (800a734 <__assert_func+0x38>)
 800a71c:	f000 f83e 	bl	800a79c <fiprintf>
 800a720:	f000 fd80 	bl	800b224 <abort>
 800a724:	4904      	ldr	r1, [pc, #16]	; (800a738 <__assert_func+0x3c>)
 800a726:	460c      	mov	r4, r1
 800a728:	e7f3      	b.n	800a712 <__assert_func+0x16>
 800a72a:	bf00      	nop
 800a72c:	20000000 	.word	0x20000000
 800a730:	0800bbac 	.word	0x0800bbac
 800a734:	0800bbbc 	.word	0x0800bbbc
 800a738:	0800bbb8 	.word	0x0800bbb8

0800a73c <_calloc_r>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	fb02 f101 	mul.w	r1, r2, r1
 800a742:	f7fa ff1f 	bl	8005584 <_malloc_r>
 800a746:	4604      	mov	r4, r0
 800a748:	b168      	cbz	r0, 800a766 <_calloc_r+0x2a>
 800a74a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a74e:	f022 0203 	bic.w	r2, r2, #3
 800a752:	3a04      	subs	r2, #4
 800a754:	2a24      	cmp	r2, #36	; 0x24
 800a756:	d818      	bhi.n	800a78a <_calloc_r+0x4e>
 800a758:	2a13      	cmp	r2, #19
 800a75a:	d806      	bhi.n	800a76a <_calloc_r+0x2e>
 800a75c:	4602      	mov	r2, r0
 800a75e:	2300      	movs	r3, #0
 800a760:	e9c2 3300 	strd	r3, r3, [r2]
 800a764:	6093      	str	r3, [r2, #8]
 800a766:	4620      	mov	r0, r4
 800a768:	bd10      	pop	{r4, pc}
 800a76a:	2300      	movs	r3, #0
 800a76c:	2a1b      	cmp	r2, #27
 800a76e:	e9c0 3300 	strd	r3, r3, [r0]
 800a772:	d90f      	bls.n	800a794 <_calloc_r+0x58>
 800a774:	2a24      	cmp	r2, #36	; 0x24
 800a776:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800a77a:	bf11      	iteee	ne
 800a77c:	f100 0210 	addne.w	r2, r0, #16
 800a780:	6103      	streq	r3, [r0, #16]
 800a782:	f100 0218 	addeq.w	r2, r0, #24
 800a786:	6143      	streq	r3, [r0, #20]
 800a788:	e7e9      	b.n	800a75e <_calloc_r+0x22>
 800a78a:	2100      	movs	r1, #0
 800a78c:	f7f6 fcd4 	bl	8001138 <memset>
 800a790:	4620      	mov	r0, r4
 800a792:	bd10      	pop	{r4, pc}
 800a794:	f100 0208 	add.w	r2, r0, #8
 800a798:	e7e1      	b.n	800a75e <_calloc_r+0x22>
 800a79a:	bf00      	nop

0800a79c <fiprintf>:
 800a79c:	b40e      	push	{r1, r2, r3}
 800a79e:	b510      	push	{r4, lr}
 800a7a0:	b083      	sub	sp, #12
 800a7a2:	ab05      	add	r3, sp, #20
 800a7a4:	4c06      	ldr	r4, [pc, #24]	; (800a7c0 <fiprintf+0x24>)
 800a7a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7aa:	9301      	str	r3, [sp, #4]
 800a7ac:	4601      	mov	r1, r0
 800a7ae:	6820      	ldr	r0, [r4, #0]
 800a7b0:	f7ff f86a 	bl	8009888 <_vfiprintf_r>
 800a7b4:	b003      	add	sp, #12
 800a7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7ba:	b003      	add	sp, #12
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	20000000 	.word	0x20000000

0800a7c4 <__fputwc>:
 800a7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c8:	b082      	sub	sp, #8
 800a7ca:	4682      	mov	sl, r0
 800a7cc:	4688      	mov	r8, r1
 800a7ce:	4614      	mov	r4, r2
 800a7d0:	f000 fa20 	bl	800ac14 <__locale_mb_cur_max>
 800a7d4:	2801      	cmp	r0, #1
 800a7d6:	d103      	bne.n	800a7e0 <__fputwc+0x1c>
 800a7d8:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800a7dc:	2bfe      	cmp	r3, #254	; 0xfe
 800a7de:	d936      	bls.n	800a84e <__fputwc+0x8a>
 800a7e0:	4642      	mov	r2, r8
 800a7e2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 800a7e6:	a901      	add	r1, sp, #4
 800a7e8:	4650      	mov	r0, sl
 800a7ea:	f000 fcef 	bl	800b1cc <_wcrtomb_r>
 800a7ee:	1c42      	adds	r2, r0, #1
 800a7f0:	4606      	mov	r6, r0
 800a7f2:	d032      	beq.n	800a85a <__fputwc+0x96>
 800a7f4:	b330      	cbz	r0, 800a844 <__fputwc+0x80>
 800a7f6:	f89d c004 	ldrb.w	ip, [sp, #4]
 800a7fa:	f10d 0905 	add.w	r9, sp, #5
 800a7fe:	2500      	movs	r5, #0
 800a800:	e009      	b.n	800a816 <__fputwc+0x52>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	6022      	str	r2, [r4, #0]
 800a808:	f883 c000 	strb.w	ip, [r3]
 800a80c:	3501      	adds	r5, #1
 800a80e:	42b5      	cmp	r5, r6
 800a810:	d218      	bcs.n	800a844 <__fputwc+0x80>
 800a812:	f819 cb01 	ldrb.w	ip, [r9], #1
 800a816:	68a3      	ldr	r3, [r4, #8]
 800a818:	3b01      	subs	r3, #1
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	60a3      	str	r3, [r4, #8]
 800a81e:	daf0      	bge.n	800a802 <__fputwc+0x3e>
 800a820:	69a7      	ldr	r7, [r4, #24]
 800a822:	42bb      	cmp	r3, r7
 800a824:	4661      	mov	r1, ip
 800a826:	4622      	mov	r2, r4
 800a828:	4650      	mov	r0, sl
 800a82a:	db02      	blt.n	800a832 <__fputwc+0x6e>
 800a82c:	f1bc 0f0a 	cmp.w	ip, #10
 800a830:	d1e7      	bne.n	800a802 <__fputwc+0x3e>
 800a832:	f000 fc73 	bl	800b11c <__swbuf_r>
 800a836:	1c43      	adds	r3, r0, #1
 800a838:	d1e8      	bne.n	800a80c <__fputwc+0x48>
 800a83a:	4606      	mov	r6, r0
 800a83c:	4630      	mov	r0, r6
 800a83e:	b002      	add	sp, #8
 800a840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a844:	4646      	mov	r6, r8
 800a846:	4630      	mov	r0, r6
 800a848:	b002      	add	sp, #8
 800a84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84e:	fa5f fc88 	uxtb.w	ip, r8
 800a852:	f88d c004 	strb.w	ip, [sp, #4]
 800a856:	4606      	mov	r6, r0
 800a858:	e7cf      	b.n	800a7fa <__fputwc+0x36>
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	4630      	mov	r0, r6
 800a85e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a862:	81a3      	strh	r3, [r4, #12]
 800a864:	b002      	add	sp, #8
 800a866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a86a:	bf00      	nop

0800a86c <_fputwc_r>:
 800a86c:	b530      	push	{r4, r5, lr}
 800a86e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800a870:	f013 0f01 	tst.w	r3, #1
 800a874:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 800a878:	4614      	mov	r4, r2
 800a87a:	b083      	sub	sp, #12
 800a87c:	4605      	mov	r5, r0
 800a87e:	b29a      	uxth	r2, r3
 800a880:	d101      	bne.n	800a886 <_fputwc_r+0x1a>
 800a882:	0598      	lsls	r0, r3, #22
 800a884:	d51c      	bpl.n	800a8c0 <_fputwc_r+0x54>
 800a886:	0490      	lsls	r0, r2, #18
 800a888:	d406      	bmi.n	800a898 <_fputwc_r+0x2c>
 800a88a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a88c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a890:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	6662      	str	r2, [r4, #100]	; 0x64
 800a898:	4622      	mov	r2, r4
 800a89a:	4628      	mov	r0, r5
 800a89c:	f7ff ff92 	bl	800a7c4 <__fputwc>
 800a8a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8a2:	07da      	lsls	r2, r3, #31
 800a8a4:	4605      	mov	r5, r0
 800a8a6:	d402      	bmi.n	800a8ae <_fputwc_r+0x42>
 800a8a8:	89a3      	ldrh	r3, [r4, #12]
 800a8aa:	059b      	lsls	r3, r3, #22
 800a8ac:	d502      	bpl.n	800a8b4 <_fputwc_r+0x48>
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	b003      	add	sp, #12
 800a8b2:	bd30      	pop	{r4, r5, pc}
 800a8b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8b6:	f7f6 fcbd 	bl	8001234 <__retarget_lock_release_recursive>
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	b003      	add	sp, #12
 800a8be:	bd30      	pop	{r4, r5, pc}
 800a8c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8c2:	9101      	str	r1, [sp, #4]
 800a8c4:	f7f6 fcb4 	bl	8001230 <__retarget_lock_acquire_recursive>
 800a8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8cc:	9901      	ldr	r1, [sp, #4]
 800a8ce:	b29a      	uxth	r2, r3
 800a8d0:	e7d9      	b.n	800a886 <_fputwc_r+0x1a>
 800a8d2:	bf00      	nop

0800a8d4 <_fstat_r>:
 800a8d4:	b570      	push	{r4, r5, r6, lr}
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	4d08      	ldr	r5, [pc, #32]	; (800a8fc <_fstat_r+0x28>)
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2600      	movs	r6, #0
 800a8de:	4620      	mov	r0, r4
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	461c      	mov	r4, r3
 800a8e4:	602e      	str	r6, [r5, #0]
 800a8e6:	f7f6 feb9 	bl	800165c <_fstat>
 800a8ea:	1c43      	adds	r3, r0, #1
 800a8ec:	d000      	beq.n	800a8f0 <_fstat_r+0x1c>
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0fb      	beq.n	800a8ee <_fstat_r+0x1a>
 800a8f6:	6023      	str	r3, [r4, #0]
 800a8f8:	bd70      	pop	{r4, r5, r6, pc}
 800a8fa:	bf00      	nop
 800a8fc:	200014d8 	.word	0x200014d8

0800a900 <__sfvwrite_r>:
 800a900:	6893      	ldr	r3, [r2, #8]
 800a902:	2b00      	cmp	r3, #0
 800a904:	f000 8085 	beq.w	800aa12 <__sfvwrite_r+0x112>
 800a908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a90c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 800a910:	460c      	mov	r4, r1
 800a912:	0719      	lsls	r1, r3, #28
 800a914:	4680      	mov	r8, r0
 800a916:	b083      	sub	sp, #12
 800a918:	4617      	mov	r7, r2
 800a91a:	b298      	uxth	r0, r3
 800a91c:	d525      	bpl.n	800a96a <__sfvwrite_r+0x6a>
 800a91e:	6923      	ldr	r3, [r4, #16]
 800a920:	b31b      	cbz	r3, 800a96a <__sfvwrite_r+0x6a>
 800a922:	f010 0302 	ands.w	r3, r0, #2
 800a926:	683d      	ldr	r5, [r7, #0]
 800a928:	d02d      	beq.n	800a986 <__sfvwrite_r+0x86>
 800a92a:	f04f 0a00 	mov.w	sl, #0
 800a92e:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 800abec <__sfvwrite_r+0x2ec>
 800a932:	4656      	mov	r6, sl
 800a934:	46b9      	mov	r9, r7
 800a936:	455e      	cmp	r6, fp
 800a938:	4633      	mov	r3, r6
 800a93a:	4652      	mov	r2, sl
 800a93c:	bf28      	it	cs
 800a93e:	465b      	movcs	r3, fp
 800a940:	4640      	mov	r0, r8
 800a942:	2e00      	cmp	r6, #0
 800a944:	d052      	beq.n	800a9ec <__sfvwrite_r+0xec>
 800a946:	69e1      	ldr	r1, [r4, #28]
 800a948:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800a94a:	47b8      	blx	r7
 800a94c:	2800      	cmp	r0, #0
 800a94e:	dd56      	ble.n	800a9fe <__sfvwrite_r+0xfe>
 800a950:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a954:	1a1b      	subs	r3, r3, r0
 800a956:	4482      	add	sl, r0
 800a958:	1a36      	subs	r6, r6, r0
 800a95a:	f8c9 3008 	str.w	r3, [r9, #8]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1e9      	bne.n	800a936 <__sfvwrite_r+0x36>
 800a962:	2000      	movs	r0, #0
 800a964:	b003      	add	sp, #12
 800a966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a96a:	4621      	mov	r1, r4
 800a96c:	4640      	mov	r0, r8
 800a96e:	f7fc ff53 	bl	8007818 <__swsetup_r>
 800a972:	2800      	cmp	r0, #0
 800a974:	f040 8136 	bne.w	800abe4 <__sfvwrite_r+0x2e4>
 800a978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a97c:	683d      	ldr	r5, [r7, #0]
 800a97e:	b298      	uxth	r0, r3
 800a980:	f010 0302 	ands.w	r3, r0, #2
 800a984:	d1d1      	bne.n	800a92a <__sfvwrite_r+0x2a>
 800a986:	f010 0901 	ands.w	r9, r0, #1
 800a98a:	d144      	bne.n	800aa16 <__sfvwrite_r+0x116>
 800a98c:	464e      	mov	r6, r9
 800a98e:	9700      	str	r7, [sp, #0]
 800a990:	b346      	cbz	r6, 800a9e4 <__sfvwrite_r+0xe4>
 800a992:	0582      	lsls	r2, r0, #22
 800a994:	f8d4 b008 	ldr.w	fp, [r4, #8]
 800a998:	f140 8083 	bpl.w	800aaa2 <__sfvwrite_r+0x1a2>
 800a99c:	45b3      	cmp	fp, r6
 800a99e:	465a      	mov	r2, fp
 800a9a0:	f200 80b2 	bhi.w	800ab08 <__sfvwrite_r+0x208>
 800a9a4:	f410 6f90 	tst.w	r0, #1152	; 0x480
 800a9a8:	f040 80bf 	bne.w	800ab2a <__sfvwrite_r+0x22a>
 800a9ac:	6820      	ldr	r0, [r4, #0]
 800a9ae:	9201      	str	r2, [sp, #4]
 800a9b0:	4649      	mov	r1, r9
 800a9b2:	f000 f94b 	bl	800ac4c <memmove>
 800a9b6:	68a3      	ldr	r3, [r4, #8]
 800a9b8:	9a01      	ldr	r2, [sp, #4]
 800a9ba:	eba3 010b 	sub.w	r1, r3, fp
 800a9be:	6823      	ldr	r3, [r4, #0]
 800a9c0:	60a1      	str	r1, [r4, #8]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	46b2      	mov	sl, r6
 800a9c6:	6023      	str	r3, [r4, #0]
 800a9c8:	2600      	movs	r6, #0
 800a9ca:	9b00      	ldr	r3, [sp, #0]
 800a9cc:	6898      	ldr	r0, [r3, #8]
 800a9ce:	eba0 000a 	sub.w	r0, r0, sl
 800a9d2:	44d1      	add	r9, sl
 800a9d4:	6098      	str	r0, [r3, #8]
 800a9d6:	2800      	cmp	r0, #0
 800a9d8:	d0c3      	beq.n	800a962 <__sfvwrite_r+0x62>
 800a9da:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800a9de:	b280      	uxth	r0, r0
 800a9e0:	2e00      	cmp	r6, #0
 800a9e2:	d1d6      	bne.n	800a992 <__sfvwrite_r+0x92>
 800a9e4:	e9d5 9600 	ldrd	r9, r6, [r5]
 800a9e8:	3508      	adds	r5, #8
 800a9ea:	e7d1      	b.n	800a990 <__sfvwrite_r+0x90>
 800a9ec:	e9d5 a600 	ldrd	sl, r6, [r5]
 800a9f0:	3508      	adds	r5, #8
 800a9f2:	e7a0      	b.n	800a936 <__sfvwrite_r+0x36>
 800a9f4:	4621      	mov	r1, r4
 800a9f6:	4640      	mov	r0, r8
 800a9f8:	f7fe f8bc 	bl	8008b74 <_fflush_r>
 800a9fc:	b380      	cbz	r0, 800aa60 <__sfvwrite_r+0x160>
 800a9fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa0a:	81a3      	strh	r3, [r4, #12]
 800aa0c:	b003      	add	sp, #12
 800aa0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa12:	2000      	movs	r0, #0
 800aa14:	4770      	bx	lr
 800aa16:	461e      	mov	r6, r3
 800aa18:	46aa      	mov	sl, r5
 800aa1a:	4699      	mov	r9, r3
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	461d      	mov	r5, r3
 800aa20:	9700      	str	r7, [sp, #0]
 800aa22:	b356      	cbz	r6, 800aa7a <__sfvwrite_r+0x17a>
 800aa24:	b388      	cbz	r0, 800aa8a <__sfvwrite_r+0x18a>
 800aa26:	464a      	mov	r2, r9
 800aa28:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 800aa2c:	6820      	ldr	r0, [r4, #0]
 800aa2e:	42b2      	cmp	r2, r6
 800aa30:	bf28      	it	cs
 800aa32:	4632      	movcs	r2, r6
 800aa34:	4288      	cmp	r0, r1
 800aa36:	d905      	bls.n	800aa44 <__sfvwrite_r+0x144>
 800aa38:	68a1      	ldr	r1, [r4, #8]
 800aa3a:	eb03 0b01 	add.w	fp, r3, r1
 800aa3e:	455a      	cmp	r2, fp
 800aa40:	f300 80a6 	bgt.w	800ab90 <__sfvwrite_r+0x290>
 800aa44:	4293      	cmp	r3, r2
 800aa46:	dc63      	bgt.n	800ab10 <__sfvwrite_r+0x210>
 800aa48:	69e1      	ldr	r1, [r4, #28]
 800aa4a:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	4640      	mov	r0, r8
 800aa50:	47b8      	blx	r7
 800aa52:	f1b0 0b00 	subs.w	fp, r0, #0
 800aa56:	ddd2      	ble.n	800a9fe <__sfvwrite_r+0xfe>
 800aa58:	ebb9 090b 	subs.w	r9, r9, fp
 800aa5c:	d0ca      	beq.n	800a9f4 <__sfvwrite_r+0xf4>
 800aa5e:	2001      	movs	r0, #1
 800aa60:	9a00      	ldr	r2, [sp, #0]
 800aa62:	6893      	ldr	r3, [r2, #8]
 800aa64:	eba3 030b 	sub.w	r3, r3, fp
 800aa68:	445d      	add	r5, fp
 800aa6a:	eba6 060b 	sub.w	r6, r6, fp
 800aa6e:	6093      	str	r3, [r2, #8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f43f af76 	beq.w	800a962 <__sfvwrite_r+0x62>
 800aa76:	2e00      	cmp	r6, #0
 800aa78:	d1d4      	bne.n	800aa24 <__sfvwrite_r+0x124>
 800aa7a:	f10a 0308 	add.w	r3, sl, #8
 800aa7e:	e953 5602 	ldrd	r5, r6, [r3, #-8]
 800aa82:	469a      	mov	sl, r3
 800aa84:	3308      	adds	r3, #8
 800aa86:	2e00      	cmp	r6, #0
 800aa88:	d0f9      	beq.n	800aa7e <__sfvwrite_r+0x17e>
 800aa8a:	4632      	mov	r2, r6
 800aa8c:	210a      	movs	r1, #10
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f7f6 f9a6 	bl	8000de0 <memchr>
 800aa94:	2800      	cmp	r0, #0
 800aa96:	f000 809c 	beq.w	800abd2 <__sfvwrite_r+0x2d2>
 800aa9a:	3001      	adds	r0, #1
 800aa9c:	eba0 0905 	sub.w	r9, r0, r5
 800aaa0:	e7c1      	b.n	800aa26 <__sfvwrite_r+0x126>
 800aaa2:	6820      	ldr	r0, [r4, #0]
 800aaa4:	6923      	ldr	r3, [r4, #16]
 800aaa6:	4298      	cmp	r0, r3
 800aaa8:	d816      	bhi.n	800aad8 <__sfvwrite_r+0x1d8>
 800aaaa:	6963      	ldr	r3, [r4, #20]
 800aaac:	42b3      	cmp	r3, r6
 800aaae:	d813      	bhi.n	800aad8 <__sfvwrite_r+0x1d8>
 800aab0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800aab4:	42b2      	cmp	r2, r6
 800aab6:	bf28      	it	cs
 800aab8:	4632      	movcs	r2, r6
 800aaba:	69e1      	ldr	r1, [r4, #28]
 800aabc:	fb92 f2f3 	sdiv	r2, r2, r3
 800aac0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800aac2:	fb02 f303 	mul.w	r3, r2, r3
 800aac6:	4640      	mov	r0, r8
 800aac8:	464a      	mov	r2, r9
 800aaca:	47b8      	blx	r7
 800aacc:	f1b0 0a00 	subs.w	sl, r0, #0
 800aad0:	dd95      	ble.n	800a9fe <__sfvwrite_r+0xfe>
 800aad2:	eba6 060a 	sub.w	r6, r6, sl
 800aad6:	e778      	b.n	800a9ca <__sfvwrite_r+0xca>
 800aad8:	45b3      	cmp	fp, r6
 800aada:	46da      	mov	sl, fp
 800aadc:	bf28      	it	cs
 800aade:	46b2      	movcs	sl, r6
 800aae0:	4652      	mov	r2, sl
 800aae2:	4649      	mov	r1, r9
 800aae4:	f000 f8b2 	bl	800ac4c <memmove>
 800aae8:	68a3      	ldr	r3, [r4, #8]
 800aaea:	6822      	ldr	r2, [r4, #0]
 800aaec:	eba3 030a 	sub.w	r3, r3, sl
 800aaf0:	4452      	add	r2, sl
 800aaf2:	60a3      	str	r3, [r4, #8]
 800aaf4:	6022      	str	r2, [r4, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d1eb      	bne.n	800aad2 <__sfvwrite_r+0x1d2>
 800aafa:	4621      	mov	r1, r4
 800aafc:	4640      	mov	r0, r8
 800aafe:	f7fe f839 	bl	8008b74 <_fflush_r>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d0e5      	beq.n	800aad2 <__sfvwrite_r+0x1d2>
 800ab06:	e77a      	b.n	800a9fe <__sfvwrite_r+0xfe>
 800ab08:	6820      	ldr	r0, [r4, #0]
 800ab0a:	46b3      	mov	fp, r6
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	e74e      	b.n	800a9ae <__sfvwrite_r+0xae>
 800ab10:	4629      	mov	r1, r5
 800ab12:	9201      	str	r2, [sp, #4]
 800ab14:	f000 f89a 	bl	800ac4c <memmove>
 800ab18:	9a01      	ldr	r2, [sp, #4]
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	1a9b      	subs	r3, r3, r2
 800ab1e:	60a3      	str	r3, [r4, #8]
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	4413      	add	r3, r2
 800ab24:	6023      	str	r3, [r4, #0]
 800ab26:	4693      	mov	fp, r2
 800ab28:	e796      	b.n	800aa58 <__sfvwrite_r+0x158>
 800ab2a:	6823      	ldr	r3, [r4, #0]
 800ab2c:	6921      	ldr	r1, [r4, #16]
 800ab2e:	eba3 0b01 	sub.w	fp, r3, r1
 800ab32:	6963      	ldr	r3, [r4, #20]
 800ab34:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 800ab38:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
 800ab3c:	f10b 0301 	add.w	r3, fp, #1
 800ab40:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800ab44:	4433      	add	r3, r6
 800ab46:	4553      	cmp	r3, sl
 800ab48:	4652      	mov	r2, sl
 800ab4a:	bf84      	itt	hi
 800ab4c:	469a      	movhi	sl, r3
 800ab4e:	4652      	movhi	r2, sl
 800ab50:	0543      	lsls	r3, r0, #21
 800ab52:	d52c      	bpl.n	800abae <__sfvwrite_r+0x2ae>
 800ab54:	4611      	mov	r1, r2
 800ab56:	4640      	mov	r0, r8
 800ab58:	f7fa fd14 	bl	8005584 <_malloc_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d03b      	beq.n	800abd8 <__sfvwrite_r+0x2d8>
 800ab60:	465a      	mov	r2, fp
 800ab62:	6921      	ldr	r1, [r4, #16]
 800ab64:	9001      	str	r0, [sp, #4]
 800ab66:	f7f6 f98b 	bl	8000e80 <memcpy>
 800ab6a:	89a2      	ldrh	r2, [r4, #12]
 800ab6c:	9b01      	ldr	r3, [sp, #4]
 800ab6e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ab72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ab76:	81a2      	strh	r2, [r4, #12]
 800ab78:	eb03 000b 	add.w	r0, r3, fp
 800ab7c:	6123      	str	r3, [r4, #16]
 800ab7e:	ebaa 030b 	sub.w	r3, sl, fp
 800ab82:	f8c4 a014 	str.w	sl, [r4, #20]
 800ab86:	60a3      	str	r3, [r4, #8]
 800ab88:	6020      	str	r0, [r4, #0]
 800ab8a:	46b3      	mov	fp, r6
 800ab8c:	4632      	mov	r2, r6
 800ab8e:	e70e      	b.n	800a9ae <__sfvwrite_r+0xae>
 800ab90:	4629      	mov	r1, r5
 800ab92:	465a      	mov	r2, fp
 800ab94:	f000 f85a 	bl	800ac4c <memmove>
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	445b      	add	r3, fp
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4640      	mov	r0, r8
 800aba2:	f7fd ffe7 	bl	8008b74 <_fflush_r>
 800aba6:	2800      	cmp	r0, #0
 800aba8:	f43f af56 	beq.w	800aa58 <__sfvwrite_r+0x158>
 800abac:	e727      	b.n	800a9fe <__sfvwrite_r+0xfe>
 800abae:	4640      	mov	r0, r8
 800abb0:	f000 f8c8 	bl	800ad44 <_realloc_r>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d1de      	bne.n	800ab78 <__sfvwrite_r+0x278>
 800abba:	6921      	ldr	r1, [r4, #16]
 800abbc:	4640      	mov	r0, r8
 800abbe:	f7fe f857 	bl	8008c70 <_free_r>
 800abc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abc6:	220c      	movs	r2, #12
 800abc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abcc:	f8c8 2000 	str.w	r2, [r8]
 800abd0:	e717      	b.n	800aa02 <__sfvwrite_r+0x102>
 800abd2:	1c72      	adds	r2, r6, #1
 800abd4:	4691      	mov	r9, r2
 800abd6:	e727      	b.n	800aa28 <__sfvwrite_r+0x128>
 800abd8:	220c      	movs	r2, #12
 800abda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abde:	f8c8 2000 	str.w	r2, [r8]
 800abe2:	e70e      	b.n	800aa02 <__sfvwrite_r+0x102>
 800abe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800abe8:	e6bc      	b.n	800a964 <__sfvwrite_r+0x64>
 800abea:	bf00      	nop
 800abec:	7ffffc00 	.word	0x7ffffc00

0800abf0 <_isatty_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	4d07      	ldr	r5, [pc, #28]	; (800ac10 <_isatty_r+0x20>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	4604      	mov	r4, r0
 800abf8:	4608      	mov	r0, r1
 800abfa:	602a      	str	r2, [r5, #0]
 800abfc:	f7f6 fe6c 	bl	80018d8 <_isatty>
 800ac00:	1c43      	adds	r3, r0, #1
 800ac02:	d000      	beq.n	800ac06 <_isatty_r+0x16>
 800ac04:	bd38      	pop	{r3, r4, r5, pc}
 800ac06:	682b      	ldr	r3, [r5, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d0fb      	beq.n	800ac04 <_isatty_r+0x14>
 800ac0c:	6023      	str	r3, [r4, #0]
 800ac0e:	bd38      	pop	{r3, r4, r5, pc}
 800ac10:	200014d8 	.word	0x200014d8

0800ac14 <__locale_mb_cur_max>:
 800ac14:	4b01      	ldr	r3, [pc, #4]	; (800ac1c <__locale_mb_cur_max+0x8>)
 800ac16:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800ac1a:	4770      	bx	lr
 800ac1c:	20000958 	.word	0x20000958

0800ac20 <__ascii_mbtowc>:
 800ac20:	b082      	sub	sp, #8
 800ac22:	b149      	cbz	r1, 800ac38 <__ascii_mbtowc+0x18>
 800ac24:	b15a      	cbz	r2, 800ac3e <__ascii_mbtowc+0x1e>
 800ac26:	b16b      	cbz	r3, 800ac44 <__ascii_mbtowc+0x24>
 800ac28:	7813      	ldrb	r3, [r2, #0]
 800ac2a:	600b      	str	r3, [r1, #0]
 800ac2c:	7812      	ldrb	r2, [r2, #0]
 800ac2e:	1e10      	subs	r0, r2, #0
 800ac30:	bf18      	it	ne
 800ac32:	2001      	movne	r0, #1
 800ac34:	b002      	add	sp, #8
 800ac36:	4770      	bx	lr
 800ac38:	a901      	add	r1, sp, #4
 800ac3a:	2a00      	cmp	r2, #0
 800ac3c:	d1f3      	bne.n	800ac26 <__ascii_mbtowc+0x6>
 800ac3e:	4610      	mov	r0, r2
 800ac40:	b002      	add	sp, #8
 800ac42:	4770      	bx	lr
 800ac44:	f06f 0001 	mvn.w	r0, #1
 800ac48:	e7f4      	b.n	800ac34 <__ascii_mbtowc+0x14>
 800ac4a:	bf00      	nop

0800ac4c <memmove>:
 800ac4c:	4288      	cmp	r0, r1
 800ac4e:	d90d      	bls.n	800ac6c <memmove+0x20>
 800ac50:	188b      	adds	r3, r1, r2
 800ac52:	4283      	cmp	r3, r0
 800ac54:	d90a      	bls.n	800ac6c <memmove+0x20>
 800ac56:	eb00 0c02 	add.w	ip, r0, r2
 800ac5a:	b1ba      	cbz	r2, 800ac8c <memmove+0x40>
 800ac5c:	4662      	mov	r2, ip
 800ac5e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800ac62:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800ac66:	4299      	cmp	r1, r3
 800ac68:	d1f9      	bne.n	800ac5e <memmove+0x12>
 800ac6a:	4770      	bx	lr
 800ac6c:	2a0f      	cmp	r2, #15
 800ac6e:	d80e      	bhi.n	800ac8e <memmove+0x42>
 800ac70:	4603      	mov	r3, r0
 800ac72:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800ac76:	b14a      	cbz	r2, 800ac8c <memmove+0x40>
 800ac78:	f10c 0c01 	add.w	ip, ip, #1
 800ac7c:	3b01      	subs	r3, #1
 800ac7e:	448c      	add	ip, r1
 800ac80:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac84:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac88:	4561      	cmp	r1, ip
 800ac8a:	d1f9      	bne.n	800ac80 <memmove+0x34>
 800ac8c:	4770      	bx	lr
 800ac8e:	ea40 0301 	orr.w	r3, r0, r1
 800ac92:	079b      	lsls	r3, r3, #30
 800ac94:	d150      	bne.n	800ad38 <memmove+0xec>
 800ac96:	f1a2 0310 	sub.w	r3, r2, #16
 800ac9a:	b570      	push	{r4, r5, r6, lr}
 800ac9c:	f101 0c20 	add.w	ip, r1, #32
 800aca0:	f023 050f 	bic.w	r5, r3, #15
 800aca4:	f101 0e10 	add.w	lr, r1, #16
 800aca8:	f100 0410 	add.w	r4, r0, #16
 800acac:	44ac      	add	ip, r5
 800acae:	091b      	lsrs	r3, r3, #4
 800acb0:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800acb4:	f844 5c10 	str.w	r5, [r4, #-16]
 800acb8:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
 800acbc:	f844 5c0c 	str.w	r5, [r4, #-12]
 800acc0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
 800acc4:	f844 5c08 	str.w	r5, [r4, #-8]
 800acc8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
 800accc:	f844 5c04 	str.w	r5, [r4, #-4]
 800acd0:	f10e 0e10 	add.w	lr, lr, #16
 800acd4:	45e6      	cmp	lr, ip
 800acd6:	f104 0410 	add.w	r4, r4, #16
 800acda:	d1e9      	bne.n	800acb0 <memmove+0x64>
 800acdc:	3301      	adds	r3, #1
 800acde:	f012 0f0c 	tst.w	r2, #12
 800ace2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800ace6:	f002 040f 	and.w	r4, r2, #15
 800acea:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800acee:	d027      	beq.n	800ad40 <memmove+0xf4>
 800acf0:	3c04      	subs	r4, #4
 800acf2:	f024 0603 	bic.w	r6, r4, #3
 800acf6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
 800acfa:	441e      	add	r6, r3
 800acfc:	1f1c      	subs	r4, r3, #4
 800acfe:	468e      	mov	lr, r1
 800ad00:	f85e 5b04 	ldr.w	r5, [lr], #4
 800ad04:	f844 5f04 	str.w	r5, [r4, #4]!
 800ad08:	42b4      	cmp	r4, r6
 800ad0a:	d1f9      	bne.n	800ad00 <memmove+0xb4>
 800ad0c:	f10c 0401 	add.w	r4, ip, #1
 800ad10:	f002 0203 	and.w	r2, r2, #3
 800ad14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ad18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad1c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800ad20:	b14a      	cbz	r2, 800ad36 <memmove+0xea>
 800ad22:	f10c 0c01 	add.w	ip, ip, #1
 800ad26:	3b01      	subs	r3, #1
 800ad28:	448c      	add	ip, r1
 800ad2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad32:	4561      	cmp	r1, ip
 800ad34:	d1f9      	bne.n	800ad2a <memmove+0xde>
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	e79b      	b.n	800ac78 <memmove+0x2c>
 800ad40:	4622      	mov	r2, r4
 800ad42:	e7eb      	b.n	800ad1c <memmove+0xd0>

0800ad44 <_realloc_r>:
 800ad44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	4617      	mov	r7, r2
 800ad4a:	2900      	cmp	r1, #0
 800ad4c:	f000 8098 	beq.w	800ae80 <_realloc_r+0x13c>
 800ad50:	f107 050b 	add.w	r5, r7, #11
 800ad54:	4680      	mov	r8, r0
 800ad56:	460c      	mov	r4, r1
 800ad58:	f7fa fec4 	bl	8005ae4 <__malloc_lock>
 800ad5c:	2d16      	cmp	r5, #22
 800ad5e:	d85d      	bhi.n	800ae1c <_realloc_r+0xd8>
 800ad60:	2510      	movs	r5, #16
 800ad62:	462a      	mov	r2, r5
 800ad64:	42af      	cmp	r7, r5
 800ad66:	d85e      	bhi.n	800ae26 <_realloc_r+0xe2>
 800ad68:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800ad6c:	f021 0603 	bic.w	r6, r1, #3
 800ad70:	4296      	cmp	r6, r2
 800ad72:	f1a4 0908 	sub.w	r9, r4, #8
 800ad76:	da62      	bge.n	800ae3e <_realloc_r+0xfa>
 800ad78:	4bbc      	ldr	r3, [pc, #752]	; (800b06c <_realloc_r+0x328>)
 800ad7a:	f8d3 c008 	ldr.w	ip, [r3, #8]
 800ad7e:	eb09 0006 	add.w	r0, r9, r6
 800ad82:	4584      	cmp	ip, r0
 800ad84:	f000 8097 	beq.w	800aeb6 <_realloc_r+0x172>
 800ad88:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800ad8c:	f02c 0301 	bic.w	r3, ip, #1
 800ad90:	4403      	add	r3, r0
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	07db      	lsls	r3, r3, #31
 800ad96:	d468      	bmi.n	800ae6a <_realloc_r+0x126>
 800ad98:	f02c 0c03 	bic.w	ip, ip, #3
 800ad9c:	eb06 030c 	add.w	r3, r6, ip
 800ada0:	4293      	cmp	r3, r2
 800ada2:	da47      	bge.n	800ae34 <_realloc_r+0xf0>
 800ada4:	07cb      	lsls	r3, r1, #31
 800ada6:	d410      	bmi.n	800adca <_realloc_r+0x86>
 800ada8:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800adac:	eba9 0a03 	sub.w	sl, r9, r3
 800adb0:	f8da 3004 	ldr.w	r3, [sl, #4]
 800adb4:	f023 0103 	bic.w	r1, r3, #3
 800adb8:	448c      	add	ip, r1
 800adba:	44b4      	add	ip, r6
 800adbc:	4594      	cmp	ip, r2
 800adbe:	f280 8111 	bge.w	800afe4 <_realloc_r+0x2a0>
 800adc2:	1873      	adds	r3, r6, r1
 800adc4:	4293      	cmp	r3, r2
 800adc6:	f280 80e8 	bge.w	800af9a <_realloc_r+0x256>
 800adca:	4639      	mov	r1, r7
 800adcc:	4640      	mov	r0, r8
 800adce:	f7fa fbd9 	bl	8005584 <_malloc_r>
 800add2:	4607      	mov	r7, r0
 800add4:	b1e0      	cbz	r0, 800ae10 <_realloc_r+0xcc>
 800add6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800adda:	f023 0301 	bic.w	r3, r3, #1
 800adde:	444b      	add	r3, r9
 800ade0:	f1a0 0208 	sub.w	r2, r0, #8
 800ade4:	4293      	cmp	r3, r2
 800ade6:	f000 80d2 	beq.w	800af8e <_realloc_r+0x24a>
 800adea:	1f32      	subs	r2, r6, #4
 800adec:	2a24      	cmp	r2, #36	; 0x24
 800adee:	f200 80f5 	bhi.w	800afdc <_realloc_r+0x298>
 800adf2:	2a13      	cmp	r2, #19
 800adf4:	f200 80ac 	bhi.w	800af50 <_realloc_r+0x20c>
 800adf8:	4603      	mov	r3, r0
 800adfa:	4622      	mov	r2, r4
 800adfc:	6811      	ldr	r1, [r2, #0]
 800adfe:	6019      	str	r1, [r3, #0]
 800ae00:	6851      	ldr	r1, [r2, #4]
 800ae02:	6059      	str	r1, [r3, #4]
 800ae04:	6892      	ldr	r2, [r2, #8]
 800ae06:	609a      	str	r2, [r3, #8]
 800ae08:	4621      	mov	r1, r4
 800ae0a:	4640      	mov	r0, r8
 800ae0c:	f7fd ff30 	bl	8008c70 <_free_r>
 800ae10:	4640      	mov	r0, r8
 800ae12:	f7fa fe6d 	bl	8005af0 <__malloc_unlock>
 800ae16:	4638      	mov	r0, r7
 800ae18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1c:	f025 0507 	bic.w	r5, r5, #7
 800ae20:	2d00      	cmp	r5, #0
 800ae22:	462a      	mov	r2, r5
 800ae24:	da9e      	bge.n	800ad64 <_realloc_r+0x20>
 800ae26:	230c      	movs	r3, #12
 800ae28:	f8c8 3000 	str.w	r3, [r8]
 800ae2c:	2700      	movs	r7, #0
 800ae2e:	4638      	mov	r0, r7
 800ae30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae34:	461e      	mov	r6, r3
 800ae36:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800ae3a:	60d3      	str	r3, [r2, #12]
 800ae3c:	609a      	str	r2, [r3, #8]
 800ae3e:	1b73      	subs	r3, r6, r5
 800ae40:	2b0f      	cmp	r3, #15
 800ae42:	d822      	bhi.n	800ae8a <_realloc_r+0x146>
 800ae44:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ae48:	f003 0301 	and.w	r3, r3, #1
 800ae4c:	4333      	orrs	r3, r6
 800ae4e:	444e      	add	r6, r9
 800ae50:	f8c9 3004 	str.w	r3, [r9, #4]
 800ae54:	6873      	ldr	r3, [r6, #4]
 800ae56:	f043 0301 	orr.w	r3, r3, #1
 800ae5a:	6073      	str	r3, [r6, #4]
 800ae5c:	4640      	mov	r0, r8
 800ae5e:	4627      	mov	r7, r4
 800ae60:	f7fa fe46 	bl	8005af0 <__malloc_unlock>
 800ae64:	4638      	mov	r0, r7
 800ae66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae6a:	07c9      	lsls	r1, r1, #31
 800ae6c:	d4ad      	bmi.n	800adca <_realloc_r+0x86>
 800ae6e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800ae72:	eba9 0a03 	sub.w	sl, r9, r3
 800ae76:	f8da 1004 	ldr.w	r1, [sl, #4]
 800ae7a:	f021 0103 	bic.w	r1, r1, #3
 800ae7e:	e7a0      	b.n	800adc2 <_realloc_r+0x7e>
 800ae80:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	4611      	mov	r1, r2
 800ae86:	f7fa bb7d 	b.w	8005584 <_malloc_r>
 800ae8a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae8e:	f001 0101 	and.w	r1, r1, #1
 800ae92:	4329      	orrs	r1, r5
 800ae94:	f8c9 1004 	str.w	r1, [r9, #4]
 800ae98:	eb09 0105 	add.w	r1, r9, r5
 800ae9c:	444e      	add	r6, r9
 800ae9e:	f043 0301 	orr.w	r3, r3, #1
 800aea2:	604b      	str	r3, [r1, #4]
 800aea4:	6873      	ldr	r3, [r6, #4]
 800aea6:	f043 0301 	orr.w	r3, r3, #1
 800aeaa:	3108      	adds	r1, #8
 800aeac:	6073      	str	r3, [r6, #4]
 800aeae:	4640      	mov	r0, r8
 800aeb0:	f7fd fede 	bl	8008c70 <_free_r>
 800aeb4:	e7d2      	b.n	800ae5c <_realloc_r+0x118>
 800aeb6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800aeba:	f020 0b03 	bic.w	fp, r0, #3
 800aebe:	eb06 0c0b 	add.w	ip, r6, fp
 800aec2:	f105 0010 	add.w	r0, r5, #16
 800aec6:	4584      	cmp	ip, r0
 800aec8:	da4d      	bge.n	800af66 <_realloc_r+0x222>
 800aeca:	07c9      	lsls	r1, r1, #31
 800aecc:	f53f af7d 	bmi.w	800adca <_realloc_r+0x86>
 800aed0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800aed4:	eba9 0a01 	sub.w	sl, r9, r1
 800aed8:	f8da 1004 	ldr.w	r1, [sl, #4]
 800aedc:	f021 0103 	bic.w	r1, r1, #3
 800aee0:	448b      	add	fp, r1
 800aee2:	44b3      	add	fp, r6
 800aee4:	4558      	cmp	r0, fp
 800aee6:	f73f af6c 	bgt.w	800adc2 <_realloc_r+0x7e>
 800aeea:	4657      	mov	r7, sl
 800aeec:	f8da 100c 	ldr.w	r1, [sl, #12]
 800aef0:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800aef4:	1f32      	subs	r2, r6, #4
 800aef6:	2a24      	cmp	r2, #36	; 0x24
 800aef8:	60c1      	str	r1, [r0, #12]
 800aefa:	6088      	str	r0, [r1, #8]
 800aefc:	f200 80db 	bhi.w	800b0b6 <_realloc_r+0x372>
 800af00:	2a13      	cmp	r2, #19
 800af02:	f240 80d6 	bls.w	800b0b2 <_realloc_r+0x36e>
 800af06:	6821      	ldr	r1, [r4, #0]
 800af08:	f8ca 1008 	str.w	r1, [sl, #8]
 800af0c:	6861      	ldr	r1, [r4, #4]
 800af0e:	f8ca 100c 	str.w	r1, [sl, #12]
 800af12:	2a1b      	cmp	r2, #27
 800af14:	f200 80df 	bhi.w	800b0d6 <_realloc_r+0x392>
 800af18:	3408      	adds	r4, #8
 800af1a:	f10a 0210 	add.w	r2, sl, #16
 800af1e:	6821      	ldr	r1, [r4, #0]
 800af20:	6011      	str	r1, [r2, #0]
 800af22:	6861      	ldr	r1, [r4, #4]
 800af24:	6051      	str	r1, [r2, #4]
 800af26:	68a1      	ldr	r1, [r4, #8]
 800af28:	6091      	str	r1, [r2, #8]
 800af2a:	eb0a 0105 	add.w	r1, sl, r5
 800af2e:	ebab 0205 	sub.w	r2, fp, r5
 800af32:	f042 0201 	orr.w	r2, r2, #1
 800af36:	6099      	str	r1, [r3, #8]
 800af38:	604a      	str	r2, [r1, #4]
 800af3a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800af3e:	f003 0301 	and.w	r3, r3, #1
 800af42:	431d      	orrs	r5, r3
 800af44:	4640      	mov	r0, r8
 800af46:	f8ca 5004 	str.w	r5, [sl, #4]
 800af4a:	f7fa fdd1 	bl	8005af0 <__malloc_unlock>
 800af4e:	e76e      	b.n	800ae2e <_realloc_r+0xea>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	6003      	str	r3, [r0, #0]
 800af54:	6863      	ldr	r3, [r4, #4]
 800af56:	6043      	str	r3, [r0, #4]
 800af58:	2a1b      	cmp	r2, #27
 800af5a:	d868      	bhi.n	800b02e <_realloc_r+0x2ea>
 800af5c:	f104 0208 	add.w	r2, r4, #8
 800af60:	f100 0308 	add.w	r3, r0, #8
 800af64:	e74a      	b.n	800adfc <_realloc_r+0xb8>
 800af66:	eb09 0205 	add.w	r2, r9, r5
 800af6a:	609a      	str	r2, [r3, #8]
 800af6c:	ebac 0305 	sub.w	r3, ip, r5
 800af70:	f043 0301 	orr.w	r3, r3, #1
 800af74:	6053      	str	r3, [r2, #4]
 800af76:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	431d      	orrs	r5, r3
 800af80:	4640      	mov	r0, r8
 800af82:	f844 5c04 	str.w	r5, [r4, #-4]
 800af86:	f7fa fdb3 	bl	8005af0 <__malloc_unlock>
 800af8a:	4627      	mov	r7, r4
 800af8c:	e74f      	b.n	800ae2e <_realloc_r+0xea>
 800af8e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800af92:	f023 0303 	bic.w	r3, r3, #3
 800af96:	441e      	add	r6, r3
 800af98:	e751      	b.n	800ae3e <_realloc_r+0xfa>
 800af9a:	4657      	mov	r7, sl
 800af9c:	f8da 100c 	ldr.w	r1, [sl, #12]
 800afa0:	f857 0f08 	ldr.w	r0, [r7, #8]!
 800afa4:	1f32      	subs	r2, r6, #4
 800afa6:	2a24      	cmp	r2, #36	; 0x24
 800afa8:	60c1      	str	r1, [r0, #12]
 800afaa:	6088      	str	r0, [r1, #8]
 800afac:	d84c      	bhi.n	800b048 <_realloc_r+0x304>
 800afae:	2a13      	cmp	r2, #19
 800afb0:	d948      	bls.n	800b044 <_realloc_r+0x300>
 800afb2:	6821      	ldr	r1, [r4, #0]
 800afb4:	f8ca 1008 	str.w	r1, [sl, #8]
 800afb8:	6861      	ldr	r1, [r4, #4]
 800afba:	f8ca 100c 	str.w	r1, [sl, #12]
 800afbe:	2a1b      	cmp	r2, #27
 800afc0:	d856      	bhi.n	800b070 <_realloc_r+0x32c>
 800afc2:	3408      	adds	r4, #8
 800afc4:	f10a 0210 	add.w	r2, sl, #16
 800afc8:	461e      	mov	r6, r3
 800afca:	6823      	ldr	r3, [r4, #0]
 800afcc:	6013      	str	r3, [r2, #0]
 800afce:	6863      	ldr	r3, [r4, #4]
 800afd0:	6053      	str	r3, [r2, #4]
 800afd2:	68a3      	ldr	r3, [r4, #8]
 800afd4:	6093      	str	r3, [r2, #8]
 800afd6:	46d1      	mov	r9, sl
 800afd8:	463c      	mov	r4, r7
 800afda:	e730      	b.n	800ae3e <_realloc_r+0xfa>
 800afdc:	4621      	mov	r1, r4
 800afde:	f7ff fe35 	bl	800ac4c <memmove>
 800afe2:	e711      	b.n	800ae08 <_realloc_r+0xc4>
 800afe4:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 800afe8:	4657      	mov	r7, sl
 800afea:	60cb      	str	r3, [r1, #12]
 800afec:	6099      	str	r1, [r3, #8]
 800afee:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800aff2:	f8da 300c 	ldr.w	r3, [sl, #12]
 800aff6:	60cb      	str	r3, [r1, #12]
 800aff8:	1f32      	subs	r2, r6, #4
 800affa:	2a24      	cmp	r2, #36	; 0x24
 800affc:	6099      	str	r1, [r3, #8]
 800affe:	d82d      	bhi.n	800b05c <_realloc_r+0x318>
 800b000:	2a13      	cmp	r2, #19
 800b002:	d929      	bls.n	800b058 <_realloc_r+0x314>
 800b004:	6823      	ldr	r3, [r4, #0]
 800b006:	f8ca 3008 	str.w	r3, [sl, #8]
 800b00a:	6863      	ldr	r3, [r4, #4]
 800b00c:	f8ca 300c 	str.w	r3, [sl, #12]
 800b010:	2a1b      	cmp	r2, #27
 800b012:	d842      	bhi.n	800b09a <_realloc_r+0x356>
 800b014:	3408      	adds	r4, #8
 800b016:	f10a 0310 	add.w	r3, sl, #16
 800b01a:	6822      	ldr	r2, [r4, #0]
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	6862      	ldr	r2, [r4, #4]
 800b020:	605a      	str	r2, [r3, #4]
 800b022:	68a2      	ldr	r2, [r4, #8]
 800b024:	609a      	str	r2, [r3, #8]
 800b026:	4666      	mov	r6, ip
 800b028:	46d1      	mov	r9, sl
 800b02a:	463c      	mov	r4, r7
 800b02c:	e707      	b.n	800ae3e <_realloc_r+0xfa>
 800b02e:	68a3      	ldr	r3, [r4, #8]
 800b030:	6083      	str	r3, [r0, #8]
 800b032:	68e3      	ldr	r3, [r4, #12]
 800b034:	60c3      	str	r3, [r0, #12]
 800b036:	2a24      	cmp	r2, #36	; 0x24
 800b038:	d026      	beq.n	800b088 <_realloc_r+0x344>
 800b03a:	f104 0210 	add.w	r2, r4, #16
 800b03e:	f100 0310 	add.w	r3, r0, #16
 800b042:	e6db      	b.n	800adfc <_realloc_r+0xb8>
 800b044:	463a      	mov	r2, r7
 800b046:	e7bf      	b.n	800afc8 <_realloc_r+0x284>
 800b048:	4621      	mov	r1, r4
 800b04a:	4638      	mov	r0, r7
 800b04c:	461e      	mov	r6, r3
 800b04e:	46d1      	mov	r9, sl
 800b050:	f7ff fdfc 	bl	800ac4c <memmove>
 800b054:	463c      	mov	r4, r7
 800b056:	e6f2      	b.n	800ae3e <_realloc_r+0xfa>
 800b058:	463b      	mov	r3, r7
 800b05a:	e7de      	b.n	800b01a <_realloc_r+0x2d6>
 800b05c:	4621      	mov	r1, r4
 800b05e:	4638      	mov	r0, r7
 800b060:	4666      	mov	r6, ip
 800b062:	46d1      	mov	r9, sl
 800b064:	f7ff fdf2 	bl	800ac4c <memmove>
 800b068:	463c      	mov	r4, r7
 800b06a:	e6e8      	b.n	800ae3e <_realloc_r+0xfa>
 800b06c:	20000548 	.word	0x20000548
 800b070:	68a1      	ldr	r1, [r4, #8]
 800b072:	f8ca 1010 	str.w	r1, [sl, #16]
 800b076:	68e1      	ldr	r1, [r4, #12]
 800b078:	f8ca 1014 	str.w	r1, [sl, #20]
 800b07c:	2a24      	cmp	r2, #36	; 0x24
 800b07e:	d020      	beq.n	800b0c2 <_realloc_r+0x37e>
 800b080:	3410      	adds	r4, #16
 800b082:	f10a 0218 	add.w	r2, sl, #24
 800b086:	e79f      	b.n	800afc8 <_realloc_r+0x284>
 800b088:	6923      	ldr	r3, [r4, #16]
 800b08a:	6103      	str	r3, [r0, #16]
 800b08c:	6961      	ldr	r1, [r4, #20]
 800b08e:	6141      	str	r1, [r0, #20]
 800b090:	f104 0218 	add.w	r2, r4, #24
 800b094:	f100 0318 	add.w	r3, r0, #24
 800b098:	e6b0      	b.n	800adfc <_realloc_r+0xb8>
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	f8ca 3010 	str.w	r3, [sl, #16]
 800b0a0:	68e3      	ldr	r3, [r4, #12]
 800b0a2:	f8ca 3014 	str.w	r3, [sl, #20]
 800b0a6:	2a24      	cmp	r2, #36	; 0x24
 800b0a8:	d021      	beq.n	800b0ee <_realloc_r+0x3aa>
 800b0aa:	3410      	adds	r4, #16
 800b0ac:	f10a 0318 	add.w	r3, sl, #24
 800b0b0:	e7b3      	b.n	800b01a <_realloc_r+0x2d6>
 800b0b2:	463a      	mov	r2, r7
 800b0b4:	e733      	b.n	800af1e <_realloc_r+0x1da>
 800b0b6:	4621      	mov	r1, r4
 800b0b8:	4638      	mov	r0, r7
 800b0ba:	f7ff fdc7 	bl	800ac4c <memmove>
 800b0be:	4b16      	ldr	r3, [pc, #88]	; (800b118 <_realloc_r+0x3d4>)
 800b0c0:	e733      	b.n	800af2a <_realloc_r+0x1e6>
 800b0c2:	6922      	ldr	r2, [r4, #16]
 800b0c4:	f8ca 2018 	str.w	r2, [sl, #24]
 800b0c8:	6962      	ldr	r2, [r4, #20]
 800b0ca:	f8ca 201c 	str.w	r2, [sl, #28]
 800b0ce:	3418      	adds	r4, #24
 800b0d0:	f10a 0220 	add.w	r2, sl, #32
 800b0d4:	e778      	b.n	800afc8 <_realloc_r+0x284>
 800b0d6:	68a1      	ldr	r1, [r4, #8]
 800b0d8:	f8ca 1010 	str.w	r1, [sl, #16]
 800b0dc:	68e1      	ldr	r1, [r4, #12]
 800b0de:	f8ca 1014 	str.w	r1, [sl, #20]
 800b0e2:	2a24      	cmp	r2, #36	; 0x24
 800b0e4:	d00d      	beq.n	800b102 <_realloc_r+0x3be>
 800b0e6:	3410      	adds	r4, #16
 800b0e8:	f10a 0218 	add.w	r2, sl, #24
 800b0ec:	e717      	b.n	800af1e <_realloc_r+0x1da>
 800b0ee:	6923      	ldr	r3, [r4, #16]
 800b0f0:	f8ca 3018 	str.w	r3, [sl, #24]
 800b0f4:	6963      	ldr	r3, [r4, #20]
 800b0f6:	f8ca 301c 	str.w	r3, [sl, #28]
 800b0fa:	3418      	adds	r4, #24
 800b0fc:	f10a 0320 	add.w	r3, sl, #32
 800b100:	e78b      	b.n	800b01a <_realloc_r+0x2d6>
 800b102:	6922      	ldr	r2, [r4, #16]
 800b104:	f8ca 2018 	str.w	r2, [sl, #24]
 800b108:	6962      	ldr	r2, [r4, #20]
 800b10a:	f8ca 201c 	str.w	r2, [sl, #28]
 800b10e:	3418      	adds	r4, #24
 800b110:	f10a 0220 	add.w	r2, sl, #32
 800b114:	e703      	b.n	800af1e <_realloc_r+0x1da>
 800b116:	bf00      	nop
 800b118:	20000548 	.word	0x20000548

0800b11c <__swbuf_r>:
 800b11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b11e:	460d      	mov	r5, r1
 800b120:	4614      	mov	r4, r2
 800b122:	4606      	mov	r6, r0
 800b124:	b110      	cbz	r0, 800b12c <__swbuf_r+0x10>
 800b126:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d043      	beq.n	800b1b4 <__swbuf_r+0x98>
 800b12c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b130:	69a3      	ldr	r3, [r4, #24]
 800b132:	60a3      	str	r3, [r4, #8]
 800b134:	0717      	lsls	r7, r2, #28
 800b136:	b290      	uxth	r0, r2
 800b138:	d51b      	bpl.n	800b172 <__swbuf_r+0x56>
 800b13a:	6923      	ldr	r3, [r4, #16]
 800b13c:	b1cb      	cbz	r3, 800b172 <__swbuf_r+0x56>
 800b13e:	b2ed      	uxtb	r5, r5
 800b140:	0481      	lsls	r1, r0, #18
 800b142:	462f      	mov	r7, r5
 800b144:	d522      	bpl.n	800b18c <__swbuf_r+0x70>
 800b146:	6822      	ldr	r2, [r4, #0]
 800b148:	6961      	ldr	r1, [r4, #20]
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	4299      	cmp	r1, r3
 800b14e:	dd29      	ble.n	800b1a4 <__swbuf_r+0x88>
 800b150:	3301      	adds	r3, #1
 800b152:	68a1      	ldr	r1, [r4, #8]
 800b154:	3901      	subs	r1, #1
 800b156:	60a1      	str	r1, [r4, #8]
 800b158:	1c51      	adds	r1, r2, #1
 800b15a:	6021      	str	r1, [r4, #0]
 800b15c:	7015      	strb	r5, [r2, #0]
 800b15e:	6962      	ldr	r2, [r4, #20]
 800b160:	429a      	cmp	r2, r3
 800b162:	d02a      	beq.n	800b1ba <__swbuf_r+0x9e>
 800b164:	89a3      	ldrh	r3, [r4, #12]
 800b166:	07db      	lsls	r3, r3, #31
 800b168:	d501      	bpl.n	800b16e <__swbuf_r+0x52>
 800b16a:	2d0a      	cmp	r5, #10
 800b16c:	d025      	beq.n	800b1ba <__swbuf_r+0x9e>
 800b16e:	4638      	mov	r0, r7
 800b170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b172:	4621      	mov	r1, r4
 800b174:	4630      	mov	r0, r6
 800b176:	f7fc fb4f 	bl	8007818 <__swsetup_r>
 800b17a:	bb20      	cbnz	r0, 800b1c6 <__swbuf_r+0xaa>
 800b17c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b180:	6923      	ldr	r3, [r4, #16]
 800b182:	b290      	uxth	r0, r2
 800b184:	b2ed      	uxtb	r5, r5
 800b186:	0481      	lsls	r1, r0, #18
 800b188:	462f      	mov	r7, r5
 800b18a:	d4dc      	bmi.n	800b146 <__swbuf_r+0x2a>
 800b18c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b190:	81a2      	strh	r2, [r4, #12]
 800b192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b194:	6961      	ldr	r1, [r4, #20]
 800b196:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b19a:	6662      	str	r2, [r4, #100]	; 0x64
 800b19c:	6822      	ldr	r2, [r4, #0]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	4299      	cmp	r1, r3
 800b1a2:	dcd5      	bgt.n	800b150 <__swbuf_r+0x34>
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f7fd fce4 	bl	8008b74 <_fflush_r>
 800b1ac:	b958      	cbnz	r0, 800b1c6 <__swbuf_r+0xaa>
 800b1ae:	6822      	ldr	r2, [r4, #0]
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e7ce      	b.n	800b152 <__swbuf_r+0x36>
 800b1b4:	f7fa f920 	bl	80053f8 <__sinit>
 800b1b8:	e7b8      	b.n	800b12c <__swbuf_r+0x10>
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7fd fcd9 	bl	8008b74 <_fflush_r>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d0d3      	beq.n	800b16e <__swbuf_r+0x52>
 800b1c6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b1ca:	e7d0      	b.n	800b16e <__swbuf_r+0x52>

0800b1cc <_wcrtomb_r>:
 800b1cc:	b570      	push	{r4, r5, r6, lr}
 800b1ce:	4605      	mov	r5, r0
 800b1d0:	b084      	sub	sp, #16
 800b1d2:	461c      	mov	r4, r3
 800b1d4:	b139      	cbz	r1, 800b1e6 <_wcrtomb_r+0x1a>
 800b1d6:	4e0b      	ldr	r6, [pc, #44]	; (800b204 <_wcrtomb_r+0x38>)
 800b1d8:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 800b1dc:	47b0      	blx	r6
 800b1de:	1c43      	adds	r3, r0, #1
 800b1e0:	d009      	beq.n	800b1f6 <_wcrtomb_r+0x2a>
 800b1e2:	b004      	add	sp, #16
 800b1e4:	bd70      	pop	{r4, r5, r6, pc}
 800b1e6:	460a      	mov	r2, r1
 800b1e8:	4906      	ldr	r1, [pc, #24]	; (800b204 <_wcrtomb_r+0x38>)
 800b1ea:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 800b1ee:	a901      	add	r1, sp, #4
 800b1f0:	47b0      	blx	r6
 800b1f2:	1c43      	adds	r3, r0, #1
 800b1f4:	d1f5      	bne.n	800b1e2 <_wcrtomb_r+0x16>
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	238a      	movs	r3, #138	; 0x8a
 800b1fa:	6022      	str	r2, [r4, #0]
 800b1fc:	602b      	str	r3, [r5, #0]
 800b1fe:	b004      	add	sp, #16
 800b200:	bd70      	pop	{r4, r5, r6, pc}
 800b202:	bf00      	nop
 800b204:	20000958 	.word	0x20000958

0800b208 <__ascii_wctomb>:
 800b208:	b149      	cbz	r1, 800b21e <__ascii_wctomb+0x16>
 800b20a:	2aff      	cmp	r2, #255	; 0xff
 800b20c:	d802      	bhi.n	800b214 <__ascii_wctomb+0xc>
 800b20e:	700a      	strb	r2, [r1, #0]
 800b210:	2001      	movs	r0, #1
 800b212:	4770      	bx	lr
 800b214:	238a      	movs	r3, #138	; 0x8a
 800b216:	6003      	str	r3, [r0, #0]
 800b218:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b21c:	4770      	bx	lr
 800b21e:	4608      	mov	r0, r1
 800b220:	4770      	bx	lr
 800b222:	bf00      	nop

0800b224 <abort>:
 800b224:	b508      	push	{r3, lr}
 800b226:	2006      	movs	r0, #6
 800b228:	f000 f804 	bl	800b234 <raise>
 800b22c:	2001      	movs	r0, #1
 800b22e:	f7f6 fb87 	bl	8001940 <_exit>
 800b232:	bf00      	nop

0800b234 <raise>:
 800b234:	b538      	push	{r3, r4, r5, lr}
 800b236:	4b15      	ldr	r3, [pc, #84]	; (800b28c <raise+0x58>)
 800b238:	281f      	cmp	r0, #31
 800b23a:	681d      	ldr	r5, [r3, #0]
 800b23c:	d820      	bhi.n	800b280 <raise+0x4c>
 800b23e:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 800b242:	4604      	mov	r4, r0
 800b244:	b162      	cbz	r2, 800b260 <raise+0x2c>
 800b246:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 800b24a:	b14b      	cbz	r3, 800b260 <raise+0x2c>
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d015      	beq.n	800b27c <raise+0x48>
 800b250:	1c59      	adds	r1, r3, #1
 800b252:	d00f      	beq.n	800b274 <raise+0x40>
 800b254:	2500      	movs	r5, #0
 800b256:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800b25a:	4798      	blx	r3
 800b25c:	4628      	mov	r0, r5
 800b25e:	bd38      	pop	{r3, r4, r5, pc}
 800b260:	4628      	mov	r0, r5
 800b262:	f000 f82b 	bl	800b2bc <_getpid_r>
 800b266:	4622      	mov	r2, r4
 800b268:	4601      	mov	r1, r0
 800b26a:	4628      	mov	r0, r5
 800b26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b270:	f000 b80e 	b.w	800b290 <_kill_r>
 800b274:	2316      	movs	r3, #22
 800b276:	602b      	str	r3, [r5, #0]
 800b278:	2001      	movs	r0, #1
 800b27a:	bd38      	pop	{r3, r4, r5, pc}
 800b27c:	2000      	movs	r0, #0
 800b27e:	bd38      	pop	{r3, r4, r5, pc}
 800b280:	2316      	movs	r3, #22
 800b282:	602b      	str	r3, [r5, #0]
 800b284:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b288:	bd38      	pop	{r3, r4, r5, pc}
 800b28a:	bf00      	nop
 800b28c:	20000000 	.word	0x20000000

0800b290 <_kill_r>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	460c      	mov	r4, r1
 800b294:	4d08      	ldr	r5, [pc, #32]	; (800b2b8 <_kill_r+0x28>)
 800b296:	4603      	mov	r3, r0
 800b298:	2600      	movs	r6, #0
 800b29a:	4620      	mov	r0, r4
 800b29c:	4611      	mov	r1, r2
 800b29e:	461c      	mov	r4, r3
 800b2a0:	602e      	str	r6, [r5, #0]
 800b2a2:	f7f6 fb6f 	bl	8001984 <_kill>
 800b2a6:	1c43      	adds	r3, r0, #1
 800b2a8:	d000      	beq.n	800b2ac <_kill_r+0x1c>
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	682b      	ldr	r3, [r5, #0]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d0fb      	beq.n	800b2aa <_kill_r+0x1a>
 800b2b2:	6023      	str	r3, [r4, #0]
 800b2b4:	bd70      	pop	{r4, r5, r6, pc}
 800b2b6:	bf00      	nop
 800b2b8:	200014d8 	.word	0x200014d8

0800b2bc <_getpid_r>:
 800b2bc:	f7f6 b968 	b.w	8001590 <_getpid>

0800b2c0 <log>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	ed2d 8b02 	vpush	{d8}
 800b2c6:	ec55 4b10 	vmov	r4, r5, d0
 800b2ca:	f000 f841 	bl	800b350 <__ieee754_log>
 800b2ce:	4b1e      	ldr	r3, [pc, #120]	; (800b348 <log+0x88>)
 800b2d0:	eeb0 8a40 	vmov.f32	s16, s0
 800b2d4:	eef0 8a60 	vmov.f32	s17, s1
 800b2d8:	f993 3000 	ldrsb.w	r3, [r3]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	d01a      	beq.n	800b316 <log+0x56>
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	462b      	mov	r3, r5
 800b2e4:	4620      	mov	r0, r4
 800b2e6:	4629      	mov	r1, r5
 800b2e8:	f7f5 feec 	bl	80010c4 <__aeabi_dcmpun>
 800b2ec:	b998      	cbnz	r0, 800b316 <log+0x56>
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	4620      	mov	r0, r4
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	f7f5 fedb 	bl	80010b0 <__aeabi_dcmpgt>
 800b2fa:	b960      	cbnz	r0, 800b316 <log+0x56>
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	2300      	movs	r3, #0
 800b300:	4620      	mov	r0, r4
 800b302:	4629      	mov	r1, r5
 800b304:	f7f5 feac 	bl	8001060 <__aeabi_dcmpeq>
 800b308:	b160      	cbz	r0, 800b324 <log+0x64>
 800b30a:	f7fa f869 	bl	80053e0 <__errno>
 800b30e:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 800b340 <log+0x80>
 800b312:	2322      	movs	r3, #34	; 0x22
 800b314:	6003      	str	r3, [r0, #0]
 800b316:	eeb0 0a48 	vmov.f32	s0, s16
 800b31a:	eef0 0a68 	vmov.f32	s1, s17
 800b31e:	ecbd 8b02 	vpop	{d8}
 800b322:	bd38      	pop	{r3, r4, r5, pc}
 800b324:	f7fa f85c 	bl	80053e0 <__errno>
 800b328:	ecbd 8b02 	vpop	{d8}
 800b32c:	4603      	mov	r3, r0
 800b32e:	2221      	movs	r2, #33	; 0x21
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	4806      	ldr	r0, [pc, #24]	; (800b34c <log+0x8c>)
 800b334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b338:	f000 ba26 	b.w	800b788 <nan>
 800b33c:	f3af 8000 	nop.w
 800b340:	00000000 	.word	0x00000000
 800b344:	fff00000 	.word	0xfff00000
 800b348:	20000ac4 	.word	0x20000ac4
 800b34c:	0800bbb8 	.word	0x0800bbb8

0800b350 <__ieee754_log>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	ec51 0b10 	vmov	r0, r1, d0
 800b358:	ed2d 8b02 	vpush	{d8}
 800b35c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b360:	b085      	sub	sp, #20
 800b362:	460f      	mov	r7, r1
 800b364:	da58      	bge.n	800b418 <__ieee754_log+0xc8>
 800b366:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b36a:	4303      	orrs	r3, r0
 800b36c:	ee10 2a10 	vmov	r2, s0
 800b370:	f000 80fc 	beq.w	800b56c <__ieee754_log+0x21c>
 800b374:	2900      	cmp	r1, #0
 800b376:	f2c0 813c 	blt.w	800b5f2 <__ieee754_log+0x2a2>
 800b37a:	4be1      	ldr	r3, [pc, #900]	; (800b700 <__ieee754_log+0x3b0>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	f7f5 f8fb 	bl	8000578 <__aeabi_dmul>
 800b382:	4be0      	ldr	r3, [pc, #896]	; (800b704 <__ieee754_log+0x3b4>)
 800b384:	460f      	mov	r7, r1
 800b386:	429f      	cmp	r7, r3
 800b388:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800b38c:	dc49      	bgt.n	800b422 <__ieee754_log+0xd2>
 800b38e:	153e      	asrs	r6, r7, #20
 800b390:	f3c7 0713 	ubfx	r7, r7, #0, #20
 800b394:	f507 2315 	add.w	r3, r7, #610304	; 0x95000
 800b398:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800b39c:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800b3a0:	4416      	add	r6, r2
 800b3a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3a6:	eb06 5613 	add.w	r6, r6, r3, lsr #20
 800b3aa:	f083 537f 	eor.w	r3, r3, #1069547520	; 0x3fc00000
 800b3ae:	f483 1340 	eor.w	r3, r3, #3145728	; 0x300000
 800b3b2:	ea43 0107 	orr.w	r1, r3, r7
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	4bd3      	ldr	r3, [pc, #844]	; (800b708 <__ieee754_log+0x3b8>)
 800b3ba:	f7f4 ff25 	bl	8000208 <__aeabi_dsub>
 800b3be:	1cbb      	adds	r3, r7, #2
 800b3c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3c4:	2b02      	cmp	r3, #2
 800b3c6:	4682      	mov	sl, r0
 800b3c8:	468b      	mov	fp, r1
 800b3ca:	dc35      	bgt.n	800b438 <__ieee754_log+0xe8>
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	f7f5 fe46 	bl	8001060 <__aeabi_dcmpeq>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	f000 80d6 	beq.w	800b586 <__ieee754_log+0x236>
 800b3da:	2e00      	cmp	r6, #0
 800b3dc:	f000 8160 	beq.w	800b6a0 <__ieee754_log+0x350>
 800b3e0:	4630      	mov	r0, r6
 800b3e2:	f7f5 f85f 	bl	80004a4 <__aeabi_i2d>
 800b3e6:	a3b0      	add	r3, pc, #704	; (adr r3, 800b6a8 <__ieee754_log+0x358>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	460f      	mov	r7, r1
 800b3f0:	f7f5 f8c2 	bl	8000578 <__aeabi_dmul>
 800b3f4:	a3ae      	add	r3, pc, #696	; (adr r3, 800b6b0 <__ieee754_log+0x360>)
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	4604      	mov	r4, r0
 800b3fc:	460d      	mov	r5, r1
 800b3fe:	4630      	mov	r0, r6
 800b400:	4639      	mov	r1, r7
 800b402:	f7f5 f8b9 	bl	8000578 <__aeabi_dmul>
 800b406:	4602      	mov	r2, r0
 800b408:	460b      	mov	r3, r1
 800b40a:	4620      	mov	r0, r4
 800b40c:	4629      	mov	r1, r5
 800b40e:	f7f4 fefd 	bl	800020c <__adddf3>
 800b412:	ec41 0b10 	vmov	d0, r0, r1
 800b416:	e00a      	b.n	800b42e <__ieee754_log+0xde>
 800b418:	4bba      	ldr	r3, [pc, #744]	; (800b704 <__ieee754_log+0x3b4>)
 800b41a:	429f      	cmp	r7, r3
 800b41c:	f04f 0200 	mov.w	r2, #0
 800b420:	ddb5      	ble.n	800b38e <__ieee754_log+0x3e>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	f7f4 fef1 	bl	800020c <__adddf3>
 800b42a:	ec41 0b10 	vmov	d0, r0, r1
 800b42e:	b005      	add	sp, #20
 800b430:	ecbd 8b02 	vpop	{d8}
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	f5a7 23c2 	sub.w	r3, r7, #397312	; 0x61000
 800b43c:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b440:	9301      	str	r3, [sp, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b448:	f7f4 fee0 	bl	800020c <__adddf3>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4650      	mov	r0, sl
 800b452:	4659      	mov	r1, fp
 800b454:	f7f5 f9ba 	bl	80007cc <__aeabi_ddiv>
 800b458:	ec41 0b18 	vmov	d8, r0, r1
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7f5 f821 	bl	80004a4 <__aeabi_i2d>
 800b462:	ec53 2b18 	vmov	r2, r3, d8
 800b466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b46a:	ec51 0b18 	vmov	r0, r1, d8
 800b46e:	f7f5 f883 	bl	8000578 <__aeabi_dmul>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	4680      	mov	r8, r0
 800b478:	4689      	mov	r9, r1
 800b47a:	f7f5 f87d 	bl	8000578 <__aeabi_dmul>
 800b47e:	a38e      	add	r3, pc, #568	; (adr r3, 800b6b8 <__ieee754_log+0x368>)
 800b480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b484:	4604      	mov	r4, r0
 800b486:	460d      	mov	r5, r1
 800b488:	f7f5 f876 	bl	8000578 <__aeabi_dmul>
 800b48c:	a38c      	add	r3, pc, #560	; (adr r3, 800b6c0 <__ieee754_log+0x370>)
 800b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b492:	f7f4 febb 	bl	800020c <__adddf3>
 800b496:	4622      	mov	r2, r4
 800b498:	462b      	mov	r3, r5
 800b49a:	f7f5 f86d 	bl	8000578 <__aeabi_dmul>
 800b49e:	a38a      	add	r3, pc, #552	; (adr r3, 800b6c8 <__ieee754_log+0x378>)
 800b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a4:	f7f4 feb2 	bl	800020c <__adddf3>
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	462b      	mov	r3, r5
 800b4ac:	f7f5 f864 	bl	8000578 <__aeabi_dmul>
 800b4b0:	a387      	add	r3, pc, #540	; (adr r3, 800b6d0 <__ieee754_log+0x380>)
 800b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b6:	f7f4 fea9 	bl	800020c <__adddf3>
 800b4ba:	4642      	mov	r2, r8
 800b4bc:	464b      	mov	r3, r9
 800b4be:	f7f5 f85b 	bl	8000578 <__aeabi_dmul>
 800b4c2:	a385      	add	r3, pc, #532	; (adr r3, 800b6d8 <__ieee754_log+0x388>)
 800b4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c8:	4680      	mov	r8, r0
 800b4ca:	4689      	mov	r9, r1
 800b4cc:	4620      	mov	r0, r4
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	f7f5 f852 	bl	8000578 <__aeabi_dmul>
 800b4d4:	a382      	add	r3, pc, #520	; (adr r3, 800b6e0 <__ieee754_log+0x390>)
 800b4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4da:	f7f4 fe97 	bl	800020c <__adddf3>
 800b4de:	4622      	mov	r2, r4
 800b4e0:	462b      	mov	r3, r5
 800b4e2:	f7f5 f849 	bl	8000578 <__aeabi_dmul>
 800b4e6:	a380      	add	r3, pc, #512	; (adr r3, 800b6e8 <__ieee754_log+0x398>)
 800b4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ec:	f7f4 fe8e 	bl	800020c <__adddf3>
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	462b      	mov	r3, r5
 800b4f4:	f7f5 f840 	bl	8000578 <__aeabi_dmul>
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	4640      	mov	r0, r8
 800b500:	f7f4 fe84 	bl	800020c <__adddf3>
 800b504:	f5c7 27d7 	rsb	r7, r7, #440320	; 0x6b800
 800b508:	9b01      	ldr	r3, [sp, #4]
 800b50a:	3751      	adds	r7, #81	; 0x51
 800b50c:	431f      	orrs	r7, r3
 800b50e:	2f00      	cmp	r7, #0
 800b510:	4680      	mov	r8, r0
 800b512:	4689      	mov	r9, r1
 800b514:	dd5f      	ble.n	800b5d6 <__ieee754_log+0x286>
 800b516:	4b7d      	ldr	r3, [pc, #500]	; (800b70c <__ieee754_log+0x3bc>)
 800b518:	2200      	movs	r2, #0
 800b51a:	4650      	mov	r0, sl
 800b51c:	4659      	mov	r1, fp
 800b51e:	f7f5 f82b 	bl	8000578 <__aeabi_dmul>
 800b522:	4652      	mov	r2, sl
 800b524:	465b      	mov	r3, fp
 800b526:	f7f5 f827 	bl	8000578 <__aeabi_dmul>
 800b52a:	4604      	mov	r4, r0
 800b52c:	460d      	mov	r5, r1
 800b52e:	2e00      	cmp	r6, #0
 800b530:	d169      	bne.n	800b606 <__ieee754_log+0x2b6>
 800b532:	4622      	mov	r2, r4
 800b534:	462b      	mov	r3, r5
 800b536:	4640      	mov	r0, r8
 800b538:	4649      	mov	r1, r9
 800b53a:	f7f4 fe67 	bl	800020c <__adddf3>
 800b53e:	ec53 2b18 	vmov	r2, r3, d8
 800b542:	f7f5 f819 	bl	8000578 <__aeabi_dmul>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	4620      	mov	r0, r4
 800b54c:	4629      	mov	r1, r5
 800b54e:	f7f4 fe5b 	bl	8000208 <__aeabi_dsub>
 800b552:	4602      	mov	r2, r0
 800b554:	460b      	mov	r3, r1
 800b556:	4650      	mov	r0, sl
 800b558:	4659      	mov	r1, fp
 800b55a:	f7f4 fe55 	bl	8000208 <__aeabi_dsub>
 800b55e:	ec41 0b10 	vmov	d0, r0, r1
 800b562:	b005      	add	sp, #20
 800b564:	ecbd 8b02 	vpop	{d8}
 800b568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b56c:	2200      	movs	r2, #0
 800b56e:	2300      	movs	r3, #0
 800b570:	4967      	ldr	r1, [pc, #412]	; (800b710 <__ieee754_log+0x3c0>)
 800b572:	2000      	movs	r0, #0
 800b574:	f7f5 f92a 	bl	80007cc <__aeabi_ddiv>
 800b578:	ec41 0b10 	vmov	d0, r0, r1
 800b57c:	b005      	add	sp, #20
 800b57e:	ecbd 8b02 	vpop	{d8}
 800b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b586:	a35a      	add	r3, pc, #360	; (adr r3, 800b6f0 <__ieee754_log+0x3a0>)
 800b588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58c:	4650      	mov	r0, sl
 800b58e:	4659      	mov	r1, fp
 800b590:	f7f4 fff2 	bl	8000578 <__aeabi_dmul>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	2000      	movs	r0, #0
 800b59a:	495c      	ldr	r1, [pc, #368]	; (800b70c <__ieee754_log+0x3bc>)
 800b59c:	f7f4 fe34 	bl	8000208 <__aeabi_dsub>
 800b5a0:	4652      	mov	r2, sl
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	460d      	mov	r5, r1
 800b5a6:	465b      	mov	r3, fp
 800b5a8:	4650      	mov	r0, sl
 800b5aa:	4659      	mov	r1, fp
 800b5ac:	f7f4 ffe4 	bl	8000578 <__aeabi_dmul>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	f7f4 ffde 	bl	8000578 <__aeabi_dmul>
 800b5bc:	4604      	mov	r4, r0
 800b5be:	460d      	mov	r5, r1
 800b5c0:	2e00      	cmp	r6, #0
 800b5c2:	d159      	bne.n	800b678 <__ieee754_log+0x328>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	4650      	mov	r0, sl
 800b5ca:	4659      	mov	r1, fp
 800b5cc:	f7f4 fe1c 	bl	8000208 <__aeabi_dsub>
 800b5d0:	ec41 0b10 	vmov	d0, r0, r1
 800b5d4:	e72b      	b.n	800b42e <__ieee754_log+0xde>
 800b5d6:	2e00      	cmp	r6, #0
 800b5d8:	f040 809c 	bne.w	800b714 <__ieee754_log+0x3c4>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	460b      	mov	r3, r1
 800b5e0:	4650      	mov	r0, sl
 800b5e2:	4659      	mov	r1, fp
 800b5e4:	f7f4 fe10 	bl	8000208 <__aeabi_dsub>
 800b5e8:	ec53 2b18 	vmov	r2, r3, d8
 800b5ec:	f7f4 ffc4 	bl	8000578 <__aeabi_dmul>
 800b5f0:	e7af      	b.n	800b552 <__ieee754_log+0x202>
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	f7f4 fe08 	bl	8000208 <__aeabi_dsub>
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	f7f5 f8e6 	bl	80007cc <__aeabi_ddiv>
 800b600:	ec41 0b10 	vmov	d0, r0, r1
 800b604:	e713      	b.n	800b42e <__ieee754_log+0xde>
 800b606:	a328      	add	r3, pc, #160	; (adr r3, 800b6a8 <__ieee754_log+0x358>)
 800b608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b610:	f7f4 ffb2 	bl	8000578 <__aeabi_dmul>
 800b614:	4622      	mov	r2, r4
 800b616:	462b      	mov	r3, r5
 800b618:	4606      	mov	r6, r0
 800b61a:	460f      	mov	r7, r1
 800b61c:	4640      	mov	r0, r8
 800b61e:	4649      	mov	r1, r9
 800b620:	f7f4 fdf4 	bl	800020c <__adddf3>
 800b624:	ec53 2b18 	vmov	r2, r3, d8
 800b628:	f7f4 ffa6 	bl	8000578 <__aeabi_dmul>
 800b62c:	a320      	add	r3, pc, #128	; (adr r3, 800b6b0 <__ieee754_log+0x360>)
 800b62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b632:	4680      	mov	r8, r0
 800b634:	4689      	mov	r9, r1
 800b636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b63a:	f7f4 ff9d 	bl	8000578 <__aeabi_dmul>
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	4640      	mov	r0, r8
 800b644:	4649      	mov	r1, r9
 800b646:	f7f4 fde1 	bl	800020c <__adddf3>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4620      	mov	r0, r4
 800b650:	4629      	mov	r1, r5
 800b652:	f7f4 fdd9 	bl	8000208 <__aeabi_dsub>
 800b656:	4652      	mov	r2, sl
 800b658:	465b      	mov	r3, fp
 800b65a:	f7f4 fdd5 	bl	8000208 <__aeabi_dsub>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4630      	mov	r0, r6
 800b664:	4639      	mov	r1, r7
 800b666:	f7f4 fdcf 	bl	8000208 <__aeabi_dsub>
 800b66a:	ec41 0b10 	vmov	d0, r0, r1
 800b66e:	b005      	add	sp, #20
 800b670:	ecbd 8b02 	vpop	{d8}
 800b674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b678:	4630      	mov	r0, r6
 800b67a:	f7f4 ff13 	bl	80004a4 <__aeabi_i2d>
 800b67e:	a30a      	add	r3, pc, #40	; (adr r3, 800b6a8 <__ieee754_log+0x358>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	4680      	mov	r8, r0
 800b686:	4689      	mov	r9, r1
 800b688:	f7f4 ff76 	bl	8000578 <__aeabi_dmul>
 800b68c:	a308      	add	r3, pc, #32	; (adr r3, 800b6b0 <__ieee754_log+0x360>)
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	4606      	mov	r6, r0
 800b694:	460f      	mov	r7, r1
 800b696:	4640      	mov	r0, r8
 800b698:	4649      	mov	r1, r9
 800b69a:	f7f4 ff6d 	bl	8000578 <__aeabi_dmul>
 800b69e:	e7d4      	b.n	800b64a <__ieee754_log+0x2fa>
 800b6a0:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800b6f8 <__ieee754_log+0x3a8>
 800b6a4:	e6c3      	b.n	800b42e <__ieee754_log+0xde>
 800b6a6:	bf00      	nop
 800b6a8:	fee00000 	.word	0xfee00000
 800b6ac:	3fe62e42 	.word	0x3fe62e42
 800b6b0:	35793c76 	.word	0x35793c76
 800b6b4:	3dea39ef 	.word	0x3dea39ef
 800b6b8:	df3e5244 	.word	0xdf3e5244
 800b6bc:	3fc2f112 	.word	0x3fc2f112
 800b6c0:	96cb03de 	.word	0x96cb03de
 800b6c4:	3fc74664 	.word	0x3fc74664
 800b6c8:	94229359 	.word	0x94229359
 800b6cc:	3fd24924 	.word	0x3fd24924
 800b6d0:	55555593 	.word	0x55555593
 800b6d4:	3fe55555 	.word	0x3fe55555
 800b6d8:	d078c69f 	.word	0xd078c69f
 800b6dc:	3fc39a09 	.word	0x3fc39a09
 800b6e0:	1d8e78af 	.word	0x1d8e78af
 800b6e4:	3fcc71c5 	.word	0x3fcc71c5
 800b6e8:	9997fa04 	.word	0x9997fa04
 800b6ec:	3fd99999 	.word	0x3fd99999
 800b6f0:	55555555 	.word	0x55555555
 800b6f4:	3fd55555 	.word	0x3fd55555
	...
 800b700:	43500000 	.word	0x43500000
 800b704:	7fefffff 	.word	0x7fefffff
 800b708:	3ff00000 	.word	0x3ff00000
 800b70c:	3fe00000 	.word	0x3fe00000
 800b710:	c3500000 	.word	0xc3500000
 800b714:	a318      	add	r3, pc, #96	; (adr r3, 800b778 <__ieee754_log+0x428>)
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b71e:	f7f4 ff2b 	bl	8000578 <__aeabi_dmul>
 800b722:	4642      	mov	r2, r8
 800b724:	464b      	mov	r3, r9
 800b726:	4604      	mov	r4, r0
 800b728:	460d      	mov	r5, r1
 800b72a:	4650      	mov	r0, sl
 800b72c:	4659      	mov	r1, fp
 800b72e:	f7f4 fd6b 	bl	8000208 <__aeabi_dsub>
 800b732:	ec53 2b18 	vmov	r2, r3, d8
 800b736:	f7f4 ff1f 	bl	8000578 <__aeabi_dmul>
 800b73a:	a311      	add	r3, pc, #68	; (adr r3, 800b780 <__ieee754_log+0x430>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	4606      	mov	r6, r0
 800b742:	460f      	mov	r7, r1
 800b744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b748:	f7f4 ff16 	bl	8000578 <__aeabi_dmul>
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	f7f4 fd58 	bl	8000208 <__aeabi_dsub>
 800b758:	4652      	mov	r2, sl
 800b75a:	465b      	mov	r3, fp
 800b75c:	f7f4 fd54 	bl	8000208 <__aeabi_dsub>
 800b760:	4602      	mov	r2, r0
 800b762:	460b      	mov	r3, r1
 800b764:	4620      	mov	r0, r4
 800b766:	4629      	mov	r1, r5
 800b768:	f7f4 fd4e 	bl	8000208 <__aeabi_dsub>
 800b76c:	ec41 0b10 	vmov	d0, r0, r1
 800b770:	e65d      	b.n	800b42e <__ieee754_log+0xde>
 800b772:	bf00      	nop
 800b774:	f3af 8000 	nop.w
 800b778:	fee00000 	.word	0xfee00000
 800b77c:	3fe62e42 	.word	0x3fe62e42
 800b780:	35793c76 	.word	0x35793c76
 800b784:	3dea39ef 	.word	0x3dea39ef

0800b788 <nan>:
 800b788:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b790 <nan+0x8>
 800b78c:	4770      	bx	lr
 800b78e:	bf00      	nop
 800b790:	00000000 	.word	0x00000000
 800b794:	7ff80000 	.word	0x7ff80000

0800b798 <_init>:
 800b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79a:	bf00      	nop
 800b79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79e:	bc08      	pop	{r3}
 800b7a0:	469e      	mov	lr, r3
 800b7a2:	4770      	bx	lr

0800b7a4 <_fini>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	bf00      	nop
 800b7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7aa:	bc08      	pop	{r3}
 800b7ac:	469e      	mov	lr, r3
 800b7ae:	4770      	bx	lr
